"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –ö–ë–ñ–£
"""
import asyncio
import logging
import os
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from src.services.supabase_service import SupabaseService
from src.services.openai_service import OpenAIService
from src.services.voice_service import VoiceService
from src.database.queries import DatabaseQueries
from src.config import SUPABASE_URL, SUPABASE_KEY

# –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from src.bot.handlers.start import start_command, main_menu_callback, help_command
from src.bot.handlers.profile import (
    profile_callback,
    edit_profile_callback,
    update_weight_callback,
    handle_profile_age,
    handle_gender_callback,
    handle_profile_height,
    handle_profile_current_weight,
    handle_profile_target_weight,
    handle_activity_callback,
    handle_goal_callback,
    handle_method_callback
)
from src.bot.handlers.food_logging import (
    log_food_callback,
    handle_food_description,
    confirm_food_callback,
    cancel_food_callback,
    today_stats_callback,
    handle_voice_message
)
from src.bot.handlers.meal_planning import (
    meal_suggestions_callback,
    handle_meal_request,
    nutrition_plan_callback,
    adjust_plan_callback,
    handle_adjust_request,
    recalculate_plan_callback,
    ai_chat_callback,
    handle_ai_chat
)
from src.bot.handlers.settings import settings_callback
from src.bot.states import BotState

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def route_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state = context.user_data.get('state', BotState.IDLE)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if state == BotState.PROFILE_AGE:
        await handle_profile_age(update, context)
    elif state == BotState.PROFILE_HEIGHT:
        await handle_profile_height(update, context)
    elif state == BotState.PROFILE_CURRENT_WEIGHT:
        await handle_profile_current_weight(update, context)
    elif state == BotState.PROFILE_TARGET_WEIGHT:
        await handle_profile_target_weight(update, context)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥—ã
    elif state == BotState.FOOD_LOG_WAITING:
        await handle_food_description(update, context)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è
    elif state == BotState.MEAL_PLAN_REQUEST:
        await handle_meal_request(update, context)
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞
    elif state == BotState.ADJUST_NUTRITION:
        await handle_adjust_request(update, context)
    
    # AI —á–∞—Ç
    elif state == BotState.AI_CHAT:
        await handle_ai_chat(update, context)
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - AI —á–∞—Ç
    else:
        await handle_ai_chat(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start"
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    if not SUPABASE_URL or not SUPABASE_KEY:
        logger.error("‚ùå SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    supabase_service = SupabaseService(SUPABASE_URL, SUPABASE_KEY)
    supabase_client = supabase_service.get_client()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ Supabase (–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ fallback)
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    openai_api_key = os.getenv("OPENAI_API_KEY")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Supabase –µ—Å–ª–∏ –Ω–µ –≤ env
    if not telegram_token:
        telegram_token = supabase_service.get_secret("TELEGRAM_BOT_TOKEN")
    if not openai_api_key:
        openai_api_key = supabase_service.get_secret("OPENAI_API_KEY")
    
    if not telegram_token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not openai_api_key:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    openai_service = OpenAIService(openai_api_key)
    voice_service = VoiceService(openai_api_key)
    db_queries = DatabaseQueries(supabase_client)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(telegram_token).build()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    application.bot_data['db'] = db_queries
    application.bot_data['openai'] = openai_service
    application.bot_data['voice'] = voice_service
    application.bot_data['bot_token'] = telegram_token
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(main_menu_callback, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    
    # –ü—Ä–æ—Ñ–∏–ª—å
    application.add_handler(CallbackQueryHandler(profile_callback, pattern="^profile$"))
    application.add_handler(CallbackQueryHandler(edit_profile_callback, pattern="^edit_profile$"))
    application.add_handler(CallbackQueryHandler(update_weight_callback, pattern="^update_weight$"))
    application.add_handler(CallbackQueryHandler(handle_gender_callback, pattern="^gender_"))
    application.add_handler(CallbackQueryHandler(handle_activity_callback, pattern="^activity_"))
    application.add_handler(CallbackQueryHandler(handle_goal_callback, pattern="^goal_"))
    application.add_handler(CallbackQueryHandler(handle_method_callback, pattern="^method_"))
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã
    application.add_handler(CallbackQueryHandler(log_food_callback, pattern="^log_food$"))
    application.add_handler(CallbackQueryHandler(confirm_food_callback, pattern="^confirm_food_"))
    application.add_handler(CallbackQueryHandler(cancel_food_callback, pattern="^cancel_food$"))
    application.add_handler(CallbackQueryHandler(today_stats_callback, pattern="^today_stats$"))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è
    application.add_handler(CallbackQueryHandler(nutrition_plan_callback, pattern="^nutrition_plan$"))
    application.add_handler(CallbackQueryHandler(meal_suggestions_callback, pattern="^meal_suggestions$"))
    application.add_handler(CallbackQueryHandler(adjust_plan_callback, pattern="^adjust_plan$"))
    application.add_handler(CallbackQueryHandler(recalculate_plan_callback, pattern="^recalculate_plan$"))
    application.add_handler(CallbackQueryHandler(ai_chat_callback, pattern="^ai_chat$"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    application.add_handler(CallbackQueryHandler(settings_callback, pattern="^settings$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, route_text_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
