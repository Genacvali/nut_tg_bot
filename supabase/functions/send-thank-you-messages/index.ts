// ============================================
// –û–¢–ü–†–ê–í–ö–ê –ë–õ–ê–ì–û–î–ê–†–°–¢–í–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
// ============================================
// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ —Ä–∞–Ω–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
// ============================================

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface SendMessageResponse {
  success: boolean;
  sent: number;
  failed: number;
  errors: string[];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(
  botToken: string,
  chatId: number,
  message: string
): Promise<boolean> {
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "Markdown",
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error(`Failed to send message to ${chatId}:`, error);
      return false;
    }

    return true;
  } catch (error) {
    console.error(`Error sending message to ${chatId}:`, error);
    return false;
  }
}

serve(async (req) => {
  // Handle CORS
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º credentials
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const botToken = Deno.env.get("TELEGRAM_BOT_TOKEN")!;

    if (!botToken) {
      throw new Error("TELEGRAM_BOT_TOKEN not configured");
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    console.log("Starting to send thank you messages...");

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ —Å unlimited —Å—Ç–∞—Ç—É—Å–æ–º
    const { data: subscriptions, error: subsError } = await supabase
      .from("user_subscriptions")
      .select("user_id")
      .eq("is_unlimited", true)
      .eq("status", "active");

    if (subsError) {
      throw new Error(`Failed to fetch subscriptions: ${subsError.message}`);
    }

    if (!subscriptions || subscriptions.length === 0) {
      return new Response(
        JSON.stringify({
          success: true,
          sent: 0,
          failed: 0,
          errors: [],
          message: "No users found with unlimited subscription",
        }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    const userIds = subscriptions.map(s => s.user_id);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error: usersError } = await supabase
      .from("users")
      .select("id, telegram_id, username, first_name")
      .in("id", userIds);

    if (usersError) {
      throw new Error(`Failed to fetch users: ${usersError.message}`);
    }

    if (!users || users.length === 0) {
      return new Response(
        JSON.stringify({
          success: true,
          sent: 0,
          failed: 0,
          errors: [],
          message: "No users found with unlimited subscription",
        }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    console.log(`Found ${users.length} users with unlimited subscription`);

    // –ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const thankYouMessage = `üéâ **–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª —Å –Ω–∞–º–∏ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞!**

–ü—Ä–∏–≤–µ—Ç! –Ø C.I.D., –∏ —è —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ! üôè

–¢—ã –±—ã–ª –æ–¥–Ω–∏–º –∏–∑ **–ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**, –∫—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –º–µ–Ω—è, –¥–∞–≤–∞–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø–æ–º–æ–≥–∞–ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ.

üéÅ **–í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:**
–Ø –¥–∞—Ä—é —Ç–µ–±–µ **–±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞**!

‚ú® –ù–∏–∫–∞–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
–ü–æ–ª—å–∑—É–π—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ **–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ**.

üíù –¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ—Å—Ü–µ–Ω–Ω–∞!
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–µ—Ä–∏—à—å –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–º–æ–≥–∞–µ—à—å –µ–º—É —Ä–∞—Å—Ç–∏.

üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤ –ø–∏—Ç–∞–Ω–∏–∏!
–Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å.

–° –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é,
–ö–æ–º–∞–Ω–¥–∞ C.I.D. üíô`;

    let sent = 0;
    let failed = 0;
    const errors: string[] = [];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å rate limit
    for (const user of users) {
      try {
        const success = await sendTelegramMessage(
          botToken,
          user.telegram_id,
          thankYouMessage
        );

        if (success) {
          sent++;
          console.log(`‚úÖ Message sent to ${user.telegram_id} (${user.first_name})`);
        } else {
          failed++;
          errors.push(`Failed to send to ${user.telegram_id} (${user.first_name})`);
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ 100ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await new Promise((resolve) => setTimeout(resolve, 100));
      } catch (error) {
        failed++;
        const errorMsg = `Error sending to ${user.telegram_id}: ${error.message}`;
        errors.push(errorMsg);
        console.error(errorMsg);
      }
    }

    console.log(`‚úÖ Finished. Sent: ${sent}, Failed: ${failed}`);

    const result: SendMessageResponse = {
      success: true,
      sent,
      failed,
      errors,
    };

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error in send-thank-you-messages:", error);

    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});

