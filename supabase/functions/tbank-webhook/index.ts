// ============================================
// T-BANK WEBHOOK HANDLER
// ============================================
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç T-Bank –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
// ============================================

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { crypto } from "https://deno.land/std@0.168.0/crypto/mod.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Token –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
async function generateToken(params: Record<string, any>, password: string): Promise<string> {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
  const paramsWithPassword = { ...params, Password: password };
  
  // –£–¥–∞–ª—è–µ–º Token –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–æ–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ)
  delete paramsWithPassword.Token;
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É
  const sortedKeys = Object.keys(paramsWithPassword).sort();
  const values = sortedKeys.map(key => String(paramsWithPassword[key]));
  const concatenated = values.join("");
  
  // –•–µ—à–∏—Ä—É–µ–º SHA-256
  const encoder = new TextEncoder();
  const data = encoder.encode(concatenated);
  const hashBuffer = await crypto.subtle.digest("SHA-256", data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hashHex = hashArray.map(b => b.toString(16).padStart(2, "0")).join("");
  
  return hashHex;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook
async function verifyWebhookSignature(
  body: Record<string, any>,
  password: string
): Promise<boolean> {
  const receivedToken = body.Token;
  if (!receivedToken) {
    console.error("No Token in webhook body");
    return false;
  }

  const expectedToken = await generateToken(body, password);
  const isValid = receivedToken === expectedToken;
  
  if (!isValid) {
    console.error("Token mismatch!");
    console.error("Received:", receivedToken);
    console.error("Expected:", expectedToken);
  }
  
  return isValid;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(
  botToken: string,
  userId: number,
  message: string,
  inlineKeyboard?: any
) {
  try {
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    const body: any = {
      chat_id: userId,
      text: message,
      parse_mode: "Markdown",
    };

    if (inlineKeyboard) {
      body.reply_markup = { inline_keyboard: inlineKeyboard };
    }

    const response = await fetch(telegramUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error("Telegram API error:", error);
    }
  } catch (error) {
    console.error("Error sending Telegram notification:", error);
  }
}

serve(async (req) => {
  // Handle CORS preflight
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== "POST") {
      throw new Error("Method not allowed");
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ webhook
    const webhookBody = await req.json();
    console.log("Received webhook:", JSON.stringify(webhookBody, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    if (!webhookBody.OrderId || !webhookBody.Status) {
      throw new Error("Invalid webhook payload");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // –ü–æ–ª—É—á–∞–µ–º credentials
    const password = Deno.env.get("TBANK_PASSWORD");
    const botToken = Deno.env.get("TELEGRAM_BOT_TOKEN");

    if (!password) {
      throw new Error("T-Bank password not configured");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const isValid = await verifyWebhookSignature(webhookBody, password);
    if (!isValid) {
      console.error("Invalid webhook signature!");
      return new Response(
        JSON.stringify({ error: "Invalid signature" }),
        {
          status: 403,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    console.log("‚úÖ Webhook signature verified");

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const {
      OrderId,
      PaymentId,
      Status,
      ErrorCode,
      Message: errorMessage,
    } = webhookBody;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
    const { data: updateResult, error: updateError } = await supabase.rpc(
      "update_payment_status",
      {
        p_order_id: OrderId,
        p_tbank_payment_id: PaymentId,
        p_status: Status,
        p_error_code: ErrorCode || null,
        p_error_message: errorMessage || null,
        p_webhook_data: webhookBody,
      }
    );

    if (updateError) {
      console.error("Error updating payment status:", updateError);
      throw updateError;
    }

    console.log(`‚úÖ Payment status updated: ${Status}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    const { data: payment, error: paymentError } = await supabase
      .from("payment_intents")
      .select(`
        *,
        subscription_plans (
          name,
          duration_days
        )
      `)
      .eq("order_id", OrderId)
      .single();

    if (paymentError || !payment) {
      console.error("Payment not found:", OrderId);
      throw new Error("Payment not found");
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (botToken) {
      let notificationMessage = "";
      let keyboard = null;

      switch (Status) {
        case "CONFIRMED":
          // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!
          notificationMessage =
            `üéâ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n` +
            `üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: ${payment.subscription_plans.name}\n` +
            `üí∞ –°—É–º–º–∞: ${payment.amount_rub}‚ÇΩ\n` +
            `‚è∞ –°—Ä–æ–∫: ${payment.subscription_plans.duration_days} –¥–Ω–µ–π\n\n` +
            `‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n` +
            `–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ`;
          
          keyboard = [[{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]];
          break;

        case "REJECTED":
        case "CANCELLED":
          // –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω
          notificationMessage =
            `‚ùå **–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞**\n\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${errorMessage || "–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω"}\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.`;
          
          keyboard = [[{ text: "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: "buy_subscription" }]];
          break;

        case "AUTHORIZED":
          // –ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          notificationMessage =
            `‚è≥ **–ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω**\n\n` +
            `–°–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.\n` +
            `–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`;
          break;

        case "REFUNDED":
          // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
          notificationMessage =
            `üí∞ **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤**\n\n` +
            `–°—É–º–º–∞ ${payment.amount_rub}‚ÇΩ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ —Ç–≤–æ—é –∫–∞—Ä—Ç—É\n` +
            `–≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.`;
          break;

        default:
          console.log(`Webhook status ${Status} - no notification sent`);
      }

      if (notificationMessage) {
        await sendTelegramNotification(
          botToken,
          payment.user_id,
          notificationMessage,
          keyboard
        );
        console.log(`‚úÖ Notification sent to user ${payment.user_id}`);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö (T-Bank —Ç—Ä–µ–±—É–µ—Ç 200 OK)
    return new Response(
      JSON.stringify({ success: true }),
      {
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json",
        },
      }
    );
  } catch (error) {
    console.error("Error in tbank-webhook:", error);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ (—á—Ç–æ–±—ã T-Bank –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª webhook)
    // –ù–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
      }),
      {
        status: 200, // –í–∞–∂–Ω–æ! T-Bank –æ–∂–∏–¥–∞–µ—Ç 200
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json",
        },
      }
    );
  }
});

