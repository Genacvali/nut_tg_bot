/**
 * Supabase Edge Function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram Webhook
 * C.I.D. Bot - Care ‚Ä¢ Insight ‚Ä¢ Discipline
 */

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'

// –¢–∏–ø—ã –¥–ª—è Telegram API
interface TelegramUpdate {
  update_id: number
  message?: TelegramMessage
  callback_query?: TelegramCallbackQuery
}

interface TelegramMessage {
  message_id: number
  from: TelegramUser
  chat: TelegramChat
  text?: string
  voice?: TelegramVoice
}

interface TelegramCallbackQuery {
  id: string
  from: TelegramUser
  message?: TelegramMessage
  data?: string
}

interface TelegramUser {
  id: number
  username?: string
  first_name: string
}

interface TelegramChat {
  id: number
  type: string
}

interface TelegramVoice {
  file_id: string
  file_unique_id: string
  duration: number
}

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)

// Telegram API –±–∞–∑–æ–≤—ã–π URL
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const userStates = new Map<number, { state: string, data: any }>()

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
async function sendMessage(chatId: number, text: string, replyMarkup?: any): Promise<any> {
  const payload: any = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  }
  
  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }
  
  const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
  
  return await response.json()
}

/**
 * –û—Ç–≤–µ—Ç –Ω–∞ callback query
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string): Promise<void> {
  await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      callback_query_id: callbackQueryId,
      text: text || ''
    })
  })
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function editMessageText(
  chatId: number,
  messageId: number,
  text: string,
  replyMarkup?: any
): Promise<any> {
  const payload: any = {
    chat_id: chatId,
    message_id: messageId,
    text: text,
    parse_mode: 'Markdown'
  }
  
  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }
  
  const response = await fetch(`${TELEGRAM_API}/editMessageText`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
  
  return await response.json()
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getOrCreateUser(telegramId: number, username?: string, firstName?: string) {
  const { data: existing } = await supabase
    .from('users')
    .select('*')
    .eq('telegram_id', telegramId)
    .single()
  
  if (existing) return existing
  
  const { data: newUser } = await supabase
    .from('users')
    .insert({
      telegram_id: telegramId,
      username: username,
      first_name: firstName
    })
    .select()
    .single()
  
  return newUser
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ö–ë–ñ–£ —á–µ—Ä–µ–∑ OpenAI
 */
async function generateNutritionPlan(profileData: any): Promise<any> {
  const activityNames = {
    low: '–º–∞–ª–µ–Ω—å–∫–∞—è (–Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –≤–æ–æ–±—â–µ)',
    medium: '—Å—Ä–µ–¥–Ω—è—è (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)',
    high: '–≤—ã—Å–æ–∫–∞—è (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 3 –∏ –±–æ–ª–µ–µ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)'
  }
  
  const goalNames = {
    lose: '—Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å',
    maintain: '–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å',
    gain: '–Ω–∞–±–æ—Ä –≤–µ—Å–∞'
  }

  const prompt = `–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ C.I.D. (Care ‚Ä¢ Insight ‚Ä¢ Discipline). –†–∞—Å—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.

–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
- –ò–º—è: ${profileData.name}
- –í–æ–∑—Ä–∞—Å—Ç: ${profileData.age} –ª–µ—Ç
- –ü–æ–ª: ${profileData.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}
- –†–æ—Å—Ç: ${profileData.height} —Å–º
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${profileData.current_weight} –∫–≥
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityNames[profileData.activity_level as keyof typeof activityNames]}
- –¶–µ–ª—å: ${goalNames[profileData.goal as keyof typeof goalNames]}
${profileData.wishes ? `- –ü–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: "${profileData.wishes}"` : ''}

–í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–µ:
1. –†–∞—Å—Å—á–∏—Ç–∞–π –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR) –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
2. –†–∞—Å—Å—á–∏—Ç–∞–π –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π (TDEE) —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
3. –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
4. –†–∞—Å—Å—á–∏—Ç–∞–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ë–ñ–£
5. –†–∞—Å—Å—á–∏—Ç–∞–π –Ω–æ—Ä–º—É –≤–æ–¥—ã –≤ –¥–µ–Ω—å (–æ–±—ã—á–Ω–æ 30-40 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞)
6. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
7. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á—Ç–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "bmr": —á–∏—Å–ª–æ,
    "tdee": —á–∏—Å–ª–æ,
    "target_calories": —á–∏—Å–ª–æ,
    "protein_grams": —á–∏—Å–ª–æ,
    "fats_grams": —á–∏—Å–ª–æ,
    "carbs_grams": —á–∏—Å–ª–æ,
    "water_liters": —á–∏—Å–ª–æ,
    "methodology_explanation": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –º–µ—Ç–æ–¥–∏–∫–∏",
    "activity_recommendations": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–∂–µ–ª–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞"
}`

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: '–¢—ã C.I.D. - –æ–ø—ã—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —Ç—Ä–µ–Ω–µ—Ä. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      response_format: { type: 'json_object' }
    })
  })

  const data = await response.json()
  return JSON.parse(data.choices[0].message.content)
}

/**
 * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function adjustNutritionPlan(currentPlan: any, userRequest: string, profileData: any): Promise<any> {
  const prompt = `–¢—ã - C.I.D., –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è.

–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:
- –ö–∞–ª–æ—Ä–∏–∏: ${currentPlan.calories} –∫–∫–∞–ª
- –ë–µ–ª–∫–∏: ${currentPlan.protein} –≥
- –ñ–∏—Ä—ã: ${currentPlan.fats} –≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${currentPlan.carbs} –≥
- –í–æ–¥–∞: ${currentPlan.water} –ª

–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
- –ò–º—è: ${profileData.name}
- –í–æ–∑—Ä–∞—Å—Ç: ${profileData.age} –ª–µ—Ç
- –ü–æ–ª: ${profileData.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${profileData.current_weight} –∫–≥

–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: "${userRequest}"

–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º –ø–æ–∂–µ–ª–∞–Ω–∏–π. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "target_calories": —á–∏—Å–ª–æ,
    "protein_grams": —á–∏—Å–ª–æ,
    "fats_grams": —á–∏—Å–ª–æ,
    "carbs_grams": —á–∏—Å–ª–æ,
    "water_liters": —á–∏—Å–ª–æ,
    "adjustment_explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫"
}`

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: '–¢—ã C.I.D. - –æ–ø—ã—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –ü–æ–º–æ–≥–∞–µ—à—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      response_format: { type: 'json_object' }
    })
  })

  const data = await response.json()
  return JSON.parse(data.choices[0].message.content)
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ö–ë–ñ–£
 */
function formatNutritionCard(plan: any, profileData: any): string {
  return `üìä **–ö–ê–†–¢–û–ß–ö–ê –ö–ë–ñ–£ –î–õ–Ø ${profileData.name?.toUpperCase()}**

üî• –ö–∞–ª–æ—Ä–∏–∏: **${plan.calories}** –∫–∫–∞–ª/–¥–µ–Ω—å
ü•© –ë–µ–ª–∫–∏: **${plan.protein}** –≥
ü•ë –ñ–∏—Ä—ã: **${plan.fats}** –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: **${plan.carbs}** –≥
üíß –í–æ–¥–∞: **${plan.water}** –ª/–¥–µ–Ω—å

üìà **–ú–µ—Ç–∞–±–æ–ª–∏–∑–º:**
‚Ä¢ –ë–∞–∑–æ–≤—ã–π (BMR): ${plan.bmr.toFixed(0)} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ (TDEE): ${plan.tdee.toFixed(0)} –∫–∫–∞–ª/–¥–µ–Ω—å

${plan.methodology_explanation}

üí™ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**
${plan.activity_recommendations || '–°–ª–µ–¥—É–π—Ç–µ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'}
`
}

/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 */
function welcomeKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "‚ú® –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "fill_profile" }]
    ]
  }
}

/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ö–ë–ñ–£
 */
function nutritionCardKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: "card_done" },
        { text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: "edit_profile" }
      ],
      [
        { text: "üîÑ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: "adjust_card" }
      ]
    ]
  }
}

/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
 */
function genderKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üë® –ú—É–∂—Å–∫–æ–π", callback_data: "gender_male" },
        { text: "üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data: "gender_female" }
      ]
    ]
  }
}

/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function activityKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "ü™ë –ú–∞–ª–µ–Ω—å–∫–∞—è (–ù–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –≤–æ–æ–±—â–µ)", callback_data: "activity_low" }],
      [{ text: "üö∂ –°—Ä–µ–¥–Ω—è—è (1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)", callback_data: "activity_medium" }],
      [{ text: "üí™ –í—ã—Å–æ–∫–∞—è (3+ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)", callback_data: "activity_high" }]
    ]
  }
}

/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
 */
function goalKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üìâ –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å", callback_data: "goal_lose" }],
      [{ text: "‚öñÔ∏è –î–µ—Ä–∂–∞—Ç—å –≤–µ—Å", callback_data: "goal_maintain" }],
      [{ text: "üìà –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å", callback_data: "goal_gain" }]
    ]
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
 */
async function handleStartCommand(message: TelegramMessage) {
  const user = await getOrCreateUser(
    message.from.id,
    message.from.username,
    message.from.first_name
  )
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
  const { data: profile } = await supabase
    .from('user_profiles')
    .select('*')
    .eq('user_id', user.id)
    .single()
  
  let welcomeMessage = `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø C.I.D. ‚Äî Care ‚Ä¢ Insight ‚Ä¢ Discipline.
–¢–≤–æ–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º.
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω, –≤–µ—Å—Ç–∏ —É—á—ë—Ç –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å —Ñ–æ–∫—É—Å.`
  
  if (!profile) {
    await sendMessage(message.chat.id, welcomeMessage, welcomeKeyboard())
  } else {
    welcomeMessage += `\n\n‚úÖ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω!`
    await sendMessage(message.chat.id, welcomeMessage, {
      inline_keyboard: [
        [{ text: "üìä –ú–æ–π –ø–ª–∞–Ω –ö–ë–ñ–£", callback_data: "show_card" }],
        [{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "edit_profile" }]
      ]
    })
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
 */
async function handleCallbackQuery(callbackQuery: TelegramCallbackQuery) {
  await answerCallbackQuery(callbackQuery.id)
  
  const chatId = callbackQuery.message!.chat.id
  const messageId = callbackQuery.message!.message_id
  const data = callbackQuery.data!
  const userId = callbackQuery.from.id
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
  const user = await getOrCreateUser(
    callbackQuery.from.id,
    callbackQuery.from.username,
    callbackQuery.from.first_name
  )
  
  // –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  if (data === 'fill_profile') {
    userStates.set(userId, { state: 'waiting_name', data: {} })
    await editMessageText(
      chatId,
      messageId,
      "‚ú® –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.\n\nüìù –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
  }
  
  // –í—ã–±–æ—Ä –ø–æ–ª–∞
  else if (data.startsWith('gender_')) {
    const gender = data.split('_')[1]
    const state = userStates.get(userId)
    if (state) {
      state.data.gender = gender
      state.state = 'waiting_age'
      userStates.set(userId, state)
      await editMessageText(chatId, messageId, "üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    }
  }
  
  // –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  else if (data.startsWith('activity_')) {
    const activity = data.split('_')[1]
    const state = userStates.get(userId)
    if (state) {
      state.data.activity_level = activity
      state.state = 'waiting_goal'
      userStates.set(userId, state)
      await editMessageText(chatId, messageId, "üéØ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", goalKeyboard())
    }
  }
  
  // –í—ã–±–æ—Ä —Ü–µ–ª–∏
  else if (data.startsWith('goal_')) {
    const goal = data.split('_')[1]
    const state = userStates.get(userId)
    if (state) {
      state.data.goal = goal
      state.state = 'waiting_wishes'
      userStates.set(userId, state)
      await editMessageText(
        chatId,
        messageId,
        `üí≠ **–ü–æ–∂–µ–ª–∞–Ω–∏—è:**\n\n–û–ø–∏—à–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: "—Ö–æ—á—É —Å—Ç–∞—Ç—å —Ä–µ–ª—å–µ—Ñ–Ω—ã–º" –∏–ª–∏ "—Ö–æ—á—É —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ"\n\n–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`
      )
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
  else if (data === 'show_card') {
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', user.id)
      .single()
    
    const { data: plan } = await supabase
      .from('nutrition_plans')
      .select('*')
      .eq('user_id', user.id)
      .eq('is_active', true)
      .single()
    
    if (plan && profile) {
      const cardText = formatNutritionCard(plan, profile)
      await editMessageText(chatId, messageId, cardText, nutritionCardKeyboard())
    } else {
      await editMessageText(chatId, messageId, "‚ö†Ô∏è –ü–ª–∞–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å!")
    }
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
  else if (data === 'adjust_card') {
    userStates.set(userId, { state: 'waiting_adjustment', data: {} })
    await editMessageText(
      chatId,
      messageId,
      `üîÑ **–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞**\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –Ω–∞–≥–æ–≤–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∏ —è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é –∫–∞—Ä—Ç–æ—á–∫—É.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ "–£–≤–µ–ª–∏—á—å –±–µ–ª–æ–∫ –Ω–∞ 20 –≥—Ä–∞–º–º"\n‚Ä¢ "–•–æ—á—É –±–æ–ª—å—à–µ –≤–æ–¥—ã"\n‚Ä¢ "–°–Ω–∏–∑—å —É–≥–ª–µ–≤–æ–¥—ã –¥–æ 150 –≥—Ä–∞–º–º"`
    )
  }
  
  // –ì–æ—Ç–æ–≤–æ
  else if (data === 'card_done') {
    await editMessageText(
      chatId,
      messageId,
      "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n\n‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —á—Ç–æ —Ç—ã –µ–ª\n‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n–ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function handleTextMessage(message: TelegramMessage) {
  const userId = message.from.id
  const state = userStates.get(userId)
  
  if (!state) {
    await sendMessage(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    return
  }
  
  const user = await getOrCreateUser(
    message.from.id,
    message.from.username,
    message.from.first_name
  )
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏
  if (state.state === 'waiting_name') {
    state.data.name = message.text
    state.state = 'waiting_gender'
    userStates.set(userId, state)
    await sendMessage(
      message.chat.id,
      `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${message.text}! üëã\n\nüë§ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:`,
      genderKeyboard()
    )
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
  else if (state.state === 'waiting_age') {
    const age = parseInt(message.text)
    if (isNaN(age) || age < 10 || age > 120) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120 –ª–µ—Ç)")
      return
    }
    state.data.age = age
    state.state = 'waiting_weight'
    userStates.set(userId, state)
    await sendMessage(message.chat.id, "‚öñÔ∏è –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):")
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ—Å–∞
  else if (state.state === 'waiting_weight') {
    const weight = parseFloat(message.text.replace(',', '.'))
    if (isNaN(weight) || weight < 30 || weight > 300) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
      return
    }
    state.data.current_weight = weight
    state.state = 'waiting_height'
    userStates.set(userId, state)
    await sendMessage(message.chat.id, "üìè –£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):")
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞
  else if (state.state === 'waiting_height') {
    const height = parseFloat(message.text.replace(',', '.'))
    if (isNaN(height) || height < 100 || height > 250) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)")
      return
    }
    state.data.height = height
    state.state = 'waiting_activity'
    userStates.set(userId, state)
    await sendMessage(
      message.chat.id,
      "üí™ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
      activityKeyboard()
    )
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π
  else if (state.state === 'waiting_wishes') {
    state.data.wishes = message.text
    userStates.set(userId, state)
    
    await sendMessage(message.chat.id, "‚è≥ –°–æ–∑–¥–∞—é —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ö–ë–ñ–£...")
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ OpenAI
    try {
      const plan = await generateNutritionPlan(state.data)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const { data: profile } = await supabase
        .from('user_profiles')
        .upsert({
          user_id: user.id,
          ...state.data
        })
        .select()
        .single()
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
      await supabase
        .from('nutrition_plans')
        .update({ is_active: false })
        .eq('user_id', user.id)
      
      await supabase
        .from('nutrition_plans')
        .insert({
          user_id: user.id,
          calories: plan.target_calories,
          protein: plan.protein_grams,
          fats: plan.fats_grams,
          carbs: plan.carbs_grams,
          water: plan.water_liters,
          bmr: plan.bmr,
          tdee: plan.tdee,
          methodology_explanation: plan.methodology_explanation,
          activity_recommendations: plan.activity_recommendations,
          is_active: true
        })
      
      const cardText = formatNutritionCard(plan, state.data)
      await sendMessage(message.chat.id, cardText, nutritionCardKeyboard())
      
      userStates.delete(userId)
    } catch (error) {
      console.error('Error generating plan:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /start")
    }
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  else if (state.state === 'waiting_adjustment') {
    await sendMessage(message.chat.id, "‚è≥ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø–ª–∞–Ω...")
    
    try {
      const { data: profile } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', user.id)
        .single()
      
      const { data: currentPlan } = await supabase
        .from('nutrition_plans')
        .select('*')
        .eq('user_id', user.id)
        .eq('is_active', true)
        .single()
      
      const adjusted = await adjustNutritionPlan(currentPlan, message.text, profile)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
      await supabase
        .from('nutrition_plans')
        .update({
          calories: adjusted.target_calories,
          protein: adjusted.protein_grams,
          fats: adjusted.fats_grams,
          carbs: adjusted.carbs_grams,
          water: adjusted.water_liters,
          methodology_explanation: currentPlan.methodology_explanation + '\n\nüîÑ **–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞:**\n' + adjusted.adjustment_explanation
        })
        .eq('id', currentPlan.id)
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
      const { data: updatedPlan } = await supabase
        .from('nutrition_plans')
        .select('*')
        .eq('id', currentPlan.id)
        .single()
      
      const cardText = formatNutritionCard(updatedPlan, profile)
      await sendMessage(message.chat.id, cardText, nutritionCardKeyboard())
      
      userStates.delete(userId)
    } catch (error) {
      console.error('Error adjusting plan:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    }
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
async function handleUpdate(update: TelegramUpdate) {
  try {
    if (update.message) {
      const message = update.message
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (message.text?.startsWith('/')) {
        const command = message.text.split(' ')[0].substring(1)
        
        if (command === 'start') {
          await handleStartCommand(message)
        }
      } else if (message.text) {
        await handleTextMessage(message)
      }
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query)
    }
  } catch (error) {
    console.error('Error handling update:', error)
  }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
serve(async (req) => {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  }
  
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }
  
  try {
    const update: TelegramUpdate = await req.json()
    console.log('Received update:', update.update_id)
    
    handleUpdate(update).catch(err => console.error('Error in handleUpdate:', err))
    
    return new Response(
      JSON.stringify({ ok: true }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )
  } catch (error) {
    console.error('Error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    )
  }
})
