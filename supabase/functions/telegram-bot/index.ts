import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'
interface TelegramUpdate {
  update_id: number
  message?: TelegramMessage
  callback_query?: TelegramCallbackQuery
}
interface TelegramMessage {
  message_id: number
  from: TelegramUser
  chat: TelegramChat
  text?: string
  voice?: TelegramVoice
  photo?: TelegramPhotoSize[]
  caption?: string
}
interface TelegramVoice {
  file_id: string
  file_unique_id: string
  duration: number
  mime_type?: string
  file_size?: number
}
interface TelegramPhotoSize {
  file_id: string
  file_unique_id: string
  width: number
  height: number
  file_size?: number
}
interface TelegramCallbackQuery {
  id: string
  from: TelegramUser
  message?: TelegramMessage
  data?: string
}
interface TelegramUser {
  id: number
  username?: string
  first_name: string
}
interface TelegramChat {
  id: number
  type: string
}
// ============================================
// DEV BOT CONFIGURATION (@cid_tg_admin_bot)
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI/UX
// ============================================
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

// ============================================
// CONVERSATION MEMORY: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π
// ============================================

interface ConversationMessage {
  id: number
  role: 'user' | 'assistant'
  content: string
  intent?: string
  confidence?: number
  created_at: string
}

interface IntentResult {
  intent: 'food' | 'water' | 'question' | 'navigation'
  confidence: number
  reasoning: string
  needsConfirmation: boolean
}

interface ConversationTopic {
  topic: string | null
  confidence: number
  messages_count: number
  is_active: boolean
  last_message_at?: string
}

class ConversationManager {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getRecentMessages(userId: number, limit: number = 10): Promise<ConversationMessage[]> {
    try {
      const { data, error } = await supabase
        .rpc('get_recent_messages', {
          p_user_id: userId,
          p_limit: limit
        })

      if (error) {
        console.error('Error getting recent messages:', error)
        return []
      }

      return (data || []).reverse() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    } catch (error) {
      console.error('Exception in getRecentMessages:', error)
      return []
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  static async addMessage(
    userId: number,
    role: 'user' | 'assistant',
    content: string,
    intent?: string,
    confidence?: number,
    metadata: any = {}
  ): Promise<number | null> {
    try {
      const { data, error } = await supabase
        .rpc('add_conversation_message', {
          p_user_id: userId,
          p_role: role,
          p_content: content,
          p_intent: intent,
          p_confidence: confidence,
          p_metadata: metadata
        })

      if (error) {
        console.error('Error adding message:', error)
        return null
      }

      return data
    } catch (error) {
      console.error('Exception in addMessage:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  static async getCurrentTopic(userId: number): Promise<ConversationTopic | null> {
    try {
      const { data, error } = await supabase
        .rpc('get_conversation_topic', { p_user_id: userId })

      if (error) {
        console.error('Error getting conversation topic:', error)
        return null
      }

      return data as ConversationTopic
    } catch (error) {
      console.error('Exception in getCurrentTopic:', error)
      return null
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
   */
  static async clearContext(userId: number): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .rpc('clear_conversation_history', {
          p_user_id: userId,
          p_hard_delete: false
        })

      if (error) {
        console.error('Error clearing history:', error)
        return false
      }

      return true
    } catch (error) {
      console.error('Exception in clearContext:', error)
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (timeout 30 –º–∏–Ω)
   */
  static async checkAndClearIfStale(userId: number): Promise<void> {
    const messages = await this.getRecentMessages(userId, 1)

    if (messages.length === 0) return

    const lastMessage = messages[0]
    const lastMessageTime = new Date(lastMessage.created_at).getTime()
    const now = Date.now()
    const TIMEOUT = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç

    if (now - lastMessageTime > TIMEOUT) {
      console.log(`Clearing stale context for user ${userId}`)
      await this.clearContext(userId)
    }
  }
}

/**
 * AI-based Intent Detection —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 */
async function detectIntentWithContext(
  text: string,
  userId: number,
  history: ConversationMessage[]
): Promise<IntentResult> {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const contextMessages = history.slice(-5).map(msg =>
      `${msg.role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: ${msg.content}`
    ).join('\n')

    const prompt = `–¢—ã - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –¥–ª—è AI-–¥–∏–µ—Ç–æ–ª–æ–≥–∞ C.I.D.

–ö–û–ù–¢–ï–ö–°–¢ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
${contextMessages || '–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'}

–ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"${text}"

–ó–ê–î–ê–ß–ê: –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

1. "food" - –õ–û–ì–ò–†–£–ï–¢ –ø—Ä–∏–µ–º –ø–∏—â–∏:
   ‚úÖ "—Å—ä–µ–ª –æ–≤—Å—è–Ω–∫—É 60–≥, –±–∞–Ω–∞–Ω"
   ‚úÖ "–∑–∞–≤—Ç—Ä–∞–∫: —è–π—Ü–∞ 2—à—Ç, —Ö–ª–µ–±"
   ‚úÖ "200–≥ –∫—É—Ä–∏—Ü—ã, —Ä–∏—Å 100–≥"
   ‚úÖ "—Ç–∞—Ä–µ–ª–∫–∞ —Å—É–ø–∞"
   ‚úÖ "–ø–æ–µ–ª", "—Å–∫—É—à–∞–ª", "–ø–µ—Ä–µ–∫—É—Å–∏–ª"
   ‚ùå "–º–æ–∂–Ω–æ –ª–∏ –±–∞–Ω–∞–Ω?" (—ç—Ç–æ –≤–æ–ø—Ä–æ—Å!)
   ‚ùå "—á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫—É—Ä–∏—Ü—ã?" (–≤–æ–ø—Ä–æ—Å!)
   ‚ùå "—Å–∞–ª–∞—Ç" (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ!)

2. "water" - –õ–û–ì–ò–†–£–ï–¢ –≤–æ–¥—É:
   ‚úÖ "–≤—ã–ø–∏–ª –ª–∏—Ç—Ä –≤–æ–¥—ã"
   ‚úÖ "500 –º–ª", "1–ª"
   ‚úÖ "—Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã", "–±—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã"
   ‚úÖ "–ø–æ–ø–∏–ª –≤–æ–¥—ã"

3. "question" - –ó–ê–î–ê–ï–¢ –í–û–ü–†–û–° –æ –ø–∏—Ç–∞–Ω–∏–∏:
   ‚úÖ "—á—Ç–æ –º–Ω–µ –ø–æ–µ—Å—Ç—å –Ω–∞ —É–∂–∏–Ω?"
   ‚úÖ "–º–æ–∂–Ω–æ –ª–∏ –±–∞–Ω–∞–Ω –ø—Ä–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–∏?"
   ‚úÖ "–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —Å –∫—É—Ä–∏—Ü–µ–π"
   ‚úÖ "—Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ –±–∞–Ω–∞–Ω–µ?"
   ‚úÖ "–∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –±–µ–ª–æ–∫?"
   ‚úÖ "–∞ –∫–∞–∫–æ–π —Å–æ—É—Å –ª—É—á—à–µ?" (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞!)
   ‚úÖ –ï–°–õ–ò –≠–¢–û –û–¢–í–ï–¢ –ù–ê –í–û–ü–†–û–° –ê–°–°–ò–°–¢–ï–ù–¢–ê - –≤—Å–µ–≥–¥–∞ question!

4. "navigation" - —Ö–æ—á–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ:
   ‚úÖ "–ø–æ–∫–∞–∂–∏ –º–æ–π –¥–Ω–µ–≤–Ω–∏–∫"
   ‚úÖ "–º–æ–π –≤–µ—Å", "–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
   ‚úÖ "—Å–∫–æ–ª—å–∫–æ —è —Å—ä–µ–ª —Å–µ–≥–æ–¥–Ω—è –∫–∞–ª–æ—Ä–∏–π?"

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê:
üî• –ï—Å–ª–∏ –≤ –ö–û–ù–¢–ï–ö–°–¢–ï –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –î–ò–ê–õ–û–ì (–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç), —Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = "question"
üî• –ï—Å–ª–∏ –µ—Å—Ç—å –í–û–ü–†–û–°–ò–¢–ï–õ–¨–ù–´–ï —Å–ª–æ–≤–∞ (—á—Ç–æ, –∫–∞–∫, –∫–æ–≥–¥–∞, –º–æ–∂–Ω–æ –ª–∏, —Å—Ç–æ–∏—Ç –ª–∏, –∫–∞–∫–æ–π) = "question"
üî• –ï—Å–ª–∏ –µ—Å—Ç—å –ò–ú–ü–ï–†–ê–¢–ò–í–´ (–¥–∞–π, –ø–æ–∫–∞–∂–∏, –Ω–∞–π–¥–∏, —Å–æ—Å—Ç–∞–≤—å, —Ä–∞—Å—Å–∫–∞–∂–∏, –ø—Ä–µ–¥–ª–æ–∂–∏) = "question"
üî• –ï—Å–ª–∏ –µ—Å—Ç—å –ì–†–ê–ú–ú–û–í–ö–ê (60–≥, 200–≥, 2—à—Ç) + –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ = "food"
üî• –ï—Å–ª–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ë–ï–ó –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ "—Å–∞–ª–∞—Ç") = needsConfirmation = true
üî• –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≥–æ–ª—ã –ø–∏—Ç–∞–Ω–∏—è (—Å—ä–µ–ª, –ø–æ–µ–ª, –≤—ã–ø–∏–ª, —Å–∫—É—à–∞–ª) = "food"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON (–±–µ–∑ markdown):
{
  "intent": "food" | "water" | "question" | "navigation",
  "confidence": 0.0-1.0,
  "reasoning": "–∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
  "needsConfirmation": true | false
}`

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'user', content: prompt }
        ],
        temperature: 0.3,
        max_tokens: 150
      })
    })

    const data = await response.json()

    if (!data.choices || !data.choices[0]) {
      throw new Error('Invalid OpenAI response')
    }

    const content = data.choices[0].message.content.trim()
    // –£–±–∏—Ä–∞–µ–º markdown –µ—Å–ª–∏ –µ—Å—Ç—å
    const jsonContent = content.replace(/```json\n?|\n?```/g, '').trim()
    const result: IntentResult = JSON.parse(jsonContent)

    console.log('AI Intent Detection:', {
      text,
      result,
      hasContext: history.length > 0
    })

    return result

  } catch (error) {
    console.error('Error in AI intent detection:', error)

    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
    const fallbackIntent = await detectIntent(text)
    return {
      intent: fallbackIntent as any,
      confidence: 0.6,
      reasoning: 'Fallback to regex detection',
      needsConfirmation: false
    }
  }
}

// ============================================
// LEGACY: –°—Ç–∞—Ä–∞—è regex-based –¥–µ—Ç–µ–∫—Ü–∏—è (fallback)
// ============================================
async function detectIntent(text: string): Promise<'food' | 'water' | 'question'> {
  const lowerText = text.toLowerCase().trim()

  // üíß –ü–†–ò–û–†–ò–¢–ï–¢ 0: –î–µ—Ç–µ–∫—Ü–∏—è –≤–æ–¥—ã (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π case)
  const waterPatterns = [
    /\d+\s*(–ª|–ª–∏—Ç—Ä|–º–ª|–º–∏–ª–ª–∏–ª–∏—Ç—Ä)/i,  // –¶–∏—Ñ—Ä—ã —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏
    /(–≤—ã–ø–∏–ª|–≤—ã–ø–∏–ª–∞|–ø–æ–ø–∏–ª|–ø–æ–ø–∏–ª–∞|–ø—å—é|–ø—å—ë—Ç)\s+(–≤–æ–¥|–∂–∏–¥–∫–æ—Å—Ç)/i,  // –ì–ª–∞–≥–æ–ª—ã –ø–∏—Ç—å—è + –≤–æ–¥–∞
    /^\s*(–≤–æ–¥|–∂–∏–¥–∫–æ—Å—Ç)/i,  // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–≤–æ–¥–∞"
    /(—Å—Ç–∞–∫–∞–Ω|–±—É—Ç—ã–ª–∫|–∫—Ä—É–∂–∫|—á–∞—à–∫)\s+(–≤–æ–¥|–∂–∏–¥–∫–æ—Å—Ç)/i,  // –ï–º–∫–æ—Å—Ç–∏ —Å –≤–æ–¥–æ–π
    /^\d+\s*(–ª|–ª–∏—Ç—Ä|–º–ª)\s*(–≤–æ–¥|–∂–∏–¥–∫–æ—Å—Ç)?/i  // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏—Ç—Ä–æ–≤/–º–ª
  ]

  for (const pattern of waterPatterns) {
    if (pattern.test(lowerText)) {
      // –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ –¥—Ä—É–≥—É—é –∂–∏–¥–∫–æ—Å—Ç—å —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ (–º–æ–ª–æ–∫–æ, —Å–æ–∫)
      const hasCaloriesDrinks = /(–º–æ–ª–æ–∫|—Å–æ–∫|—Å–º—É–∑–∏|–∫–µ—Ñ–∏—Ä|–π–æ–≥—É—Ä—Ç|–ø—Ä–æ—Ç–µ–∏–Ω|–∫–æ–∫—Ç–µ–π–ª)/i.test(lowerText)
      if (!hasCaloriesDrinks) {
        console.log('Water intake detected:', text)
        return 'water'
      }
    }
  }

  // üî• –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ê–Ω–∞—Ñ–æ—Ä—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)
  const anaphoraPatterns = [
    /(–ø—Ä–æ –∫–∞–∫–æ–π|–ø—Ä–æ –∫–∞–∫—É—é|–ø—Ä–æ –∫–∞–∫–æ–µ|–ø—Ä–æ —ç—Ç–æ—Ç|–ø—Ä–æ —ç—Ç—É|–ø—Ä–æ —Ç–æ)/i,
    /(—á—Ç–æ –∑–∞|–∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ|–∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ|—á—Ç–æ —ç—Ç–æ –∑–∞)/i,
    /(—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ|–¥–µ—Ç–∞–ª–∏|–ø–æ–¥—Ä–æ–±–Ω–µ–µ|—É—Ç–æ—á–Ω–∏|–æ–±—ä—è—Å–Ω–∏)/i,
    /^(—ç—Ç–æ—Ç|—ç—Ç—É|—ç—Ç–æ|—Ç–æ—Ç|—Ç–∞|—Ç–µ|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–∫–∞–∫–æ–µ)\s/i,
    /(–∞\s+—Å–æ—É—Å|–∞\s+—Ä–µ—Ü–µ–ø—Ç|–∞\s+–±–ª—é–¥|–∞\s+–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç)/i
  ]
  
  for (const pattern of anaphoraPatterns) {
    if (pattern.test(lowerText)) {
      console.log('Anaphora/contextual question detected:', text)
      return 'question'
    }
  }
  
  // üî• –ü–†–ò–û–†–ò–¢–ï–¢ 2: –Ø–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –º–∞—Ä–∫–µ—Ä—ã)
  const explicitQuestionPatterns = [
    /^(—á—Ç–æ|–∫–∞–∫|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–º–æ–∂–Ω–æ –ª–∏|—Å—Ç–æ–∏—Ç –ª–∏)/i,
    /\?$/,
    /(–ø–æ—Å–æ–≤–µ—Ç|–ø–æ–¥—Å–∫–∞–∂|–ø–æ–º–æ–≥|—Ä–∞—Å—Å–∫–∞–∂|–æ–±—ä—è—Å–Ω|–ø–æ–∫–∞–∂|–æ–ø–∏—à|–¥–µ—Ç–∞–ª|—Ä–∞—Å–ø–∏—à)/i,
    /(–º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å|—á—Ç–æ –ø–æ–µ—Å—Ç—å|—á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—Å–æ–≤–µ—Ç—É–π|–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π|–¥–∞–π —Ä–µ—Ü–µ–ø—Ç|–Ω–∞–π–¥–∏ —Ä–µ—Ü–µ–ø—Ç|–ø–æ–∫–∞–∂–∏ –º–µ–Ω—é|–¥–∞–π —Ä–∞—Ü–∏–æ–Ω|—Å–æ—Å—Ç–∞–≤—å —Ä–∞—Ü–∏–æ–Ω)/i,
    /(—Ä–∞—Å—Å–∫–∞–∂–∏|–¥–∞–π|–ø–æ–∫–∞–∂–∏|–Ω–∞–π–¥–∏|–ø—Ä–µ–¥–ª–æ–∂–∏|—Å–æ—Å—Ç–∞–≤—å|—Å–¥–µ–ª–∞–π|—Ä–∞—Å–ø–∏—à–∏)/i
  ]

  let hasExplicitQuestion = false
  for (const pattern of explicitQuestionPatterns) {
    if (pattern.test(lowerText)) {
      hasExplicitQuestion = true
      break
    }
  }

  if (hasExplicitQuestion) {
    console.log('Explicit question detected:', text)
    return 'question'
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –°–∏–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –µ–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï–¢ –≤–æ–ø—Ä–æ—Å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤)
  const strongFoodPatterns = [
    /\d+\s*(–≥|–≥—Ä–∞–º|–º–ª|–∫–≥|—à—Ç)/i,
    /(—Å—ä–µ–ª|–ø–æ–µ–ª|–≤—ã–ø–∏–ª|—Å–∫—É—à–∞–ª|–ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª|–ø–æ–æ–±–µ–¥–∞–ª|–ø–æ—É–∂–∏–Ω–∞–ª)/i,
    /(–∑–∞–≤—Ç—Ä–∞–∫|–æ–±–µ–¥|—É–∂–∏–Ω|–ø–µ—Ä–µ–∫—É—Å):\s/i,
  ]
  
  for (const pattern of strongFoodPatterns) {
    if (pattern.test(lowerText)) {
      console.log('Strong food pattern detected:', text)
      return 'food'
    }
  }
  
  // –°–ª–∞–±—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –µ–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤) - –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
  const weakFoodPatterns = [
    /(–±–∞–Ω–∞–Ω|—è–±–ª–æ–∫|–∫—É—Ä–∏—Ü–∞|—Ä–∏—Å|–æ–≤—Å—è–Ω–∫|—è–π—Ü|–º–æ–ª–æ–∫|—Ö–ª–µ–±|–º—è—Å|—Å–º—É–∑–∏|–ø—Ä–æ—Ç–µ–∏–Ω|–∫–ª—É–±–Ω–∏–∫|—Ç–≤–æ—Ä–æ–≥|–∫–µ—Ñ–∏—Ä|–π–æ–≥—É—Ä—Ç|—Å–∞–ª–∞—Ç|—Å—É–ø|–∫–∞—à)/i
  ]
  
  let hasFoodWords = false
  for (const pattern of weakFoodPatterns) {
    if (pattern.test(lowerText)) {
      hasFoodWords = true
      break
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ò –∑–∞–ø—è—Ç—ã–µ (–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ) - —ç—Ç–æ –µ–¥–∞
  if (hasFoodWords && lowerText.includes(',') && lowerText.length > 20) {
    console.log('Food products enumeration detected:', text)
    return 'food'
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ò —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ (>50 —Å–∏–º–≤–æ–ª–æ–≤) –ë–ï–ó –≤–æ–ø—Ä–æ—Å–Ω—ã—Ö —Å–ª–æ–≤
  if (hasFoodWords && lowerText.length > 50 && !lowerText.includes('?')) {
    // –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –≥–ª–∞–≥–æ–ª–æ–≤-–≤–æ–ø—Ä–æ—Å–æ–≤
    const hasQuestionVerbs = /(—Ä–∞—Å—Å–∫–∞–∂|–ø–æ–∫–∞–∂|–æ–±—ä—è—Å–Ω|–¥–∞–π|–Ω–∞–π–¥–∏|–ø–æ–¥—Å–∫–∞–∂)/i.test(lowerText)
    if (!hasQuestionVerbs) {
      console.log('Long message with food products, no question verbs:', text)
      return 'food'
    }
  }
  
  // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏–∏ - —Å—á–∏—Ç–∞–µ–º –í–û–ü–†–û–°–û–ú (–∞ –Ω–µ –µ–¥–æ–π)
  // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (<30 —Å–∏–º–≤–æ–ª–æ–≤) —Å –µ–¥–æ–π - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ
  if (lowerText.length < 30 && !lowerText.includes(',') && hasFoodWords) {
    // –ù–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è - —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
    if (/(—ç—Ç–æ—Ç|—Ç–æ—Ç|–ø—Ä–æ|–∫–∞–∫–æ–π|—á—Ç–æ)/i.test(lowerText)) {
      console.log('Short message with pointing words - question:', text)
      return 'question'
    }
    console.log('Very short simple food mention:', text)
    return 'food'
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤–æ–ø—Ä–æ—Å (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
  console.log('Defaulting to question (low confidence):', text)
  return 'question'
}
async function getUserState(userId: number) {
  const { data, error } = await supabase
    .from('user_states')
    .select('*')
    .eq('telegram_id', userId)
    .maybeSingle()
  
  if (error) {
    console.error('Error getting user state:', error)
    return null
  }
  
  if (data) {
    console.log('User state loaded:', userId, data.state_name, data.state_data)
    return { state: data.state_name, data: data.state_data || {} }
  }
  
  console.log('No state found for user:', userId)
  return null
}
async function setUserState(userId: number, state: string, data: any) {
  console.log('Setting user state:', userId, state, data)
  const { error } = await supabase
    .from('user_states')
    .upsert({
      telegram_id: userId,
      state_name: state,
      state_data: data,
      updated_at: new Date().toISOString()
    }, {
      onConflict: 'telegram_id'
    })
  
  if (error) {
    console.error('Error setting user state:', error)
  }
}
async function clearUserState(userId: number) {
  console.log('Clearing user state:', userId)
  await supabase
    .from('user_states')
    .delete()
    .eq('telegram_id', userId)
}

// ============================================
// NUTRITION VALIDATION: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–ë–ñ–£
// ============================================

interface FoodItem {
  product: string
  weight: string
  calories: number
  protein: number
  fats: number
  carbs: number
}

interface ValidationResult {
  corrected: boolean
  notes: string[]
  calories: number
  protein: number
  fats: number
  carbs: number
  breakdown: FoodItem[]
}

function validateNutrition(analysis: any): ValidationResult {
  const notes: string[] = []
  let corrected = false

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 1–≥ –º–∞–∫—Ä–æ—Å–∞
  const KCAL_PER_G = { protein: 4, fat: 9, carb: 4 }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
  function getCategory(productName: string): string {
    const name = productName.toLowerCase()
    if (name.match(/–æ—Ä–µ—Ö|–º–∏–Ω–¥–∞–ª—å|–≥—Ä–µ—Ü–∫|–∫–µ—à—å—é|–∞—Ä–∞—Ö–∏—Å|—Ñ–∏—Å—Ç–∞—à/)) return 'nuts'
    if (name.match(/—Ç–≤–æ—Ä–æ–≥|–π–æ–≥—É—Ä—Ç|–∫–µ—Ñ–∏—Ä|–º–æ–ª–æ–∫–æ|—Å—ã—Ä|–≥—Ä–µ—á/)) return 'dairy'
    if (name.match(/–∫—É—Ä–∏—Ü–∞|—Ç—É–Ω–µ—Ü|—Ä—ã–±–∞|–º—è—Å–æ|–≥–æ–≤—è–¥|—Å–≤–∏–Ω–∏–Ω–∞/)) return 'protein'
    return 'other'
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
  function validateProduct(item: FoodItem): FoodItem {
    const fixed = { ...item }
    const category = getCategory(item.product)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
    const weightMatch = item.weight.match(/(\d+(?:\.\d+)?)\s*(?:–≥|g|–≥—Ä–∞–º–º)/i)
    if (!weightMatch) return fixed

    const weightG = parseFloat(weightMatch[1])

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ 100–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const per100 = {
      calories: (item.calories / weightG) * 100,
      protein: (item.protein / weightG) * 100,
      fats: (item.fats / weightG) * 100,
      carbs: (item.carbs / weightG) * 100
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ 4-9-4
    const calcKcal = item.protein * KCAL_PER_G.protein +
                     item.fats * KCAL_PER_G.fat +
                     item.carbs * KCAL_PER_G.carb
    const kcalDelta = Math.abs(calcKcal - item.calories) / Math.max(1, item.calories)

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (category === 'nuts') {
      // –û—Ä–µ—Ö–∏: 600-650 –∫–∫–∞–ª/100–≥, –ñ: 50-60–≥/100–≥, –£: 10-15–≥/100–≥
      if (per100.fats < 45 || per100.calories < 500 || per100.carbs > 20) {
        notes.push(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ä–µ—Ö–∏: –∂–∏—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ~55–≥/100–≥, —É–≥–ª–µ–≤–æ–¥—ã ~12–≥/100–≥`)
        corrected = true
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ä–µ—Ö–æ–≤
        fixed.fats = Math.round((weightG * 55 / 100) * 10) / 10
        fixed.protein = Math.round((weightG * 18 / 100) * 10) / 10
        fixed.carbs = Math.round((weightG * 12 / 100) * 10) / 10
        fixed.calories = Math.round(
          fixed.protein * KCAL_PER_G.protein +
          fixed.fats * KCAL_PER_G.fat +
          fixed.carbs * KCAL_PER_G.carb
        )
      }
    } else if (category === 'dairy') {
      const isLowFatCottage = item.product.match(/—Ç–≤–æ—Ä–æ–≥.*(–æ–±–µ–∑–∂–∏—Ä|0%)|–æ–±–µ–∑–∂–∏—Ä.*—Ç–≤–æ—Ä–æ–≥/i)
      const isGreekYogurt = item.product.match(/–≥—Ä–µ—á.*–π–æ–≥—É—Ä—Ç|–π–æ–≥—É—Ä—Ç.*–≥—Ä–µ—á/i)

      if (isLowFatCottage) {
        // –¢–≤–æ—Ä–æ–≥ –æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π: 70-80 –∫–∫–∞–ª/100–≥, –ë: 16-18–≥/100–≥
        if (per100.protein < 14 || per100.protein > 20) {
          notes.push(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–≤–æ—Ä–æ–≥: –±–µ–ª–æ–∫ ~17–≥/100–≥`)
          corrected = true
          fixed.protein = Math.round((weightG * 17 / 100) * 10) / 10
          fixed.fats = Math.round((weightG * 1 / 100) * 10) / 10
          fixed.carbs = Math.round((weightG * 2.5 / 100) * 10) / 10
          fixed.calories = Math.round(
            fixed.protein * KCAL_PER_G.protein +
            fixed.fats * KCAL_PER_G.fat +
            fixed.carbs * KCAL_PER_G.carb
          )
        }
      } else if (isGreekYogurt) {
        // –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç: 60-70 –∫–∫–∞–ª/100–≥, –ë: 10-11–≥/100–≥, –ñ: 0-2–≥/100–≥
        if (per100.fats === 0 && per100.protein > 9) {
          notes.push(`üîß –î–æ–±–∞–≤–ª–µ–Ω –∂–∏—Ä –¥–ª—è –≥—Ä–µ—á–µ—Å–∫–æ–≥–æ –π–æ–≥—É—Ä—Ç–∞: –º–∏–Ω–∏–º—É–º 2–≥/100–≥`)
          corrected = true
          fixed.fats = Math.round((weightG * 2 / 100) * 10) / 10
          fixed.calories = Math.round(
            fixed.protein * KCAL_PER_G.protein +
            fixed.fats * KCAL_PER_G.fat +
            fixed.carbs * KCAL_PER_G.carb
          )
        }
      }
    }

    // –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–æ—Ä–∏–π (–µ—Å–ª–∏ –¥–µ–ª—å—Ç–∞ > 12%)
    const finalCalcKcal = fixed.protein * KCAL_PER_G.protein +
                          fixed.fats * KCAL_PER_G.fat +
                          fixed.carbs * KCAL_PER_G.carb
    const finalDelta = Math.abs(finalCalcKcal - fixed.calories) / Math.max(1, fixed.calories)

    if (finalDelta > 0.12) {
      notes.push(`üîß –ö–∞–ª–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –ø–æ —Ñ–æ—Ä–º—É–ª–µ 4-9-4`)
      corrected = true
      fixed.calories = Math.round(finalCalcKcal)
    }

    return fixed
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç
  const fixedBreakdown = (analysis.breakdown || []).map(validateProduct)

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const totals = fixedBreakdown.reduce((acc, item) => ({
    calories: acc.calories + item.calories,
    protein: acc.protein + item.protein,
    fats: acc.fats + item.fats,
    carbs: acc.carbs + item.carbs
  }), { calories: 0, protein: 0, fats: 0, carbs: 0 })

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö –∫–∞–ª–æ—Ä–∏–π
  const totalCalcKcal = totals.protein * KCAL_PER_G.protein +
                        totals.fats * KCAL_PER_G.fat +
                        totals.carbs * KCAL_PER_G.carb
  const totalDelta = Math.abs(totalCalcKcal - totals.calories) / Math.max(1, totals.calories)

  if (totalDelta > 0.08) {
    notes.push(`üîß –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –ø–æ —Ñ–æ—Ä–º—É–ª–µ 4-9-4`)
    corrected = true
    totals.calories = Math.round(totalCalcKcal)
  }

  return {
    corrected,
    notes,
    calories: Math.round(totals.calories),
    protein: Math.round(totals.protein),
    fats: Math.round(totals.fats),
    carbs: Math.round(totals.carbs),
    breakdown: fixedBreakdown
  }
}

async function saveChatMessage(dbUserId: number, role: 'user' | 'assistant' | 'system', content: string) {
  try {
    const { data, error } = await supabase
      .from('conversation_history')
      .insert({
        user_id: dbUserId,
        role: role,
        content: content
      })
      .select()
    
    if (error) {
      console.error('Error saving chat message:', error)
    }
  } catch (error) {
    console.error('Exception saving chat message:', error)
  }
}
async function getChatHistory(dbUserId: number, limit: number = 10): Promise<Array<{role: string, content: string}>> {
  try {
    const { data, error } = await supabase
      .from('conversation_history')
      .select('role, content')
      .eq('user_id', dbUserId)
      .order('created_at', { ascending: false })
      .limit(limit)
    
    if (error) {
      console.error('Error getting chat history:', error)
      return []
    }
    
    return data ? data.reverse() : []
  } catch (error) {
    console.error('Exception getting chat history:', error)
    return []
  }
}
async function clearChatHistory(dbUserId: number) {
  try {
    const { error } = await supabase
      .from('conversation_history')
      .delete()
      .eq('user_id', dbUserId)
    
    if (error) {
      console.error('Error clearing chat history:', error)
    }
  } catch (error) {
    console.error('Exception clearing chat history:', error)
  }
}
async function saveUserPreference(
  dbUserId: number,
  preferenceType: 'allergy' | 'intolerance' | 'dislike' | 'exclude' | 'preference',
  item: string,
  description?: string
) {
  try {
    console.log(`üéØ Saving preference for user ${dbUserId}: ${preferenceType} - ${item}`)
    const { data, error } = await supabase
      .from('user_preferences')
      .upsert({
        user_id: dbUserId,
        preference_type: preferenceType,
        item: item.toLowerCase(),
        description: description,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,preference_type,item'
      })
      .select()
    
    if (error) {
      console.error('‚ùå Error saving user preference:', error)
      console.error('Error details:', JSON.stringify(error))
    } else {
      console.log(`‚úÖ Preference saved: ${item}`)
    }
  } catch (error) {
    console.error('‚ùå Exception saving user preference:', error)
  }
}
async function getUserPreferences(dbUserId: number): Promise<Array<any>> {
  try {
    const { data, error } = await supabase
      .from('user_preferences')
      .select('*')
      .eq('user_id', dbUserId)
    
    if (error) {
      console.error('Error getting user preferences:', error)
      return []
    }
    
    return data || []
  } catch (error) {
    console.error('Exception getting user preferences:', error)
    return []
  }
}
/**
 * –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function deleteUserPreference(dbUserId: number, preferenceType: string, item: string) {
  try {
    const { error } = await supabase
      .from('user_preferences')
      .delete()
      .eq('user_id', dbUserId)
      .eq('preference_type', preferenceType)
      .eq('item', item.toLowerCase())
    
    if (error) {
      console.error('Error deleting user preference:', error)
    }
  } catch (error) {
    console.error('Exception deleting user preference:', error)
  }
}
/**
 * –ò–∑–≤–ª–µ—á—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function extractPreferencesFromText(text: string): Promise<Array<{type: string, item: string}>> {
  const preferences: Array<{type: string, item: string}> = []
  
  const lowerText = text.toLowerCase()
  
  // üö´ –ù–ï –ò–ó–í–õ–ï–ö–ê–¢–¨ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–π/–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  const adjustmentKeywords = [
    '—É–≤–µ–ª–∏—á—å', '—É–≤–µ–ª–∏—á–∏', '—É–≤–µ–ª–∏—á–∏–º', '–±–æ–ª—å—à–µ', '–ø–æ–±–æ–ª—å—à–µ', '–¥–æ–±–∞–≤—å',
    '—É–º–µ–Ω—å—à–∏', '—É–º–µ–Ω—å—à–∏–º', '–º–µ–Ω—å—à–µ', '–ø–æ–º–µ–Ω—å—à–µ', '—Å–æ–∫—Ä–∞—Ç–∏',
    '–ø–æ–ª—Ü—Ü–∏', '–ø–æ—Ä—Ü–∏', // –æ–ø–µ—á–∞—Ç–∫–∏ –¥–ª—è "–ø–æ—Ä—Ü–∏–∏"
    '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—Ä–∞–∑–º–µ—Ä', '–æ–±—ä–µ–º'
  ]
  
  for (const keyword of adjustmentKeywords) {
    if (lowerText.includes(keyword)) {
      console.log(`‚ö†Ô∏è Detected adjustment keyword "${keyword}" - skipping preference extraction`)
      return [] // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    }
  }
  
  // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ù–ê–°–¢–û–Ø–©–ò–• –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  const intoleranceKeywords = ['–Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å', '–Ω–µ –ø–µ—Ä–µ–Ω–æ—à—É', '–Ω–µ —É—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è', '–ø–ª–æ—Ö–æ –æ—Ç']
  const allergyKeywords = ['–∞–ª–ª–µ—Ä–≥–∏—è', '–∞–ª–ª–µ—Ä–≥–∏—á–µ–Ω', '–∞–ª–ª–µ—Ä–≥–∏—á–Ω–∞']
  const excludeKeywords = ['–±–µ–∑', '–Ω–µ –µ–º', '–Ω–µ –ª—é–±–ª—é', '–∏—Å–∫–ª—é—á–∏—Ç—å', '–Ω–µ–ª—å–∑—è', '–Ω–µ —Ö–æ—á—É', '–∑–∞–º–µ–Ω–∏', '—É–±–µ—Ä–∏', '–Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π', '–≤–æ–æ–±—â–µ –Ω–µ', '–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –µ–º']
  
  // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π)
  const foodItems = [
    { patterns: ['—Ä—ã–±'], item: '—Ä—ã–±–∞' },
    { patterns: ['–ª–æ—Å–æ—Å—å', '—Å–µ–º–≥–∞', '—Ñ–æ—Ä–µ–ª—å', '—Ç—É–Ω–µ—Ü'], item: '—Ä—ã–±–∞' },
    { patterns: ['–º–µ–¥'], item: '–º–µ–¥' },
    { patterns: ['–∞–≤–æ–∫–∞–¥–æ'], item: '–∞–≤–æ–∫–∞–¥–æ' },
    { patterns: ['–º—è—Å'], item: '–º—è—Å–æ' },
    { patterns: ['—Å–≤–∏–Ω–∏–Ω'], item: '—Å–≤–∏–Ω–∏–Ω–∞' },
    { patterns: ['–≥–æ–≤—è–¥–∏–Ω'], item: '–≥–æ–≤—è–¥–∏–Ω–∞' },
    { patterns: ['–∫—É—Ä–∏–Ω', '–∫—É—Ä–∏—Ü–∞'], item: '–∫—É—Ä–∏—Ü–∞' },
    { patterns: ['–∏–Ω–¥–µ–π–∫'], item: '–∏–Ω–¥–µ–π–∫–∞' },
    { patterns: ['–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç', '–∫—Ä–µ–≤–µ—Ç–∫', '–∫—Ä–∞–±', '–º–æ–ª–ª—é—Å–∫'], item: '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã' },
    { patterns: ['–æ—Ä–µ—Ö', '–∞—Ä–∞—Ö–∏—Å', '–º–∏–Ω–¥–∞–ª—å', '–≥—Ä–µ—Ü–∫'], item: '–æ—Ä–µ—Ö–∏' },
    { patterns: ['–º–æ–ª–æ–∫'], item: '–º–æ–ª–æ–∫–æ' },
    { patterns: ['—Ç–≤–æ—Ä–æ–≥'], item: '—Ç–≤–æ—Ä–æ–≥' },
    { patterns: ['—Å—ã—Ä'], item: '—Å—ã—Ä' },
    { patterns: ['—è–π—Ü', '—è–π–∫–æ'], item: '—è–π—Ü–∞' },
    { patterns: ['–≥—Ä–∏–±—ã', '–≥—Ä–∏–±'], item: '–≥—Ä–∏–±—ã' },
    { patterns: ['–ª–∞–∫—Ç–æ–∑'], item: '–ª–∞–∫—Ç–æ–∑–∞' },
    { patterns: ['–≥–ª—é—Ç–µ–Ω'], item: '–≥–ª—é—Ç–µ–Ω' },
    { patterns: ['—Å–∞—Ö–∞—Ä'], item: '—Å–∞—Ö–∞—Ä' },
    { patterns: ['—Å–æ–ª—å'], item: '—Å–æ–ª—å' },
    { patterns: ['—Ö–ª–µ–±'], item: '—Ö–ª–µ–±' },
    { patterns: ['–º–∞–∫–∞—Ä–æ–Ω', '–ø–∞—Å—Ç–∞'], item: '–º–∞–∫–∞—Ä–æ–Ω—ã' },
    { patterns: ['—Ä–∏—Å'], item: '—Ä–∏—Å' },
    { patterns: ['–∫–∞—Ä—Ç–æ—Ñ–µ–ª', '–∫–∞—Ä—Ç–æ—à–∫'], item: '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å' },
    { patterns: ['–±–∞–Ω–∞–Ω'], item: '–±–∞–Ω–∞–Ω—ã' },
    { patterns: ['–º–æ–ª–æ—á–Ω'], item: '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã' }
  ]
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å
  for (const keyword of intoleranceKeywords) {
    if (lowerText.includes(keyword)) {
      for (const food of foodItems) {
        for (const pattern of food.patterns) {
          if (lowerText.includes(pattern)) {
            preferences.push({type: 'intolerance', item: food.item})
            break
          }
        }
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–ª–µ—Ä–≥–∏–∏
  for (const keyword of allergyKeywords) {
    if (lowerText.includes(keyword)) {
      for (const food of foodItems) {
        for (const pattern of food.patterns) {
          if (lowerText.includes(pattern)) {
            preferences.push({type: 'allergy', item: food.item})
            break
          }
        }
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  for (const keyword of excludeKeywords) {
    if (lowerText.includes(keyword)) {
      for (const food of foodItems) {
        for (const pattern of food.patterns) {
          if (lowerText.includes(pattern)) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–≤–æ—Ä–æ–≥ –∏ —Å—ã—Ä –µ—Å–ª–∏ —Ä–µ—á—å –æ –º–æ–ª–æ–∫–µ
            if (food.item === '–º–æ–ª–æ–∫–æ' && (lowerText.includes('—Ç–≤–æ—Ä–æ–≥') || lowerText.includes('—Å—ã—Ä'))) {
              continue
            }
            preferences.push({type: 'exclude', item: food.item})
            break
          }
        }
      }
    }
  }
  
  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const uniquePreferences = preferences.filter((pref, index, self) =>
    index === self.findIndex((p) => p.type === pref.type && p.item === pref.item)
  )
  
  return uniquePreferences
}
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getSubscriptionInfo(dbUserId: number): Promise<any> {
  try {
    const { data, error } = await supabase.rpc('get_subscription_info', {
      p_user_id: dbUserId
    })
    
    if (error) {
      console.error('Error getting subscription info:', error)
      return null
    }
    
    return data
  } catch (error) {
    console.error('Exception getting subscription info:', error)
    return null
  }
}
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º (–µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
 */
async function checkSubscriptionAccess(dbUserId: number): Promise<boolean> {
  try {
    const subscriptionData = await getSubscriptionInfo(dbUserId)
    const subscriptionInfo = Array.isArray(subscriptionData) ? subscriptionData[0] : subscriptionData
    
    if (!subscriptionInfo) {
      return false
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞
    if (subscriptionInfo.is_active && subscriptionInfo.expires_at) {
      const expiresAt = new Date(subscriptionInfo.expires_at)
      const now = new Date()
      return expiresAt > now
    }
    
    return false
  } catch (error) {
    console.error('Error checking subscription access:', error)
    return false
  }
}

// ============================================
// RATE LIMITING & CACHE HELPERS
// ============================================

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function checkRateLimit(dbUserId: number, maxRequests: number = 30, windowMinutes: number = 1): Promise<{allowed: boolean, remaining: number, retryAfter?: number}> {
  try {
    const { data, error } = await supabase
      .rpc('check_rate_limit', {
        p_user_id: dbUserId,
        p_max_requests: maxRequests,
        p_window_minutes: windowMinutes
      })

    if (error) {
      console.error('Error checking rate limit:', error)
      // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail open)
      return { allowed: true, remaining: maxRequests }
    }

    return {
      allowed: data.allowed,
      remaining: data.remaining,
      retryAfter: data.retry_after
    }
  } catch (error) {
    console.error('Exception checking rate limit:', error)
    // Fail open
    return { allowed: true, remaining: maxRequests }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞
 */
function generateCacheKey(type: string, data: any): string {
  // –ü—Ä–æ—Å—Ç–æ–π hash - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å crypto
  const jsonString = JSON.stringify(data).toLowerCase().trim()
  let hash = 0
  for (let i = 0; i < jsonString.length; i++) {
    const char = jsonString.charCodeAt(i)
    hash = ((hash << 5) - hash) + char
    hash = hash & hash // Convert to 32bit integer
  }
  return `${type}_${Math.abs(hash)}`
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
 */
async function getFromCache(cacheKey: string): Promise<any | null> {
  try {
    const { data, error } = await supabase
      .rpc('get_from_cache', {
        p_cache_key: cacheKey
      })

    if (error || !data) {
      return null
    }

    console.log(`‚úÖ Cache HIT for key: ${cacheKey}`)
    return data
  } catch (error) {
    console.error('Error getting from cache:', error)
    return null
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
 */
async function saveToCache(
  cacheKey: string,
  cacheType: string,
  requestData: any,
  responseData: any,
  ttlSeconds: number = 2592000 // 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
): Promise<void> {
  try {
    const { error } = await supabase
      .rpc('save_to_cache', {
        p_cache_key: cacheKey,
        p_cache_type: cacheType,
        p_request_data: requestData,
        p_response_data: responseData,
        p_ttl_seconds: ttlSeconds
      })

    if (error) {
      console.error('Error saving to cache:', error)
    } else {
      console.log(`üíæ Cache SAVE for key: ${cacheKey}`)
    }
  } catch (error) {
    console.error('Exception saving to cache:', error)
  }
}

/**
 * Fetch —Å timeout
 */
async function fetchWithTimeout(
  url: string,
  options: any,
  timeout: number = 30000
): Promise<Response> {
  const controller = new AbortController()
  const timeoutId = setTimeout(() => controller.abort(), timeout)

  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    })
    return response
  } finally {
    clearTimeout(timeoutId)
  }
}

/**
 * OpenAI –∑–∞–ø—Ä–æ—Å —Å retry –∏ timeout
 */
async function callOpenAIWithRetry(
  url: string,
  options: any,
  maxRetries: number = 3,
  timeout: number = 30000
): Promise<any> {
  let lastError: any

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`ü§ñ OpenAI API call attempt ${attempt}/${maxRetries}`)

      const response = await fetchWithTimeout(url, options, timeout)

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`OpenAI API error: ${response.status} - ${errorText}`)
      }

      const data = await response.json()
      console.log(`‚úÖ OpenAI API call successful`)
      return data

    } catch (error: any) {
      lastError = error
      console.error(`‚ùå OpenAI API call attempt ${attempt} failed:`, error.message)

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ temporary - –±—Ä–æ—Å–∞–µ–º
      if (attempt === maxRetries) {
        throw error
      }

      // Exponential backoff: 1s, 2s, 4s
      const delay = 1000 * Math.pow(2, attempt - 1)
      console.log(`‚è≥ Retrying in ${delay}ms...`)
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }

  throw lastError
}

// ============================================
// END OF RATE LIMITING & CACHE HELPERS
// ============================================

// ============================================
// PHASE 2: USER CONTEXT OPTIMIZATION
// ============================================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (PHASE 2 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
 * –ó–∞–º–µ–Ω—è–µ—Ç 4-5 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 1 –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ VIEW
 * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function getUserFullContext(telegramId: number): Promise<any | null> {
  try {
    const { data, error } = await supabase
      .rpc('get_user_full_context', { p_telegram_id: telegramId })

    if (error) {
      console.error('‚ùå Error getting user full context:', error)
      return null
    }

    if (!data) {
      console.warn('‚ö†Ô∏è No context found for telegram_id:', telegramId)
      return null
    }

    console.log(`‚úÖ Got user full context for ${telegramId} (user_id: ${data.user?.id})`)
    return data
  } catch (error) {
    console.error('‚ùå Exception in getUserFullContext:', error)
    return null
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id (PHASE 2 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
 * @param userId - Internal user_id –∏–∑ –ë–î
 * @returns –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function getUserFullContextById(userId: number): Promise<any | null> {
  try {
    const { data, error } = await supabase
      .rpc('get_user_full_context_by_id', { p_user_id: userId })

    if (error) {
      console.error('‚ùå Error getting user full context by id:', error)
      return null
    }

    if (!data) {
      console.warn('‚ö†Ô∏è No context found for user_id:', userId)
      return null
    }

    console.log(`‚úÖ Got user full context for user_id ${userId}`)
    return data
  } catch (error) {
    console.error('‚ùå Exception in getUserFullContextById:', error)
    return null
  }
}

// ============================================
// END OF USER CONTEXT OPTIMIZATION
// ============================================

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
async function sendMessage(chatId: number, text: string, replyMarkup?: any, parseMode: string = 'Markdown', replyToMessageId?: number): Promise<any> {
  const payload: any = {
    chat_id: chatId,
    text: text
  }

  if (parseMode) {
    payload.parse_mode = parseMode
  }

  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }

  if (replyToMessageId) {
    payload.reply_to_message_id = replyToMessageId
  }
  
  console.log('Sending message to chat:', chatId, 'length:', text.length, 'parse_mode:', parseMode)
  
  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })
    
    const result = await response.json()
    
    if (!response.ok) {
      console.error('Telegram API error:', result)
      console.error('Message text:', text.substring(0, 200))
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (result.description?.includes("can't parse entities") && parseMode) {
        console.log('Retrying without parse_mode...')
        return await sendMessage(chatId, text, replyMarkup, '')
      }
      
      throw new Error(`Telegram API error: ${result.description}`)
    }
    
    console.log('Message sent successfully')
    return result
  } catch (error) {
    console.error('Error sending message:', error)
    throw error
  }
}
/**
 * –û—Ç–≤–µ—Ç –Ω–∞ callback query
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string): Promise<void> {
  await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      callback_query_id: callbackQueryId,
      text: text || ''
    })
  })
}
/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function editMessageText(
  chatId: number,
  messageId: number,
  text: string,
  replyMarkup?: any
): Promise<any> {
  const payload: any = {
    chat_id: chatId,
    message_id: messageId,
    text: text,
    parse_mode: 'Markdown'
  }
  
  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }
  
  const response = await fetch(`${TELEGRAM_API}/editMessageText`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
  
  return await response.json()
}
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getOrCreateUser(telegramId: number, username?: string, firstName?: string) {
  const { data: existing } = await supabase
    .from('users')
    .select('*')
    .eq('telegram_id', telegramId)
    .single()
  
  if (existing) return existing
  
  const { data: newUser } = await supabase
    .from('users')
    .insert({
      telegram_id: telegramId,
      username: username,
      first_name: firstName
    })
    .select()
    .single()
  
  return newUser
}
/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ö–ë–ñ–£ —á–µ—Ä–µ–∑ OpenAI
 */
async function generateNutritionPlan(profileData: any): Promise<any> {
  const activityNames = {
    low: '–º–∞–ª–µ–Ω—å–∫–∞—è (–Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –≤–æ–æ–±—â–µ)',
    medium: '—Å—Ä–µ–¥–Ω—è—è (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)',
    high: '–≤—ã—Å–æ–∫–∞—è (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 3 –∏ –±–æ–ª–µ–µ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)'
  }
  
  const goalNames = {
    lose: '—Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å',
    maintain: '–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å',
    gain: '–Ω–∞–±–æ—Ä –≤–µ—Å–∞'
  }
  const prompt = `–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ C.I.D. (Care ‚Ä¢ Insight ‚Ä¢ Discipline). –†–∞—Å—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
- –ò–º—è: ${profileData.name}
- –í–æ–∑—Ä–∞—Å—Ç: ${profileData.age} –ª–µ—Ç
- –ü–æ–ª: ${profileData.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}
- –†–æ—Å—Ç: ${profileData.height} —Å–º
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${profileData.current_weight} –∫–≥
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityNames[profileData.activity_level as keyof typeof activityNames]}
- –¶–µ–ª—å: ${goalNames[profileData.goal as keyof typeof goalNames]}
${profileData.wishes ? `- –ü–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: "${profileData.wishes}"` : ''}
–í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–µ:
1. –†–∞—Å—Å—á–∏—Ç–∞–π –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR) –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
2. –†–∞—Å—Å—á–∏—Ç–∞–π –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π (TDEE) —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
3. –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
4. –†–∞—Å—Å—á–∏—Ç–∞–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ë–ñ–£
5. –†–∞—Å—Å—á–∏—Ç–∞–π –Ω–æ—Ä–º—É –≤–æ–¥—ã –≤ –¥–µ–Ω—å (–æ–±—ã—á–Ω–æ 30-40 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞)
6. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
7. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á—Ç–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "bmr": —á–∏—Å–ª–æ,
    "tdee": —á–∏—Å–ª–æ,
    "target_calories": —á–∏—Å–ª–æ,
    "protein_grams": —á–∏—Å–ª–æ,
    "fats_grams": —á–∏—Å–ª–æ,
    "carbs_grams": —á–∏—Å–ª–æ,
    "water_liters": —á–∏—Å–ª–æ,
    "methodology_explanation": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –º–µ—Ç–æ–¥–∏–∫–∏",
    "activity_recommendations": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–∂–µ–ª–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞"
}`
  console.log('Calling OpenAI API for nutrition plan...')
  
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: '–¢—ã C.I.D. - –æ–ø—ã—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ —Ç—Ä–µ–Ω–µ—Ä. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        response_format: { type: 'json_object' },
        max_tokens: 1000
      })
    })
    if (!response.ok) {
      const errorText = await response.text()
      console.error('OpenAI API error:', response.status, errorText)
      throw new Error(`OpenAI API error: ${response.status}`)
    }
    const data = await response.json()
    console.log('OpenAI response received')
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('Invalid OpenAI response:', data)
      throw new Error('Invalid OpenAI response')
    }
    
    return JSON.parse(data.choices[0].message.content)
  } catch (error) {
    console.error('Error in generateNutritionPlan:', error)
    throw error
  }
}
async function adjustNutritionPlan(currentPlan: any, userRequest: string, profileData: any): Promise<any> {
  const prompt = `–¢—ã C.I.D., –¥–∏–µ—Ç–æ–ª–æ–≥. –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω.
–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: ${currentPlan.calories} –∫–∫–∞–ª, ${currentPlan.protein}–≥ –±–µ–ª–∫–∞, ${currentPlan.fats}–≥ –∂–∏—Ä–æ–≤, ${currentPlan.carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, ${currentPlan.water}–ª –≤–æ–¥—ã
–î–∞–Ω–Ω—ã–µ: ${profileData.name}, ${profileData.age} –ª–µ—Ç, ${profileData.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}, ${profileData.current_weight} –∫–≥
–ó–∞–ø—Ä–æ—Å: "${userRequest}"
–í–µ—Ä–Ω–∏ JSON: {"target_calories": —á–∏—Å–ª–æ, "protein_grams": —á–∏—Å–ª–æ, "fats_grams": —á–∏—Å–ª–æ, "carbs_grams": —á–∏—Å–ª–æ, "water_liters": —á–∏—Å–ª–æ, "adjustment_explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"}`
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: '–¢—ã C.I.D. - –¥–∏–µ—Ç–æ–ª–æ–≥. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      response_format: { type: 'json_object' },
      max_tokens: 500
    })
  })
  const data = await response.json()
  return JSON.parse(data.choices[0].message.content)
}
/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
 */
function cleanMarkdown(text: string): string {
  if (!text) return ''
  return text
    .replace(/\*\*/g, '')      // –£–±–∏—Ä–∞–µ–º **
    .replace(/\*/g, '')        // –£–±–∏—Ä–∞–µ–º *
    .replace(/__/g, '')        // –£–±–∏—Ä–∞–µ–º __
    .replace(/_/g, '')         // –£–±–∏—Ä–∞–µ–º _
    .replace(/\[([^\]]+)\]\([^\)]+\)/g, '$1')  // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url) -> —Ç–µ–∫—Å—Ç
    .replace(/`([^`]+)`/g, '$1')  // –£–±–∏—Ä–∞–µ–º –∫–æ–¥ `—Ç–µ–∫—Å—Ç` -> —Ç–µ–∫—Å—Ç
    .replace(/#{1,6}\s/g, '')  // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    .trim()
}
/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ö–ë–ñ–£ (–ë–ï–ó Markdown)
 */
function formatNutritionCard(plan: any, profileData: any): string {
  const name = profileData.name || '–ö–ª–∏–µ–Ω—Ç'
  const calories = plan.target_calories || plan.calories || 0
  const protein = plan.protein_grams || plan.protein || 0
  const fats = plan.fats_grams || plan.fats || 0
  const carbs = plan.carbs_grams || plan.carbs || 0
  const water = plan.water_liters || plan.water || 2
  const bmr = plan.bmr || 0
  const tdee = plan.tdee || 0
  
  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
  const methodology = cleanMarkdown(plan.methodology_explanation || '')
  const recommendations = cleanMarkdown(plan.activity_recommendations || '–°–ª–µ–¥—É–π—Ç–µ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')
  
  return `üìä –ö–ê–†–¢–û–ß–ö–ê –ö–ë–ñ–£ –î–õ–Ø ${name.toUpperCase()}
üî• –ö–∞–ª–æ—Ä–∏–∏: ${calories} –∫–∫–∞–ª/–¥–µ–Ω—å
ü•© –ë–µ–ª–∫–∏: ${protein} –≥
ü•ë –ñ–∏—Ä—ã: ${fats} –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${carbs} –≥
üíß –í–æ–¥–∞: ${water} –ª/–¥–µ–Ω—å
üìà –ú–µ—Ç–∞–±–æ–ª–∏–∑–º:
‚Ä¢ –ë–∞–∑–æ–≤—ã–π (BMR): ${bmr.toFixed(0)} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ (TDEE): ${tdee.toFixed(0)} –∫–∫–∞–ª/–¥–µ–Ω—å
${methodology}
üí™ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
${recommendations}
`
}
/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 */
function welcomeKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "‚ú® –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "fill_profile" }]
    ]
  }
}
/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ö–ë–ñ–£
 */
function nutritionCardKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: "card_done" },
        { text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: "edit_profile" }
      ],
      [
        { text: "üîÑ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: "adjust_card" }
      ]
    ]
  }
}
/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
 */
function getMainKeyboard() {
  return {
    keyboard: [
      [
        { text: "üìä –î–Ω–µ–≤–Ω–∏–∫" },
        { text: "üìñ –†–µ—Ü–µ–ø—Ç—ã" }
      ],
      [
        { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
}
/**
 * –ú–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞
 */
function getDiaryKeyboard() {
  return {
    keyboard: [
      [
        { text: "üìä –ö–ë–ñ–£ + –í–æ–¥–∞" }
      ],
      [
        { text: "üìù –ú–æ–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏" }
      ],
      [
        { text: "üîô –ù–∞–∑–∞–¥" }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
}
/**
 * –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function getSettingsKeyboard() {
  return {
    keyboard: [
      [
        { text: "üíé –ü–æ–¥–ø–∏—Å–∫–∞" },
        { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }
      ],
      [
        { text: "üéØ –ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è" }
      ],
      [
        { text: "üîô –ù–∞–∑–∞–¥" }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
}
/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
 */
function genderKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üë® –ú—É–∂—Å–∫–æ–π", callback_data: "gender_male" },
        { text: "üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data: "gender_female" }
      ]
    ]
  }
}
/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function activityKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "ü™ë –ú–∞–ª–µ–Ω—å–∫–∞—è (–ù–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –≤–æ–æ–±—â–µ)", callback_data: "activity_low" }],
      [{ text: "üö∂ –°—Ä–µ–¥–Ω—è—è (1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)", callback_data: "activity_medium" }],
      [{ text: "üí™ –í—ã—Å–æ–∫–∞—è (3+ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)", callback_data: "activity_high" }]
    ]
  }
}
/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
 */
function goalKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üìâ –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å", callback_data: "goal_lose" }],
      [{ text: "‚öñÔ∏è –î–µ—Ä–∂–∞—Ç—å –≤–µ—Å", callback_data: "goal_maintain" }],
      [{ text: "üìà –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å", callback_data: "goal_gain" }]
    ]
  }
}

/**
 * üî• –ù–û–í–´–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
 */

/**
 * –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –æ–±—ä–µ–º–∞ –≤–æ–¥—ã (inline)
 */
function quickWaterKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "250 –º–ª", callback_data: "log_water_250" },
        { text: "500 –º–ª", callback_data: "log_water_500" }
      ],
      [
        { text: "1 –ª", callback_data: "log_water_1000" },
        { text: "‚úèÔ∏è –î—Ä—É–≥–æ–µ", callback_data: "log_water_custom" }
      ],
      [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
    ]
  }
}

/**
 * –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
 */
function settingsMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å (–ö–ë–ñ–£)", callback_data: "show_profile" }
      ],
      [
        { text: "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data: "progress_menu" }
      ],
      [
        { text: "üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data: "show_subscription" }
      ],
      [
        { text: "üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data: "show_preferences" }
      ],
      [
        { text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data: "notifications_menu" }
      ],
      [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
    ]
  }
}

/**
 * –ú–µ–Ω—é "–ú–æ—ë –º–µ–Ω—é"
 */
function myMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üçΩ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data: "my_templates" }
      ],
      [
        { text: "üìñ –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data: "my_recipes" }
      ],
      [
        { text: "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", callback_data: "shopping_menu" }
      ],
      [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
    ]
  }
}

/**
 * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ AI —Å —Ä–µ—Ü–µ–ø—Ç–æ–º/—Ä–∞—Ü–∏–æ–Ω–æ–º
 */
function aiResponseActionsKeyboard(hasMultipleItems: boolean = false) {
  const keyboard: any[][] = []

  if (hasMultipleItems) {
    // –ï—Å–ª–∏ AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ä–∞—Ü–∏–æ–Ω (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥)
    keyboard.push([
      { text: "üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω", callback_data: "save_ai_meal_plan" }
    ])
    keyboard.push([
      { text: "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data: "save_ai_items_separately" }
    ])
  } else {
    // –ï—Å–ª–∏ AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç
    keyboard.push([
      { text: "üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data: "save_ai_recipe" }
    ])
  }

  keyboard.push([
    { text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –ø—Ä–∏–µ–º", callback_data: "log_ai_as_meal" }
  ])

  keyboard.push([
    { text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }
  ])

  return { inline_keyboard: keyboard }
}

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –µ–¥—ã
 */
function afterFoodLogKeyboard(mealId?: number) {
  const keyboard: any[][] = [
    [
      { text: "üçΩ –ï—â–µ –ø—Ä–∏–µ–º", callback_data: "quick_log_food" },
      { text: "üìä –ú–æ–π –¥–µ–Ω—å", callback_data: "diary" }
    ]
  ]

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å ID –ø—Ä–∏–µ–º–∞
  if (mealId) {
    keyboard.push([
      { text: "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: `save_template_${mealId}` },
      { text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data: `edit_meal_${mealId}` }
    ])
    keyboard.push([
      { text: "üóë –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_meal_${mealId}` }
    ])
  }

  keyboard.push([{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }])

  return { inline_keyboard: keyboard }
}

/**
 * Inline –º–µ–Ω—é –¥–ª—è "–ú–æ–π –¥–µ–Ω—å" —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 */
function myDayActionsKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üìù –ú–æ–∏ –ø—Ä–∏–µ–º—ã", callback_data: "manage_meals" },
        { text: "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ª–æ–≥", callback_data: "quick_log" }
      ],
      [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
    ]
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
 */
async function handleStartCommand(message: TelegramMessage) {
  const user = await getOrCreateUser(
    message.from.id,
    message.from.username,
    message.from.first_name
  )
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
  const { data: profile } = await supabase
    .from('user_profiles')
    .select('*')
    .eq('user_id', user.id)
    .single()
  
  // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  if (!profile) {
    const welcomeMessage = `üëã **–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}!** –Ø C.I.D. ‚Äî Care ‚Ä¢ Insight ‚Ä¢ Discipline.
–¢–≤–æ–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º.
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω, –≤–µ—Å—Ç–∏ —É—á—ë—Ç –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å —Ñ–æ–∫—É—Å.
üéØ **–ß—Ç–æ —è —É–º–µ—é:**
üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ö–ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ü–µ–ª–∏) –ø–æ –Ω–∞—É—á–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
üçΩÔ∏è –ü–æ–º–æ–≥–∞—é –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º. AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª—é–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
üìã –î–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ö–ë–ñ–£, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é –æ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–∏, –ø–ª–∞–Ω–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
üìä –í–µ–¥—É –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤–æ–¥—ã –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
üé§ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –≤–µ–∑–¥–µ - –Ω–∞–≥–æ–≤–∞—Ä–∏–≤–∞–π –≤–º–µ—Å—Ç–æ –ø–µ—á–∞—Ç–∏
üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ - —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –µ–¥—É - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ 
‚úèÔ∏è –ì–∏–±–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ AI, —É—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üöÄ`
    
    await sendMessage(message.chat.id, welcomeMessage, welcomeKeyboard())
    return
  }
  
  // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const { data: plan } = await supabase
    .from('nutrition_plans')
    .select('*')
    .eq('user_id', user.id)
    .eq('is_active', true)
    .single()
  
  if (!plan) {
    await sendMessage(message.chat.id, `üëã **–ü—Ä–∏–≤–µ—Ç, ${profile.name || message.from.first_name}!**\n\n‚úÖ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–ª–∞–Ω –ö–ë–ñ–£ –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞.`, getMainKeyboard())
    return
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const today = new Date().toISOString().split('T')[0]
  const { data: todayLogs } = await supabase
    .from('food_logs')
    .select('*')
    .eq('user_id', user.id)
    .gte('logged_at', `${today}T00:00:00`)
  
  // –°—á–∏—Ç–∞–µ–º —Å—ä–µ–¥–µ–Ω–Ω–æ–µ
  const consumed = todayLogs?.reduce((acc, log) => ({
    calories: acc.calories + (log.calories || 0),
    protein: acc.protein + (log.protein || 0),
    fats: acc.fats + (log.fats || 0),
    carbs: acc.carbs + (log.carbs || 0)
  }), { calories: 0, protein: 0, fats: 0, carbs: 0 }) || { calories: 0, protein: 0, fats: 0, carbs: 0 }
  
  const remaining = {
    calories: plan.calories - consumed.calories,
    protein: plan.protein - consumed.protein,
    fats: plan.fats - consumed.fats,
    carbs: plan.carbs - consumed.carbs
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
  const balanceEmoji = remaining.calories > 0 ? 'üíö' : remaining.calories < 0 ? '‚ù§Ô∏è' : 'üíõ'
  const balanceSign = remaining.calories > 0 ? '+' : ''
  
  // Inline keyboard —Å quick actions
  const keyboard = {
    inline_keyboard: [
      [
        { text: "üí∏ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å", callback_data: "quick_log_food" },
        { text: "üìã –†–µ—Ü–µ–ø—Ç—ã", callback_data: "menu_recipes" }
      ],
      [
        { text: "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "diary" }
      ]
    ]
  }
  
  await sendMessage(
    message.chat.id,
    `üëã **–ü—Ä–∏–≤–µ—Ç, ${profile.name || message.from.first_name}!**\n\n` +
    `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n` +
    `${balanceEmoji} **${balanceSign}${remaining.calories.toFixed(0)} –∫–∫–∞–ª** (–æ—Å—Ç–∞–ª–æ—Å—å)\n\n` +
    `ü•© –ë–µ–ª–∫–∏: ${consumed.protein.toFixed(0)}/${Math.round(plan.protein)}–≥\n` +
    `ü•ë –ñ–∏—Ä—ã: ${consumed.fats.toFixed(0)}/${Math.round(plan.fats)}–≥\n` +
    `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${consumed.carbs.toFixed(0)}/${Math.round(plan.carbs)}–≥\n\n` +
    `üí° **–°–æ–≤–µ—Ç:** –ú–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º, –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ üì∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π!\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º üëá`,
    keyboard
  )
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  await sendMessage(message.chat.id, "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**", getMainKeyboard())
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
 */
async function handleCallbackQuery(callbackQuery: TelegramCallbackQuery) {
  await answerCallbackQuery(callbackQuery.id)
  
  const chatId = callbackQuery.message!.chat.id
  const messageId = callbackQuery.message!.message_id
  const data = callbackQuery.data!
  const userId = callbackQuery.from.id
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
  const user = await getOrCreateUser(
    callbackQuery.from.id,
    callbackQuery.from.username,
    callbackQuery.from.first_name
  )
  
  // –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∫—Ä–æ–º–µ –¥–µ–π—Å—Ç–≤–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π)
  const allowedActions = ['fill_profile', 'buy_subscription', 'show_profile', 'gender_', 'activity_', 'goal_'];
  const isAllowed = allowedActions.some(action => data.startsWith(action)) || data.startsWith('select_plan_');
  
  if (!isAllowed) {
    const subscriptionData = await getSubscriptionInfo(user.id)
    const subscriptionInfo = Array.isArray(subscriptionData) ? subscriptionData[0] : subscriptionData
    
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏ —ç—Ç–æ –Ω–µ unlimited
    if (subscriptionInfo && subscriptionInfo.needs_payment && !subscriptionInfo.is_unlimited) {
      const blockMessage = `‚è∞ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫**\n\n` +
        `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π 7-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É.\n\n` +
        `üíé **–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è C.I.D.** ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n` +
        `‚ö° **1 –º–µ—Å—è—Ü** ‚Äî 129‚ÇΩ (–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å)\n` +
        `üî• **6 –º–µ—Å—è—Ü–µ–≤** ‚Äî 649‚ÇΩ (–ü–æ–ø—É–ª—è—Ä–Ω—ã–π)\n` +
        `üíé **1 –≥–æ–¥** ‚Äî 1099‚ÇΩ (–í—ã–≥–æ–¥–Ω–æ!)\n\n` +
        `üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ T-Bank\n` +
        `‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ`
      
      await sendMessage(chatId, blockMessage, {
        inline_keyboard: [
          [{ text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
          [{ text: "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "show_profile" }]
        ]
      })
      return // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
  }
  
  // –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  if (data === 'fill_profile') {
    await setUserState(userId, 'waiting_name', {})
    await editMessageText(
      chatId,
      messageId,
      "‚ú® –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.\n\nüìù –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
  }
  
  // –í—ã–±–æ—Ä –ø–æ–ª–∞
  else if (data.startsWith('gender_')) {
    const gender = data.split('_')[1]
    const stateData = await getUserState(userId)
    if (stateData) {
      stateData.data.gender = gender
      stateData.state = 'waiting_age'
      await setUserState(userId, stateData.state, stateData.data)
      await sendMessage(chatId, "üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    } else {
      // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
      await setUserState(userId, 'waiting_age', { gender })
      await sendMessage(chatId, "üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    }
  }
  
  // –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  else if (data.startsWith('activity_')) {
    const activity = data.split('_')[1]
    const stateData = await getUserState(userId)
    if (stateData) {
      stateData.data.activity_level = activity
      stateData.state = 'waiting_goal'
      await setUserState(userId, stateData.state, stateData.data)
      await sendMessage(chatId, "üéØ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", goalKeyboard())
    } else {
      // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
      await setUserState(userId, 'waiting_goal', { activity_level: activity })
      await sendMessage(chatId, "üéØ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", goalKeyboard())
    }
  }
  
  // –í—ã–±–æ—Ä —Ü–µ–ª–∏
  else if (data.startsWith('goal_')) {
    const goal = data.split('_')[1]
    const stateData = await getUserState(userId)
    if (stateData) {
      stateData.data.goal = goal
      stateData.state = 'waiting_wishes'
      await setUserState(userId, stateData.state, stateData.data)
      await sendMessage(
        chatId,
        `üí≠ **–ü–æ–∂–µ–ª–∞–Ω–∏—è:**\n\n–û–ø–∏—à–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: "—Ö–æ—á—É —Å—Ç–∞—Ç—å —Ä–µ–ª—å–µ—Ñ–Ω—ã–º" –∏–ª–∏ "—Ö–æ—á—É —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ"\n\n–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`
      )
    } else {
      // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
      await setUserState(userId, 'waiting_wishes', { goal })
      await sendMessage(
        chatId,
        `üí≠ **–ü–æ–∂–µ–ª–∞–Ω–∏—è:**\n\n–û–ø–∏—à–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: "—Ö–æ—á—É —Å—Ç–∞—Ç—å —Ä–µ–ª—å–µ—Ñ–Ω—ã–º" –∏–ª–∏ "—Ö–æ—á—É —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ"\n\n–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`
      )
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
  else if (data === 'show_card') {
    // ‚ö° PHASE 2 OPTIMIZATION: 1 –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ 2
    const context = await getUserFullContextById(user.id)

    if (context?.plan && context?.profile) {
      const cardText = formatNutritionCard(context.plan, context.profile)
      await editMessageText(chatId, messageId, cardText, nutritionCardKeyboard())
    } else {
      await editMessageText(chatId, messageId, "‚ö†Ô∏è –ü–ª–∞–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å!")
    }
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
  else if (data === 'adjust_card') {
    await setUserState(userId, 'waiting_adjustment', {})
    await editMessageText(
      chatId,
      messageId,
      `üîÑ **–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞**\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –Ω–∞–≥–æ–≤–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∏ —è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é –∫–∞—Ä—Ç–æ—á–∫—É.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ "–£–≤–µ–ª–∏—á—å –±–µ–ª–æ–∫ –Ω–∞ 20 –≥—Ä–∞–º–º"\n‚Ä¢ "–•–æ—á—É –±–æ–ª—å—à–µ –≤–æ–¥—ã"\n‚Ä¢ "–°–Ω–∏–∑—å —É–≥–ª–µ–≤–æ–¥—ã –¥–æ 150 –≥—Ä–∞–º–º"`
    )
  }
  
  // –ì–æ—Ç–æ–≤–æ
  else if (data === 'card_done') {
    const welcomeText = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°—Ç–∞—Ä—Ç –ø–æ–ª–æ–∂–µ–Ω –∏ —Ç—ã —É–∂–µ –Ω–∞—á–∞–ª –ø—É—Ç—å –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏!
"–ü—É—Ç—å –≤ —Ç—ã—Å—è—á—É –º–∏–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞!"
üí° –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é –ò–ò –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω—ã –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ –ø–æ–º–Ω–∏ ‚Äî —ç—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞. –°–ª—É—à–∞–π —Å–≤–æ—ë —Ç–µ–ª–æ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–ª–∞–Ω –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.`
    
    await sendMessage(chatId, welcomeText)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ trial –ø–æ–¥–ø–∏—Å–∫–µ
    const subscriptionData = await getSubscriptionInfo(user.id)
    const subscriptionInfo = Array.isArray(subscriptionData) ? subscriptionData[0] : subscriptionData
    
    if (subscriptionInfo && subscriptionInfo.is_trial) {
      const daysLeft = Math.ceil((new Date(subscriptionInfo.expires_at).getTime() - Date.now()) / (1000 * 60 * 60 * 24))
      
      const trialMessage = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
        `‚è∞ **${daysLeft} ${daysLeft === 1 ? '–¥–µ–Ω—å' : daysLeft < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}** –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n` +
        `üí° **–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –ø–ª–∞—Ç–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ!**\n` +
        `–ù–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç, –Ω–∏–∫–∞–∫–∏—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π.\n\n` +
        `‚ú® –ü–æ–ª—å–∑—É–π—Å—è **–≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏** –±–æ—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n` +
        `üìÖ –ü–æ—Å–ª–µ ${daysLeft} ${daysLeft === 1 ? '–¥–Ω—è' : daysLeft < 5 ? '–¥–Ω–µ–π' : '–¥–Ω–µ–π'} —Å–º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞:\n` +
        `‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 129‚ÇΩ\n` +
        `‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 649‚ÇΩ (–≤—ã–≥–æ–¥–Ω–æ!)\n` +
        `‚Ä¢ 1 –≥–æ–¥ ‚Äî 1099‚ÇΩ (—Å—É–ø–µ—Ä –≤—ã–≥–æ–¥–Ω–æ!)\n\n` +
        `üöÄ –ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`
      
      await sendMessage(chatId, trialMessage, {
        inline_keyboard: [
          [{ text: "üöÄ –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data: "start_onboarding" }]
        ]
      })
    } else {
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ trial (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥–º–∏–Ω –¥–∞–ª unlimited) - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
      await sendMessage(chatId, "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**", getMainKeyboard())
    }
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  else if (data === 'edit_profile') {
    await sendMessage(
      chatId,
      "‚úèÔ∏è –ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
      {
        inline_keyboard: [
          [{ text: "üìä –ö–ë–ñ–£ + –í–æ–¥–∞", callback_data: "edit_nutrition" }],
          [{ text: "üë§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è", callback_data: "edit_parameters" }]
        ]
      }
    )
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–ë–ñ–£
  else if (data === 'edit_nutrition') {
    await sendMessage(
      chatId,
      "üìä –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ö–ë–ñ–£?",
      {
        inline_keyboard: [
          [{ text: "üî• –ö–∞–ª–æ—Ä–∏–∏", callback_data: "edit_calories" }],
          [{ text: "ü•© –ë–µ–ª–∫–∏", callback_data: "edit_protein" }],
          [{ text: "ü•ë –ñ–∏—Ä—ã", callback_data: "edit_fats" }],
          [{ text: "üçû –£–≥–ª–µ–≤–æ–¥—ã", callback_data: "edit_carbs" }],
          [{ text: "üíß –í–æ–¥–∞", callback_data: "edit_water" }]
        ]
      }
    )
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
  else if (data === 'edit_parameters') {
    await sendMessage(
      chatId,
      "üë§ –ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
      {
        inline_keyboard: [
          [{ text: "üìù –ò–º—è", callback_data: "edit_name" }],
          [{ text: "‚öñÔ∏è –í–µ—Å", callback_data: "edit_weight" }],
          [{ text: "üìè –†–æ—Å—Ç", callback_data: "edit_height" }],
          [{ text: "üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data: "edit_age" }]
        ]
      }
    )
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ö–ë–ñ–£
  else if (data.startsWith('edit_')) {
    const param = data.split('_')[1]
    const paramNames: { [key: string]: string } = {
      calories: '–∫–∞–ª–æ—Ä–∏–∏',
      protein: '–±–µ–ª–∫–∏',
      fats: '–∂–∏—Ä—ã',
      carbs: '—É–≥–ª–µ–≤–æ–¥—ã',
      water: '–≤–æ–¥—É',
      name: '–∏–º—è',
      weight: '–≤–µ—Å',
      height: '—Ä–æ—Å—Ç',
      age: '–≤–æ–∑—Ä–∞—Å—Ç'
    }
    
    const paramName = paramNames[param] || param
    
    await setUserState(userId, `editing_${param}`, {})
    await sendMessage(
      chatId,
      `üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${paramName}:`
    )
  }
  
  // –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏
  else if (data === 'log_food') {
    await setUserState(userId, 'logging_food', {})
    await sendMessage(
      chatId,
      `üçΩ **–ó–∞–ø–∏—Å—å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏**
–ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ø–æ–µ–ª/–≤—ã–ø–∏–ª.
üí° **–î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏:** —É–∫–∞–∂–∏ –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π.
üìù **–í–∞–∂–Ω–æ:** –∫—Ä—É–ø—ã –≤–∑–≤–µ—à–∏–≤–∞–µ–º –≤ —Å—É—Ö–æ–º –≤–∏–¥–µ, –º—è—Å–æ ‚Äî –≤ –≥–æ—Ç–æ–≤–æ–º.
–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ: "—Ç–∞—Ä–µ–ª–∫–∞ —Å—É–ø–∞" –∏–ª–∏ "—Ä–∏—Å —Å –º—è—Å–æ–º" ‚Äî —è —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏.`,
      {
        inline_keyboard: [
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }
  
  // –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
  else if (data === 'menu_recipes') {
    await setUserState(userId, 'requesting_recipe', {})
    await sendMessage(
      chatId,
      `üí¨ **–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**
–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏.
‚ú® **–ß—Ç–æ —è –º–æ–≥—É:**
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã —Å —É—á–µ—Ç–æ–º –ö–ë–ñ–£
‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
‚Ä¢ –î–∞—Ç—å —Å–æ–≤–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é
‚Ä¢ –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
üìù **–ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É?** –ù–∞–∂–º–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ —Å—ä–µ–ª –≤ —á–∞—Ç.
–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã! üòä`,
      {
        inline_keyboard: [
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }
  
  // –î–Ω–µ–≤–Ω–∏–∫
  else if (data === 'diary') {
    await showDiary(chatId, user.id)
  }
  
  // –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  else if (data === 'start_onboarding') {
    await startOnboarding(chatId, userId)
  }
  
  // –®–∞–≥–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  else if (data === 'onboarding_step_2') {
    await onboardingStep2(chatId, userId)
  }
  else if (data === 'onboarding_step_3') {
    await onboardingStep3(chatId, userId)
  }
  else if (data === 'onboarding_step_4') {
    await onboardingStep4(chatId, userId)
  }
  else if (data === 'onboarding_step_5') {
    await onboardingStep5(chatId, userId)
  }
  else if (data === 'onboarding_step_6') {
    await onboardingStep6(chatId, userId)
  }
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–æ—Ç–æ
  else if (data.startsWith('confirm_photo_')) {
    const stateData = await getUserState(userId)
    if (stateData?.state === 'photo_analysis_pending' && stateData.data?.analysis) {
      const analysis = stateData.data.analysis
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
      const foodDescription = analysis.items.map((item: any) => 
        `${item.name} ${item.weight}–≥`
      ).join(', ')
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
      const { error } = await supabase
        .from('food_logs')
        .insert({
          user_id: user.id,
          description: foodDescription,
          calories: analysis.total.calories,
          protein: analysis.total.protein,
          fats: analysis.total.fats,
          carbs: analysis.total.carbs,
          created_at: new Date().toISOString()
        })
      
      if (error) {
        console.error('Error saving photo meal:', error)
        await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return
      }

      // üî• STREAK SYSTEM: –û–±–Ω–æ–≤–ª—è–µ–º streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let streakInfo: any = null
      try {
        const { data: streakData, error: streakError } = await supabase
          .rpc('update_user_streak', { p_user_id: user.id })
          .single()

        if (!streakError && streakData) {
          streakInfo = streakData
          console.log(`‚úÖ Streak updated for user ${user.id}:`, streakInfo)
        }
      } catch (error) {
        console.error('Error updating streak:', error)
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º streak –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let streakText = ''
      if (streakInfo) {
        streakText = `\n\nüî• **Streak: ${streakInfo.current_streak} ${streakInfo.current_streak === 1 ? '–¥–µ–Ω—å' : streakInfo.current_streak < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}!**`
        if (streakInfo.is_new_record) {
          streakText += ` üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!`
        }
        if (streakInfo.earned_achievements && streakInfo.earned_achievements.length > 0) {
          streakText += `\n\nüèÜ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n${streakInfo.earned_achievements.join('\n')}`
        }
      }

      await clearUserState(userId)
      await sendMessage(
        chatId,
        `‚úÖ **–ü—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞–ø–∏—Å–∞–Ω!**\n\n` +
        `üìù ${foodDescription}\n\n` +
        `üî• –ö–∞–ª–æ—Ä–∏–∏: ${analysis.total.calories} –∫–∫–∞–ª\n` +
        `ü•© –ë–µ–ª–∫–∏: ${analysis.total.protein}–≥\n` +
        `üßà –ñ–∏—Ä—ã: ${analysis.total.fats}–≥\n` +
        `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${analysis.total.carbs}–≥` +
        `${streakText}\n\n` +
        `‚ö†Ô∏è –ü–æ–º–Ω–∏: —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞!`,
        afterFoodLogKeyboard()
      )
    } else {
      await sendMessage(chatId, "‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
    }
  }
  
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  else if (data === 'main_menu') {
    await clearUserState(userId) // –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await sendMessage(chatId, "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**", getMainKeyboard())
  }
  
  // –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  else if (data === 'notifications_menu') {
    await showNotificationsMenu(chatId, user.id)
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –µ–¥–µ
  else if (data === 'toggle_food_notifications') {
    await toggleNotifications(chatId, user.id, 'food')
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–¥–µ
  else if (data === 'toggle_water_notifications') {
    await toggleNotifications(chatId, user.id, 'water')
  }
  
  // –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (–¥–æ–Ω–∞—Ç)
  else if (data === 'support_project') {
    await showDonationOptions(chatId, userId)
  }
  
  // –í—ã–±–æ—Ä —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞
  else if (data.startsWith('donate_')) {
    const amount = parseInt(data.split('_')[1])
    await createDonationPayment(chatId, user.id, amount)
  }
  
  // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞
  else if (data === 'donate_custom') {
    await setUserState(userId, 'entering_donation_amount', {})
    await sendMessage(
      chatId,
      `üíù **–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç**\n\n` +
      `–í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (–æ—Ç 50‚ÇΩ –¥–æ 10000‚ÇΩ):\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: 500`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "support_project" }]
        ]
      }
    )
  }
  
  // –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  else if (data === 'buy_subscription') {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã (monthly, quarterly, yearly)
    const { data: plans } = await supabase
      .from('subscription_plans')
      .select('*')
      .in('name', ['monthly', 'quarterly', 'yearly'])
      .order('duration_days', { ascending: true })
    
    if (!plans || plans.length === 0) {
      await sendMessage(chatId, "‚ùå –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
      return
    }
    
    let message = `üíé **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ C.I.D.**\n\n`
    message += `–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n`
    
    const keyboard: any[] = []
    
    // Emoji –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
    const planEmoji: Record<string, string> = {
      'monthly': '‚ö°',
      'quarterly': 'üî•',
      'yearly': 'üíé'
    }
    
    for (const plan of plans) {
      const priceRub = plan.price_rub || 0
      const emoji = planEmoji[plan.name] || '‚ú®'
      
      let durationText = ''
      let description = ''
      
      if (plan.name === 'monthly') {
        durationText = '1 –º–µ—Å—è—Ü'
        description = '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å'
      } else if (plan.name === 'quarterly') {
        durationText = '6 –º–µ—Å—è—Ü–µ–≤'
        description = '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π'
      } else if (plan.name === 'yearly') {
        durationText = '1 –≥–æ–¥'
        description = '–í—ã–≥–æ–¥–Ω–æ!'
      }
      
      message += `${emoji} **${durationText}** ‚Äî ${priceRub}‚ÇΩ (${description})\n`
      keyboard.push([{ 
        text: `${emoji} ${durationText} ‚Äî ${priceRub}‚ÇΩ`, 
        callback_data: `select_plan_${plan.id}` 
      }])
    }
    
    message += `\nüîí **–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ T-Bank**\n`
    message += `‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã`
    
    keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "show_profile" }])
    
    await sendMessage(chatId, message, {
      inline_keyboard: keyboard
    })
  }
  
  // –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  else if (data.startsWith('select_plan_')) {
    const planId = parseInt(data.split('_')[2])
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
    const { data: plan } = await supabase
      .from('subscription_plans')
      .select('*')
      .eq('id', planId)
      .single()
    
    if (!plan) {
      await sendMessage(chatId, "‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
      return
    }
    
    const priceRub = plan.price_rub || (plan.price_usd * 95)
    const durationText = plan.duration_days === 30 ? '1 –º–µ—Å—è—Ü' :
                        plan.duration_days === 90 ? '3 –º–µ—Å—è—Ü–∞' :
                        plan.duration_days === 365 ? '1 –≥–æ–¥' : `${plan.duration_days} –¥–Ω–µ–π`
    
    await sendMessage(chatId, `‚è≥ –°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂...\n\nüì¶ –ü–ª–∞–Ω: ${durationText}\nüí∞ –°—É–º–º–∞: ${priceRub}‚ÇΩ`)
    
    try {
      // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      const supabaseUrl = Deno.env.get('SUPABASE_URL')!
      const serviceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
      
      const paymentResponse = await fetch(`${supabaseUrl}/functions/v1/tbank-payment`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${serviceKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: user.id,
          planId: planId
        })
      })
      
      const paymentData = await paymentResponse.json()
      
      if (!paymentData.success) {
        throw new Error(paymentData.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞')
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
      await sendMessage(
        chatId,
        `‚úÖ **–ì–æ—Ç–æ–≤–æ –∫ –æ–ø–ª–∞—Ç–µ!**\n\n` +
        `üì¶ –ü–ª–∞–Ω: ${durationText}\n` +
        `üí∞ –°—É–º–º–∞: ${priceRub}‚ÇΩ\n\n` +
        `üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ T-Bank\n` +
        `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
        {
          inline_keyboard: [
            [{ text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url: paymentData.payment_url }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "buy_subscription" }]
          ]
        }
      )
    } catch (error) {
      console.error('Payment creation error:', error)
      await sendMessage(
        chatId,
        `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞**\n\n${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
        {
          inline_keyboard: [
            [{ text: "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: "buy_subscription" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      )
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  else if (data === 'show_profile') {
    await showProfileMenu(chatId, user.id)
  }
  
  // Quick actions
  // üåü QUICK LOG: –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã
  else if (data === 'quick_log') {
    try {
      const { data: templates, error } = await supabase
        .rpc('get_user_meal_templates', {
          p_user_id: user.id,
          p_limit: 10
        })

      if (error) throw error

      if (!templates || templates.length === 0) {
        await sendMessage(
          chatId,
          `‚≠ê **–ë—ã—Å—Ç—Ä—ã–π –ª–æ–≥**\n\n` +
          `–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n\n` +
          `üí° –ó–∞–ª–æ–≥–∏—Ä—É–π –µ–¥—É –∏ –Ω–∞–∂–º–∏ "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω!`,
          {
            inline_keyboard: [
              [{ text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏", callback_data: "quick_log_food" }],
              [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        )
        return
      }

      let templatesList = `‚ö° **–ë—ã—Å—Ç—Ä—ã–π –ª–æ–≥**\n\n`
      templatesList += `–í—ã–±–µ—Ä–∏ –±–ª—é–¥–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n`

      const keyboard: any[] = []

      templates.forEach((template: any, index: number) => {
        const calories = Math.round(template.calories)
        templatesList += `${template.emoji} **${template.template_name}**\n`
        templatesList += `   üî• ${calories} –∫–∫–∞–ª | –ë:${template.protein}–≥ –ñ:${template.fats}–≥ –£:${template.carbs}–≥\n\n`

        keyboard.push([{
          text: `${template.emoji} ${template.template_name} (${calories} –∫–∫–∞–ª)`,
          callback_data: `use_template_${template.id}`
        }])
      })

      keyboard.push([{ text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data: "quick_log_food" }])
      keyboard.push([{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }])

      await sendMessage(chatId, templatesList, { inline_keyboard: keyboard })

    } catch (error) {
      console.error('Error getting templates:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")
    }
  }

  else if (data === 'quick_log_food') {
    await setUserState(userId, 'logging_food', {})
    await sendMessage(
      chatId,
      `üçΩ **–ó–∞–ø–∏—Å—å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏**\n\n–ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ø–æ–µ–ª/–≤—ã–ø–∏–ª.\n\nüí° **–î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏:** —É–∫–∞–∂–∏ –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π.\nüìù **–í–∞–∂–Ω–æ:** –∫—Ä—É–ø—ã –≤–∑–≤–µ—à–∏–≤–∞–µ–º –≤ —Å—É—Ö–æ–º –≤–∏–¥–µ, –º—è—Å–æ ‚Äî –≤ –≥–æ—Ç–æ–≤–æ–º.\n\n–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ: "—Ç–∞—Ä–µ–ª–∫–∞ —Å—É–ø–∞" –∏–ª–∏ "—Ä–∏—Å —Å –º—è—Å–æ–º" ‚Äî —è —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏.`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_action" }]
        ]
      }
    )
  }
  
  // –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
  else if (data === 'cancel_action') {
    await clearUserState(userId)
    await sendMessage(chatId, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainKeyboard())
  }
  
  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  else if (data === 'clear_all_preferences') {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error } = await supabase
      .from('user_preferences')
      .delete()
      .eq('user_id', user.id)
    
    if (error) {
      console.error('Error clearing preferences:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
    } else {
      await sendMessage(chatId, "‚úÖ –í—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å C.I.D.", getMainKeyboard())
    }
  }
  
  // –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
  else if (data === 'clear_chat_history') {
    await clearChatHistory(user.id)
    await sendMessage(chatId, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.\n\n–ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üéØ", getMainKeyboard())
  }
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
  else if (data === 'manage_meals') {
    await manageMeals(chatId, user.id)
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
  else if (data.startsWith('delete_meal_')) {
    const mealId = parseInt(data.split('_')[2])
    await deleteMeal(chatId, user.id, mealId)
  }

  // üåü QUICK LOG: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω
  else if (data.startsWith('use_template_')) {
    const templateId = parseInt(data.split('_')[2])

    try {
      await sendMessage(chatId, "‚è≥ –õ–æ–≥–∏—Ä—É—é...")

      const { data: result, error } = await supabase
        .rpc('use_meal_template', {
          p_user_id: user.id,
          p_template_id: templateId
        })

      if (error || !result.success) {
        throw new Error(result?.error || 'Unknown error')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º streak
      let streakInfo: any = null
      try {
        const { data: streakData } = await supabase
          .rpc('update_user_streak', { p_user_id: user.id })
          .single()
        if (streakData) streakInfo = streakData
      } catch (e) {
        console.error('Error updating streak:', e)
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º streak –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let streakText = ''
      if (streakInfo) {
        streakText = `\n\nüî• **Streak: ${streakInfo.current_streak} ${streakInfo.current_streak === 1 ? '–¥–µ–Ω—å' : streakInfo.current_streak < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}!**`
        if (streakInfo.is_new_record) streakText += ` üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!`
        if (streakInfo.earned_achievements && streakInfo.earned_achievements.length > 0) {
          streakText += `\n\nüèÜ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n${streakInfo.earned_achievements.join('\n')}`
        }
      }

      const resultText = `‚úÖ **–ü—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞–ø–∏—Å–∞–Ω!**\n\n` +
        `‚≠ê **${result.template_name}**\n\n` +
        `üî• ${Math.round(result.calories)} –∫–∫–∞–ª | ü•© –ë: ${result.protein}–≥ | ü•ë –ñ: ${result.fats}–≥ | üçû –£: ${result.carbs}–≥${streakText}`

      await sendMessage(chatId, resultText, afterFoodLogKeyboard())

    } catch (error) {
      console.error('Error using template:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
  else if (data.startsWith('confirm_delete_meal_')) {
    const mealId = parseInt(data.split('_')[3])
    await confirmDeleteMeal(chatId, user.id, mealId)
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
  // üåü QUICK LOG: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  else if (data.startsWith('save_template_')) {
    const mealId = parseInt(data.split('_')[2])
    await setUserState(userId, 'saving_template', { mealId })
    await sendMessage(
      chatId,
      `‚≠ê **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ**\n\n` +
      `–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ–π –∑–∞–≤—Ç—Ä–∞–∫", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±–µ–¥", "–ü–µ—Ä–µ–∫—É—Å"\n\n` +
      `üí° –®–∞–±–ª–æ–Ω—ã –ø–æ–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—ã–µ –±–ª—é–¥–∞!`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_action" }]
        ]
      }
    )
  }

  else if (data.startsWith('edit_meal_')) {
    const mealId = parseInt(data.split('_')[2])

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–µ
    const { data: meal } = await supabase
      .from('food_logs')
      .select('*')
      .eq('id', mealId)
      .eq('user_id', user.id)
      .single()

    if (meal) {
      await setUserState(userId, 'editing_meal', { mealId: mealId, originalDescription: meal.description })
      await sendMessage(
        chatId,
        `‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏**\n\n` +
        `**–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**\n${meal.description}\n\n` +
        `**–¢–µ–∫—É—â–∏–µ –ö–ë–ñ–£:**\nüî• ${meal.calories}–∫–∫–∞–ª | –ë:${meal.protein}–≥ | –ñ:${meal.fats}–≥ | –£:${meal.carbs}–≥\n\n` +
        `–ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–≥–æ–≤–æ—Ä–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:`,
        {
          inline_keyboard: [
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "manage_meals" }]
          ]
        }
      )
    } else {
      await sendMessage(chatId, "‚ùå –ü—Ä–∏–µ–º –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ö–ë–ñ–£
  else if (data === 'edit_nutrition') {
    await sendMessage(
      chatId,
      `üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ö–ë–ñ–£**\n\n` +
      `–Ø –º–æ–≥—É –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∂–µ–ª–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é.\n\n` +
      `–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?`,
      {
        inline_keyboard: [
          [{ text: "üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data: "recalculate_nutrition" }],
          [{ text: "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data: "manual_nutrition" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
        ]
      }
    )
  }
  
  // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–ª–∞–Ω–∞ –ö–ë–ñ–£
  else if (data === 'recalculate_nutrition') {
    await sendMessage(chatId, "‚è≥ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–π –ø–ª–∞–Ω...")

    // ‚ö° PHASE 2 OPTIMIZATION: –∏—Å–ø–æ–ª—å–∑—É–µ–º getUserFullContextById
    const context = await getUserFullContextById(user.id)
    const profile = context?.profile

    if (profile) {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
        const plan = await generateNutritionPlan(profile)
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–∞–Ω—ã
        await supabase
          .from('nutrition_plans')
          .update({ is_active: false })
          .eq('user_id', user.id)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
        await supabase
          .from('nutrition_plans')
          .insert({
            user_id: user.id,
            calories: plan.target_calories,
            protein: plan.protein_grams,
            fats: plan.fats_grams,
            carbs: plan.carbs_grams,
            water: plan.water_liters,
            bmr: plan.bmr,
            tdee: plan.tdee,
            methodology_explanation: plan.methodology_explanation,
            activity_recommendations: plan.activity_recommendations,
            is_active: true
          })
        
        await sendMessage(
          chatId,
          `‚úÖ **–ü–ª–∞–Ω –ö–ë–ñ–£ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω!**\n\n` +
          `üî• –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(plan.target_calories)} –∫–∫–∞–ª\n` +
          `üçó –ë–µ–ª–∫–∏: ${Math.round(plan.protein_grams)} –≥\n` +
          `ü•ë –ñ–∏—Ä—ã: ${Math.round(plan.fats_grams)} –≥\n` +
          `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(plan.carbs_grams)} –≥\n` +
          `üíß –í–æ–¥–∞: ${Math.round(plan.water_liters * 10) / 10} –ª`,
          {
            inline_keyboard: [
              [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        )
      } catch (error) {
        console.error('Error recalculating nutrition plan:', error)
        await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–ª–∞–Ω–∞")
      }
    } else {
      await sendMessage(chatId, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }
  }
  
  // –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–ª–∞–Ω–∞ –ö–ë–ñ–£
  else if (data === 'manual_nutrition') {
    await setUserState(userId, 'entering_manual_nutrition', {})
    await sendMessage(
      chatId,
      `‚úèÔ∏è **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–ª–∞–Ω–∞ –ö–ë–ñ–£**\n\n` +
      `–í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
      `**–ö–∞–ª–æ—Ä–∏–∏ –ë–µ–ª–∫–∏ –ñ–∏—Ä—ã –£–≥–ª–µ–≤–æ–¥—ã –í–æ–¥–∞**\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: **2000 120 60 250 2000**\n\n` +
      `üìù –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –≥—Ä–∞–º–º–∞—Ö, –≤–æ–¥–∞ - –≤ –º–ª`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_action" }]
        ]
      }
    )
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
  else if (data === 'edit_parameters') {
    await sendMessage(
      chatId,
      `‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤**\n\n` +
      `–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:`,
      {
        inline_keyboard: [
          [{ text: "‚öñÔ∏è –í–µ—Å", callback_data: "edit_weight" }],
          [{ text: "üìè –†–æ—Å—Ç", callback_data: "edit_height" }],
          [{ text: "üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data: "edit_age" }],
          [{ text: "üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data: "edit_activity" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
        ]
      }
    )
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–∞
  else if (data === 'edit_weight') {
    await setUserState(userId, 'editing_weight', {})
    await sendMessage(
      chatId,
      `‚öñÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞**\n\n–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_action" }]
        ]
      }
    )
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞
  else if (data === 'edit_height') {
    await setUserState(userId, 'editing_height', {})
    await sendMessage(
      chatId,
      `üìè **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞**\n\n–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_action" }]
        ]
      }
    )
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
  else if (data === 'edit_age') {
    await setUserState(userId, 'editing_age', {})
    await sendMessage(
      chatId,
      `üéÇ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞**\n\n–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö:`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_action" }]
        ]
      }
    )
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  else if (data === 'edit_activity') {
    await sendMessage(
      chatId,
      `üèÉ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:`,
      activityKeyboard()
    )
  }

  // üìä CHARTS: –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π
  else if (data === 'chart_calories' || data === 'show_charts') {
    try {
      await sendMessage(chatId, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")

      // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
      const response = await fetch(`${SUPABASE_URL}/functions/v1/progress-charts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
        },
        body: JSON.stringify({
          userId: user.id,
          chatId: chatId,
          chartType: 'calories',
          days: 30
        })
      })

      if (!response.ok) {
        throw new Error('Failed to generate chart')
      }
    } catch (error) {
      console.error('Error generating chart:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    }
  }

  // üìä CHARTS: –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –±–µ–ª–∫–∞
  else if (data === 'chart_protein') {
    try {
      await sendMessage(chatId, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")

      const response = await fetch(`${SUPABASE_URL}/functions/v1/progress-charts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
        },
        body: JSON.stringify({
          userId: user.id,
          chatId: chatId,
          chartType: 'protein',
          days: 30
        })
      })

      if (!response.ok) {
        throw new Error('Failed to generate chart')
      }
    } catch (error) {
      console.error('Error generating chart:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    }
  }

  // üìä CHARTS: –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞
  else if (data === 'chart_weight') {
    try {
      await sendMessage(chatId, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")

      const response = await fetch(`${SUPABASE_URL}/functions/v1/progress-charts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
        },
        body: JSON.stringify({
          userId: user.id,
          chatId: chatId,
          chartType: 'weight',
          days: 90
        })
      })

      if (!response.ok) {
        throw new Error('Failed to generate chart')
      }
    } catch (error) {
      console.error('Error generating chart:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    }
  }

  // ‚öñÔ∏è WEIGHT: –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å
  else if (data === 'log_weight') {
    await setUserState(userId, 'logging_weight', {})
    await sendMessage(
      chatId,
      `‚öñÔ∏è **–ó–∞–ø–∏—Å—å –≤–µ—Å–∞**\n\n` +
      `–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: **75.5**\n\n` +
      `üí° –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–∑–≤–µ—à–∏–≤–∞–π—Å—è —É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫.`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_action" }]
        ]
      }
    )
  }

  // üõí SHOPPING LIST: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
  else if (data === 'shopping_list' || data.startsWith('shopping_list_')) {
    try {
      let days = 7
      if (data.startsWith('shopping_list_')) {
        days = parseInt(data.split('_')[2])
      }

      await sendMessage(chatId, `‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ ${days} –¥–Ω–µ–π...`)

      // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
      const response = await fetch(`${SUPABASE_URL}/functions/v1/shopping-list`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
        },
        body: JSON.stringify({
          userId: user.id,
          chatId: chatId,
          days: days
        })
      })

      if (!response.ok) {
        throw new Error('Failed to generate shopping list')
      }
    } catch (error) {
      console.error('Error generating shopping list:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    }
  }

  // üíß WATER: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã (–∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞)
  else if (data.startsWith('log_water_')) {
    const amountMl = parseInt(data.split('_')[2])

    try {
      const { data: result, error } = await supabase
        .rpc('log_water_intake', {
          p_user_id: user.id,
          p_amount_ml: amountMl,
          p_note: null
        })

      if (error || !result.success) {
        throw new Error('Failed to log water')
      }

      const todayTotalL = (result.today_total_ml / 1000).toFixed(1)
      const targetL = (result.target_ml / 1000).toFixed(1)
      const remainingL = (result.remaining_ml / 1000).toFixed(1)
      const progressPercent = result.progress_percent

      let progressBar = ''
      const filledSegments = Math.floor(progressPercent / 10)
      for (let i = 0; i < 10; i++) {
        progressBar += i < filledSegments ? 'üíß' : '‚ö™'
      }

      let messageText = `‚úÖ **–í–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!**\n\n`
      messageText += `üíß **+${amountMl} –º–ª**\n\n`
      messageText += `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:**\n${progressBar} ${progressPercent}%\n\n`
      messageText += `üíß –í—ã–ø–∏—Ç–æ: **${todayTotalL}–ª** / ${targetL}–ª\n`

      if (result.remaining_ml > 0) {
        messageText += `üìå –û—Å—Ç–∞–ª–æ—Å—å: **${remainingL}–ª**`
      } else {
        messageText += `üéâ **–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!**`
      }

      await sendMessage(chatId, messageText, {
        inline_keyboard: [
          [
            { text: "üíß –ï—â–µ –≤–æ–¥—ã", callback_data: "quick_log_water" },
            { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "water_stats" }
          ],
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      })
    } catch (error) {
      console.error('Error logging water:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–¥—ã")
    }
  }

  // üíß WATER: –ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞)
  else if (data === 'quick_log_water') {
    await sendMessage(
      chatId,
      `üíß **–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª?**\n\n–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:`,
      {
        inline_keyboard: [
          [
            { text: "250 –º–ª", callback_data: "log_water_250" },
            { text: "500 –º–ª", callback_data: "log_water_500" }
          ],
          [
            { text: "1 –ª–∏—Ç—Ä", callback_data: "log_water_1000" },
            { text: "1.5 –ª–∏—Ç—Ä–∞", callback_data: "log_water_1500" }
          ],
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }

  // üíß WATER: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã
  else if (data === 'water_stats') {
    try {
      const { data: stats } = await supabase
        .rpc('get_water_stats_today', { p_user_id: user.id })

      if (stats) {
        const todayTotalL = (stats.today_total_ml / 1000).toFixed(1)
        const targetL = (stats.target_ml / 1000).toFixed(1)
        const progressPercent = stats.progress_percent

        let progressBar = ''
        const filledSegments = Math.floor(progressPercent / 10)
        for (let i = 0; i < 10; i++) {
          progressBar += i < filledSegments ? 'üíß' : '‚ö™'
        }

        let messageText = `üíß **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n`
        messageText += `${progressBar} ${progressPercent}%\n\n`
        messageText += `üíß –í—ã–ø–∏—Ç–æ: **${todayTotalL}–ª** / ${targetL}–ª\n`
        messageText += `üìä –õ–æ–≥–æ–≤: ${stats.logs_count}\n\n`

        if (stats.is_goal_reached) {
          messageText += `üéâ **–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!** –û—Ç–ª–∏—á–Ω–æ!`
        } else {
          const remainingL = (stats.remaining_ml / 1000).toFixed(1)
          messageText += `üìå –û—Å—Ç–∞–ª–æ—Å—å: **${remainingL}–ª**`
        }

        await sendMessage(chatId, messageText, {
          inline_keyboard: [
            [{ text: "üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É", callback_data: "quick_log_water" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        })
      }
    } catch (error) {
      console.error('Error getting water stats:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    }
  }

  // üî• –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤–æ–¥—ã
  else if (data === 'log_water_custom') {
    await setUserState(userId, 'entering_water_amount', {})
    await sendMessage(
      chatId,
      `üíß **–í–≤–æ–¥ –æ–±—ä–µ–º–∞ –≤–æ–¥—ã**\n\n` +
      `–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª:\n` +
      `‚Ä¢ –í –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö: "500 –º–ª"\n` +
      `‚Ä¢ –í –ª–∏—Ç—Ä–∞—Ö: "1.5 –ª"\n` +
      `‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: "—Å—Ç–∞–∫–∞–Ω", "–±—É—Ç—ã–ª–∫–∞"`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" }]
        ]
      }
    )
  }

  // üî• –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò: –ú–µ–Ω—é "–ï—â—ë"
  else if (data === 'shopping_menu') {
    await sendMessage(
      chatId,
      `üõí **–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫**\n\n` +
      `–Ø –º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.\n\n` +
      `–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫?`,
      {
        inline_keyboard: [
          [
            { text: "üìÖ –ù–∞ 3 –¥–Ω—è", callback_data: "shopping_list_3" },
            { text: "üìÖ –ù–∞ 7 –¥–Ω–µ–π", callback_data: "shopping_list_7" }
          ],
          [{ text: "üìÖ –ù–∞ 14 –¥–Ω–µ–π", callback_data: "shopping_list_14" }],
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }

  else if (data === 'progress_menu') {
    await sendMessage(
      chatId,
      `üìà **–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å**\n\n` +
      `–í—ã–±–µ—Ä–∏ –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`,
      {
        inline_keyboard: [
          [
            { text: "üî• –ö–∞–ª–æ—Ä–∏–∏", callback_data: "chart_calories" },
            { text: "ü•© –ë–µ–ª–æ–∫", callback_data: "chart_protein" }
          ],
          [{ text: "‚öñÔ∏è –í–µ—Å", callback_data: "chart_weight" }],
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }

  else if (data === 'show_preferences') {
    await showUserPreferencesMenu(chatId, user.id)
  }

  else if (data === 'help_menu') {
    await showHelpMenu(chatId, user.id)
  }

  else if (data === 'show_subscription') {
    await showSubscriptionMenu(chatId, user.id)
  }

  // üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è "–ú–æ—ë –º–µ–Ω—é"
  else if (data === 'my_templates') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    const { data: templates, error } = await supabase
      .from('user_meal_templates')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })

    if (error || !templates || templates.length === 0) {
      await sendMessage(
        chatId,
        `üçΩ **–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã**\n\n` +
        `–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n\n` +
        `üí° **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω:**\n` +
        `1. –ó–∞–ø–∏—à–∏ –ø—Ä–∏–µ–º –ø–∏—â–∏\n` +
        `2. –ù–∞–∂–º–∏ "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –ø–æ–¥ –ø—Ä–∏–µ–º–æ–º\n` +
        `3. –®–∞–±–ª–æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è`,
        {
          inline_keyboard: [
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      )
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    const keyboard: any[][] = []
    for (const template of templates.slice(0, 10)) {
      keyboard.push([
        {
          text: `${template.template_name || '–®–∞–±–ª–æ–Ω'} (${template.calories || '?'} –∫–∫–∞–ª)`,
          callback_data: `use_template_${template.id}`
        }
      ])
    }
    keyboard.push([{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }])

    await sendMessage(
      chatId,
      `üçΩ **–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã**\n\n` +
      `–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:`,
      { inline_keyboard: keyboard }
    )
  }

  else if (data === 'my_recipes') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    const { data: recipes, error } = await supabase
      .from('saved_recipes')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })

    if (error || !recipes || recipes.length === 0) {
      await sendMessage(
        chatId,
        `üìñ **–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã**\n\n` +
        `–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n` +
        `üí° **–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç:**\n` +
        `1. –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç\n` +
        `2. –ù–∞–∂–º–∏ "üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç" –ø–æ–¥ –º–æ–∏–º –æ—Ç–≤–µ—Ç–æ–º\n` +
        `3. –†–µ—Ü–µ–ø—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å`,
        {
          inline_keyboard: [
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      )
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    const keyboard: any[][] = []
    for (const recipe of recipes.slice(0, 10)) {
      keyboard.push([
        {
          text: `${recipe.name || '–†–µ—Ü–µ–ø—Ç'} (${recipe.calories || '?'} –∫–∫–∞–ª)`,
          callback_data: `view_recipe_${recipe.id}`
        }
      ])
    }
    keyboard.push([{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }])

    await sendMessage(
      chatId,
      `üìñ **–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã**\n\n` +
      `–í—ã–±–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`,
      { inline_keyboard: keyboard }
    )
  }

  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Üí –ú–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  else if (data === 'settings_menu') {
    await sendMessage(
      chatId,
      `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n` +
      `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º, —Ü–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π:`,
      settingsMenuKeyboard()
    )
  }

  // üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ AI-–æ—Ç–≤–µ—Ç–∞–º–∏
  else if (data === 'save_ai_recipe') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç –æ—Ç AI
    await sendMessage(
      chatId,
      `üíæ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞**\n\n` +
      `–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞:\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: "–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º" –∏–ª–∏ "–ö—É—Ä–∏—Ü–∞ –≤ –¥—É—Ö–æ–≤–∫–µ"`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" }]
        ]
      }
    )
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    await setUserState(userId, 'naming_recipe', {
      recipeText: callbackQuery.message?.text || '',
      messageId: callbackQuery.message?.message_id
    })
  }

  else if (data === 'save_ai_meal_plan') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ä–∞—Ü–∏–æ–Ω
    await sendMessage(
      chatId,
      `üíæ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞**\n\n` +
      `–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞:\n\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–ª–∞–Ω –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" –∏–ª–∏ "–ú–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ–Ω—å"`,
      {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" }]
        ]
      }
    )
    await setUserState(userId, 'naming_meal_plan', {
      mealPlanText: callbackQuery.message?.text || '',
      messageId: callbackQuery.message?.message_id
    })
  }

  else if (data === 'save_ai_items_separately') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    await sendMessage(
      chatId,
      `üíæ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏**\n\n` +
      `–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ü–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å:\n\n` +
      `1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å—å —Ä–∞—Ü–∏–æ–Ω ‚Üí üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω\n` +
      `2. –ó–∞–ø–∏—Å–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–µ–º ‚Üí üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –ø—Ä–∏–µ–º\n\n` +
      `üí° –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞!`,
      {
        inline_keyboard: [
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }

  else if (data === 'log_ai_as_meal') {
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º AI-—Ä–µ—Ü–µ–ø—Ç –∫–∞–∫ –ø—Ä–∏–µ–º –ø–∏—â–∏
    const messageText = callbackQuery.message?.text || ''

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ö–ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞ AI (–∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "500 –∫–∫–∞–ª" –∏–ª–∏ "–ö–∞–ª–æ—Ä–∏–π: 500")
    const caloriesMatch = messageText.match(/(\d+)\s*–∫–∫–∞–ª/i)
    const proteinMatch = messageText.match(/–±–µ–ª–∫[–∞-—è]*:\s*(\d+)/i)
    const fatsMatch = messageText.match(/–∂–∏—Ä[–∞-—è]*:\s*(\d+)/i)
    const carbsMatch = messageText.match(/—É–≥–ª–µ–≤–æ–¥[–∞-—è]*:\s*(\d+)/i)

    if (!caloriesMatch) {
      await sendMessage(
        chatId,
        `‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ö–ë–ñ–£**\n\n` +
        `–ù–µ –Ω–∞—à–µ–ª –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö –≤ —Ä–µ—Ü–µ–ø—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —á–∞—Ç.\n\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä: "—Å—ä–µ–ª –æ–≤—Å—è–Ω–∫—É 60–≥, –±–∞–Ω–∞–Ω"`,
        {
          inline_keyboard: [
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      )
      return
    }

    const calories = parseInt(caloriesMatch[1])
    const protein = proteinMatch ? parseInt(proteinMatch[1]) : 0
    const fats = fatsMatch ? parseInt(fatsMatch[1]) : 0
    const carbs = carbsMatch ? parseInt(carbsMatch[1]) : 0

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–∏–µ–º –ø–∏—â–∏
    const { data: meal, error } = await supabase
      .from('food_logs')
      .insert({
        user_id: user.id,
        description: '–†–µ—Ü–µ–ø—Ç –æ—Ç AI',
        calories: calories,
        protein: protein,
        fats: fats,
        carbs: carbs,
        logged_at: new Date().toISOString()
      })
      .select()
      .single()

    if (error) {
      console.error('Error logging AI meal:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
      return
    }

    await sendMessage(
      chatId,
      `‚úÖ **–ü—Ä–∏–µ–º –∑–∞–ø–∏—Å–∞–Ω!**\n\n` +
      `üìä –ö–ë–ñ–£: ${calories} –∫–∫–∞–ª | –ë: ${protein}–≥ | –ñ: ${fats}–≥ | –£: ${carbs}–≥\n\n` +
      `–ß—Ç–æ –¥–∞–ª—å—à–µ?`,
      afterFoodLogKeyboard(meal.id)
    )
  }
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function handleTextMessage(message: TelegramMessage) {
  const userId = message.from.id
  const stateData = await getUserState(userId)
  
  console.log('handleTextMessage - userId:', userId, 'text:', message.text, 'state:', stateData?.state)
  
  const user = await getOrCreateUser(
    message.from.id,
    message.from.username,
    message.from.first_name
  )
  
  // –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start)
  if (message.text !== '/start') {
    const subscriptionData = await getSubscriptionInfo(user.id)
    const subscriptionInfo = Array.isArray(subscriptionData) ? subscriptionData[0] : subscriptionData
    
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏ —ç—Ç–æ –Ω–µ unlimited
    if (subscriptionInfo && subscriptionInfo.needs_payment && !subscriptionInfo.is_unlimited) {
      const blockMessage = `‚è∞ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫**\n\n` +
        `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π 7-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É.\n\n` +
        `üíé **–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è C.I.D.** ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n` +
        `‚ö° **1 –º–µ—Å—è—Ü** ‚Äî 129‚ÇΩ (–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å)\n` +
        `üî• **6 –º–µ—Å—è—Ü–µ–≤** ‚Äî 649‚ÇΩ (–ü–æ–ø—É–ª—è—Ä–Ω—ã–π)\n` +
        `üíé **1 –≥–æ–¥** ‚Äî 1099‚ÇΩ (–í—ã–≥–æ–¥–Ω–æ!)\n\n` +
        `üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ T-Bank\n` +
        `‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ`
      
      await sendMessage(message.chat.id, blockMessage, {
        inline_keyboard: [
          [{ text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
          [{ text: "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "show_profile" }]
        ]
      })
      return // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
  }
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
  const navigationButtons = [
    // –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (3 –∫–Ω–æ–ø–∫–∏)
    'üìä –î–Ω–µ–≤–Ω–∏–∫', 'üìñ –†–µ—Ü–µ–ø—Ç—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    // –°—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    'üíß –í–æ–¥–∞', 'üìä –ú–æ–π –¥–µ–Ω—å', 'üìñ –ú–æ—ë –º–µ–Ω—é', '‚ùì –ü–æ–º–æ—â—å',
    'üîô –ù–∞–∑–∞–¥', 'üí¨ –î–∏–∞–ª–æ–≥ —Å C.I.D.',
    'üìä –ö–ë–ñ–£ + –í–æ–¥–∞', 'üìù –ú–æ–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏',
    'üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üíé –ü–æ–¥–ø–∏—Å–∫–∞', 'üéØ –ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è',
    'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', 'üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'
  ]

  if (navigationButtons.includes(message.text?.trim() || '')) {
    const handled = await handleNavigationButtons(message, user)
    if (handled) return
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —ç—Ç–æ –Ω–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
  if (!stateData) {
    if (!message.text) return

    const intent = await detectIntent(message.text)
    console.log('Detected intent:', intent, 'for message:', message.text)

    if (intent === 'food') {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–¥—É
      await handleFoodLogging(userId, message.chat.id, user.id, message.text, 0)
      return
    } else if (intent === 'water') {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–¥—É
      await handleWaterLogging(userId, message.chat.id, user.id, message.text)
      return
    } else if (intent === 'question') {
      // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –£–º–Ω—ã–π —á–∞—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
      // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log(`üîç Extracting preferences from message: "${message.text}"`)
      const extractedPrefs = await extractPreferencesFromText(message.text)
      console.log(`Found ${extractedPrefs.length} preferences:`, extractedPrefs)

      // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–∞—à–ª–∏
      if (extractedPrefs.length > 0) {
        for (const pref of extractedPrefs) {
          await saveUserPreference(
            user.id,
            pref.type as 'allergy' | 'intolerance' | 'dislike' | 'exclude' | 'preference',
            pref.item
          )
        }
        console.log(`‚úÖ Saved ${extractedPrefs.length} preferences for user ${user.id}`)
      }

      // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
      await handleRecipeRequest(userId, message.chat.id, user.id, message.text, message.message_id)
      return
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await sendMessage(
        message.chat.id,
        `‚ùì –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏`,
        getMainKeyboard()
      )
      return
    }
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏
  if (stateData.state === 'waiting_name') {
    if (!message.text) return
    console.log('Processing name:', message.text)
    stateData.data.name = message.text
    stateData.state = 'waiting_gender'
    await setUserState(userId, stateData.state, stateData.data)
    await sendMessage(
      message.chat.id,
      `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${message.text}! üëã\n\nüë§ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:`,
      genderKeyboard()
    )
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
  else if (stateData.state === 'waiting_age') {
    if (!message.text) return
    console.log('Processing age:', message.text)
    const age = parseInt(message.text)
    if (isNaN(age) || age < 10 || age > 120) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120 –ª–µ—Ç)")
      return
    }
    stateData.data.age = age
    stateData.state = 'waiting_weight'
    await setUserState(userId, stateData.state, stateData.data)
    await sendMessage(message.chat.id, "‚öñÔ∏è –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):")
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ—Å–∞
  else if (stateData.state === 'waiting_weight') {
    if (!message.text) return
    const weight = parseFloat(message.text.replace(',', '.'))
    if (isNaN(weight) || weight < 30 || weight > 300) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
      return
    }
    stateData.data.current_weight = weight
    stateData.state = 'waiting_height'
    await setUserState(userId, stateData.state, stateData.data)
    await sendMessage(message.chat.id, "üìè –£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):")
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞
  else if (stateData.state === 'waiting_height') {
    if (!message.text) return
    const height = parseFloat(message.text.replace(',', '.'))
    if (isNaN(height) || height < 100 || height > 250) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)")
      return
    }
    stateData.data.height = height
    stateData.state = 'waiting_activity'
    await setUserState(userId, stateData.state, stateData.data)
    await sendMessage(
      message.chat.id,
      "üí™ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
      activityKeyboard()
    )
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π
  else if (stateData.state === 'waiting_wishes') {
    if (!message.text) return
    stateData.data.wishes = message.text
    await setUserState(userId, stateData.state, stateData.data)
    
    await sendMessage(message.chat.id, "‚è≥ –°–æ–∑–¥–∞—é —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ö–ë–ñ–£...")
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ OpenAI
    try {
      console.log('Generating nutrition plan for user:', user.id, stateData.data)
      const plan = await generateNutritionPlan(stateData.data)
      console.log('Plan generated:', plan)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      console.log('Saving user profile...')
      const { data: profile, error: profileError } = await supabase
        .from('user_profiles')
        .upsert({
          user_id: user.id,
          ...stateData.data
        }, {
          onConflict: 'user_id'
        })
        .select()
        .single()
      
      if (profileError) {
        console.error('Error saving profile:', profileError)
        throw profileError
      }
      console.log('Profile saved:', profile)
      
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–∞–Ω—ã
      console.log('Deactivating old plans...')
      const { error: deactivateError } = await supabase
        .from('nutrition_plans')
        .update({ is_active: false })
        .eq('user_id', user.id)
      
      if (deactivateError) {
        console.error('Error deactivating old plans:', deactivateError)
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
      console.log('Saving new nutrition plan...')
      const { data: savedPlan, error: planError } = await supabase
        .from('nutrition_plans')
        .insert({
          user_id: user.id,
          calories: Math.round(plan.target_calories),
          protein: Math.round(plan.protein_grams),
          fats: Math.round(plan.fats_grams),
          carbs: Math.round(plan.carbs_grams),
          water: plan.water_liters,
          bmr: plan.bmr,
          tdee: plan.tdee,
          methodology_explanation: plan.methodology_explanation,
          activity_recommendations: plan.activity_recommendations,
          is_active: true
        })
        .select()
        .single()
      
      if (planError) {
        console.error('Error saving plan:', planError)
        throw planError
      }
      console.log('Plan saved:', savedPlan)
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
      console.log('Formatting nutrition card...')
      const cardText = formatNutritionCard(plan, stateData.data)
      console.log('Sending card to user...')
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó Markdown, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      await sendMessage(message.chat.id, cardText, nutritionCardKeyboard(), '')
      console.log('Card sent successfully')
      
      await clearUserState(userId)
      console.log('Onboarding completed for user:', userId)
    } catch (error) {
      console.error('Error generating plan:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /start")
    }
  }
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  else if (stateData.state === 'waiting_adjustment') {
    if (!message.text) return
    await sendMessage(message.chat.id, "‚è≥ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø–ª–∞–Ω...")

    try {
      // ‚ö° PHASE 2 OPTIMIZATION: 1 –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ 2
      const context = await getUserFullContextById(user.id)
      const profile = context?.profile
      const currentPlan = context?.plan

      const adjusted = await adjustNutritionPlan(currentPlan, message.text, profile)
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å –¥–∞—Ç–æ–π
      const now = new Date()
      const dateStr = now.toLocaleDateString('ru-RU', { 
        day: '2-digit', 
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
      
      const adjustmentText = `\n\nüîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ (${dateStr}):\n${adjusted.adjustment_explanation}`
      
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2
      let cleanExplanation = currentPlan.methodology_explanation || ''
      
      // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –º–∞—Ä–∫–µ—Ä—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
      const parts = cleanExplanation.split('üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞')
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
      if (parts.length > 3) {
        // –ë–µ—Ä–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å) + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        cleanExplanation = parts[0] + 'üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞' + parts[parts.length - 2] + 'üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞' + parts[parts.length - 1]
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
      await supabase
        .from('nutrition_plans')
        .update({
          calories: adjusted.target_calories,
          protein: adjusted.protein_grams,
          fats: adjusted.fats_grams,
          carbs: adjusted.carbs_grams,
          water: adjusted.water_liters,
          methodology_explanation: cleanExplanation + adjustmentText
        })
        .eq('id', currentPlan.id)
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
      const { data: updatedPlan } = await supabase
        .from('nutrition_plans')
        .select('*')
        .eq('id', currentPlan.id)
        .single()
      
      const cardText = formatNutritionCard(updatedPlan, profile)
      await sendMessage(message.chat.id, cardText, nutritionCardKeyboard())
      
      await clearUserState(userId)
    } catch (error) {
      console.error('Error adjusting plan:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    }
  }
  
  // –ó–∞–ø–∏—Å—å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
  else if (stateData.state === 'logging_food') {
    if (!message.text) return
    const clarificationAttempt = stateData.data?.clarification_attempt || 0

    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ - –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    let fullDescription = message.text
    if (clarificationAttempt > 0 && stateData.data?.original_description) {
      fullDescription = `${stateData.data.original_description} ${message.text}`
      console.log('Combined food description:', fullDescription)
    }

    await handleFoodLogging(userId, message.chat.id, user.id, fullDescription, clarificationAttempt)
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–µ—Ü–µ–ø—Ç–∞
  else if (stateData.state === 'requesting_recipe') {
    if (!message.text) return
    await handleRecipeRequest(userId, message.chat.id, user.id, message.text, message.message_id)
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–ï–î –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ú)
  else if (stateData.state === 'editing_meal') {
    if (!message.text) return
    await handleMealEdit(userId, message.chat.id, user.id, stateData.data.mealId, message.text)
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –ü–û–°–õ–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–•)
  else if (stateData.state.startsWith('editing_')) {
    if (!message.text) return
    const param = stateData.state.replace('editing_', '')
    await handleParameterEdit(userId, message.chat.id, user.id, param, message.text)
  }

  // üåü QUICK LOG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
  else if (stateData.state === 'saving_template') {
    if (!message.text) return

    const templateName = message.text.trim()
    if (templateName.length < 2 || templateName.length > 50) {
      await sendMessage(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
      return
    }

    await sendMessage(message.chat.id, "‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...")

    try {
      const { data: result, error } = await supabase
        .rpc('create_meal_template_from_log', {
          p_user_id: user.id,
          p_food_log_id: stateData.data.mealId,
          p_template_name: templateName,
          p_emoji: '‚≠ê'
        })

      if (error || !result.success) {
        throw new Error(result?.error || 'Unknown error')
      }

      await sendMessage(
        message.chat.id,
        `‚úÖ **–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n` +
        `‚≠ê **"${templateName}"**\n\n` +
        `–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –±–ª—é–¥–æ —á–µ—Ä–µ–∑ "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ª–æ–≥"`,
        {
          inline_keyboard: [
            [{ text: "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ª–æ–≥", callback_data: "quick_log" }],
            [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "diary" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      )

      await clearUserState(userId)
    } catch (error) {
      console.error('Error saving template:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    }
  }

  // ‚öñÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–∞
  else if (stateData.state === 'logging_weight') {
    if (!message.text) return
    const weight = parseFloat(message.text.replace(',', '.'))
    if (isNaN(weight) || weight < 30 || weight > 300) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
      return
    }

    await sendMessage(message.chat.id, "‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é...")

    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å
      console.log('Calling log_weight for user:', user.id, 'weight:', weight)
      const { data: result, error } = await supabase
        .rpc('log_weight', {
          p_user_id: user.id,
          p_weight: weight,
          p_note: null
        })

      console.log('log_weight response:', { result, error })

      if (error) {
        console.error('DB error:', error)
        throw new Error(`DB error: ${error.message}`)
      }

      if (!result) {
        throw new Error('No result from log_weight function')
      }

      if (!result.success) {
        throw new Error(`log_weight returned success=false: ${JSON.stringify(result)}`)
      }

      let changeText = ''
      if (result.previous_weight && result.weight_change !== 0) {
        const changeValue = Math.abs(result.weight_change)
        const changeDirection = result.weight_change > 0 ? '+' : '-'
        changeText = `\n\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: **${changeDirection}${changeValue.toFixed(1)}** –∫–≥` +
          `\n(–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–µ—Å: ${result.previous_weight} –∫–≥)`
      }

      await sendMessage(
        message.chat.id,
        `‚úÖ **–í–µ—Å –∑–∞–ø–∏—Å–∞–Ω!**\n\n` +
        `‚öñÔ∏è **${weight} –∫–≥**${changeText}\n\n` +
        `üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤–∑–≤–µ—à–∏–≤–∞—Ç—å—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!`,
        {
          inline_keyboard: [
            [{ text: "üìä –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞", callback_data: "chart_weight" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      )

      await clearUserState(userId)
    } catch (error) {
      console.error('Error logging weight:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–∞
  else if (stateData.state === 'editing_weight') {
    if (!message.text) return
    const weight = parseFloat(message.text.replace(',', '.'))
    if (isNaN(weight) || weight < 30 || weight > 300) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    await supabase
      .from('user_profiles')
      .update({ current_weight: weight })
      .eq('user_id', user.id)
    
    await clearUserState(userId)
    await sendMessage(message.chat.id, `‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: **${weight} –∫–≥**\n\nüí° –•–æ—á–µ—à—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –ö–ë–ñ–£ —Å –Ω–æ–≤—ã–º –≤–µ—Å–æ–º?`, {
      inline_keyboard: [
        [{ text: "üîÑ –î–∞, –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data: "recalculate_nutrition" }],
        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
      ]
    })
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞
  else if (stateData.state === 'editing_height') {
    if (!message.text) return
    const height = parseFloat(message.text.replace(',', '.'))
    if (isNaN(height) || height < 100 || height > 250) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)")
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ—Å—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    await supabase
      .from('user_profiles')
      .update({ height: height })
      .eq('user_id', user.id)
    
    await clearUserState(userId)
    await sendMessage(message.chat.id, `‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: **${height} —Å–º**\n\nüí° –•–æ—á–µ—à—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –ö–ë–ñ–£ —Å –Ω–æ–≤—ã–º —Ä–æ—Å—Ç–æ–º?`, {
      inline_keyboard: [
        [{ text: "üîÑ –î–∞, –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data: "recalculate_nutrition" }],
        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
      ]
    })
  }
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
  else if (stateData.state === 'editing_age') {
    if (!message.text) return
    const age = parseInt(message.text)
    if (isNaN(age) || age < 10 || age > 120) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120 –ª–µ—Ç)")
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    await supabase
      .from('user_profiles')
      .update({ age: age })
      .eq('user_id', user.id)
    
    await clearUserState(userId)
    await sendMessage(message.chat.id, `‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: **${age} –ª–µ—Ç**\n\nüí° –•–æ—á–µ—à—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –ö–ë–ñ–£ —Å –Ω–æ–≤—ã–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º?`, {
      inline_keyboard: [
        [{ text: "üîÑ –î–∞, –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data: "recalculate_nutrition" }],
        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
      ]
    })
  }
  
  // –í–≤–æ–¥ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞
  else if (stateData.state === 'entering_donation_amount') {
    if (!message.text) return
    const amount = parseInt(message.text.replace(/\D/g, ''))
    
    if (isNaN(amount) || amount < 50 || amount > 10000) {
      await sendMessage(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—É–º–º—É –æ—Ç 50‚ÇΩ –¥–æ 10000‚ÇΩ")
      return
    }
    
    await clearUserState(userId)
    await createDonationPayment(message.chat.id, user.id, amount)
  }
  
  // –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ö–ë–ñ–£
  else if (stateData.state === 'entering_manual_nutrition') {
    if (!message.text) return
    const values = message.text.trim().split(/\s+/)
    
    if (values.length !== 5) {
      await sendMessage(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ 5 –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n**–ö–∞–ª–æ—Ä–∏–∏ –ë–µ–ª–∫–∏ –ñ–∏—Ä—ã –£–≥–ª–µ–≤–æ–¥—ã –í–æ–¥–∞**")
      return
    }
    
    const [calories, protein, fat, carbs, water] = values.map(v => parseFloat(v.replace(',', '.')))
    
    if (calories < 500 || calories > 5000 || protein < 0 || fat < 0 || carbs < 0 || water < 0) {
      await sendMessage(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
      return
    }
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω
    await supabase
      .from('nutrition_plans')
      .update({ is_active: false })
      .eq('user_id', user.id)
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
    await supabase
      .from('nutrition_plans')
      .insert({
        user_id: user.id,
        calories: Math.round(calories),
        protein: Math.round(protein),
        fats: Math.round(fat),
        carbs: Math.round(carbs),
        water: Math.round(water / 1000), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–ª –≤ –ª–∏—Ç—Ä—ã
        is_active: true
      })
    
    await clearUserState(userId)
    await sendMessage(
      message.chat.id,
      `‚úÖ **–ü–ª–∞–Ω –ö–ë–ñ–£ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n` +
      `üî• –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(calories)} –∫–∫–∞–ª\n` +
      `üçó –ë–µ–ª–∫–∏: ${Math.round(protein)} –≥\n` +
      `ü•ë –ñ–∏—Ä—ã: ${Math.round(fat)} –≥\n` +
      `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(carbs)} –≥\n` +
      `üíß –í–æ–¥–∞: ${Math.round(water)} –º–ª`,
      {
        inline_keyboard: [
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }

  // üî• –ù–û–í–´–ô: –í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –≤–æ–¥—ã
  else if (stateData.state === 'entering_water_amount') {
    if (!message.text) return

    const text = message.text.toLowerCase().trim()
    let amountMl = 0

    // –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –≤–æ–¥—ã
    if (text.includes('—Å—Ç–∞–∫–∞–Ω')) {
      amountMl = 250
    } else if (text.includes('–±—É—Ç—ã–ª–∫–∞') || text.includes('–±—É—Ç—ã–ª–∫—É')) {
      amountMl = 500
    } else if (text.match(/(\d+\.?\d*)\s*–ª(?:–∏—Ç—Ä)?/)) {
      const liters = parseFloat(text.match(/(\d+\.?\d*)\s*–ª(?:–∏—Ç—Ä)?/)![1])
      amountMl = liters * 1000
    } else if (text.match(/(\d+)\s*–º–ª/)) {
      amountMl = parseInt(text.match(/(\d+)\s*–º–ª/)![1])
    } else {
      await sendMessage(message.chat.id, "‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–º. –ü–æ–ø—Ä–æ–±—É–π:\n‚Ä¢ 500 –º–ª\n‚Ä¢ 1.5 –ª\n‚Ä¢ —Å—Ç–∞–∫–∞–Ω\n‚Ä¢ –±—É—Ç—ã–ª–∫–∞")
      return
    }

    if (amountMl < 50 || amountMl > 5000) {
      await sendMessage(message.chat.id, "‚ùå –û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50–º–ª –¥–æ 5–ª")
      return
    }

    try {
      const { data: result, error } = await supabase
        .rpc('log_water_intake', {
          p_user_id: user.id,
          p_amount_ml: amountMl,
          p_note: null
        })

      if (error || !result.success) {
        throw new Error('Failed to log water')
      }

      const todayTotalL = (result.today_total_ml / 1000).toFixed(1)
      const targetL = (result.target_ml / 1000).toFixed(1)
      const progressPercent = Math.round((result.today_total_ml / result.target_ml) * 100)
      const amountL = (amountMl / 1000).toFixed(1)

      let messageText = `‚úÖ **–í–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: ${amountL}–ª**\n\n`
      messageText += `üíß –°–µ–≥–æ–¥–Ω—è: **${todayTotalL}–ª** / ${targetL}–ª (${progressPercent}%)\n\n`

      if (result.remaining_ml > 0) {
        const remainingL = (result.remaining_ml / 1000).toFixed(1)
        messageText += `üìå –û—Å—Ç–∞–ª–æ—Å—å: **${remainingL}–ª**`
      } else {
        messageText += `üéâ **–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!**`
      }

      await clearUserState(userId)
      await sendMessage(message.chat.id, messageText, {
        inline_keyboard: [
          [{ text: "üíß –ï—â–µ –≤–æ–¥—ã", callback_data: "quick_log_water" }],
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      })
    } catch (error) {
      console.error('Error logging water:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–¥—ã")
    }
  }

  // üî• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ - –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
  else if (stateData.state === 'naming_recipe') {
    if (!message.text) return

    const recipeName = message.text.trim()
    const recipeText = stateData.data?.recipeText || ''

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ö–ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–∞
    const caloriesMatch = recipeText.match(/(\d+)\s*–∫–∫–∞–ª/i)
    const proteinMatch = recipeText.match(/–±–µ–ª–∫[–∞-—è]*:\s*(\d+)/i)
    const fatsMatch = recipeText.match(/–∂–∏—Ä[–∞-—è]*:\s*(\d+)/i)
    const carbsMatch = recipeText.match(/—É–≥–ª–µ–≤–æ–¥[–∞-—è]*:\s*(\d+)/i)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç
    const { error } = await supabase
      .from('saved_recipes')
      .insert({
        user_id: user.id,
        name: recipeName,
        content: recipeText,
        calories: caloriesMatch ? parseInt(caloriesMatch[1]) : null,
        protein: proteinMatch ? parseInt(proteinMatch[1]) : null,
        fats: fatsMatch ? parseInt(fatsMatch[1]) : null,
        carbs: carbsMatch ? parseInt(carbsMatch[1]) : null,
        created_at: new Date().toISOString()
      })

    if (error) {
      console.error('Error saving recipe:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
      return
    }

    await clearUserState(userId)
    await sendMessage(
      message.chat.id,
      `‚úÖ **–†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n` +
      `üìñ "${recipeName}"\n\n` +
      `–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ **–ú–æ—ë –º–µ–Ω—é ‚Üí –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã**`,
      {
        inline_keyboard: [
          [{ text: "üìñ –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data: "my_recipes" }],
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }

  // üî• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞ - –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
  else if (stateData.state === 'naming_meal_plan') {
    if (!message.text) return

    const mealPlanName = message.text.trim()
    const mealPlanText = stateData.data?.mealPlanText || ''

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Ü–∏–æ–Ω
    const { error } = await supabase
      .from('saved_recipes')
      .insert({
        user_id: user.id,
        name: mealPlanName,
        content: mealPlanText,
        is_meal_plan: true,
        created_at: new Date().toISOString()
      })

    if (error) {
      console.error('Error saving meal plan:', error)
      await sendMessage(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
      return
    }

    await clearUserState(userId)
    await sendMessage(
      message.chat.id,
      `‚úÖ **–†–∞—Ü–∏–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n` +
      `üìñ "${mealPlanName}"\n\n` +
      `–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ **–ú–æ—ë –º–µ–Ω—é ‚Üí –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã**`,
      {
        inline_keyboard: [
          [{ text: "üìñ –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data: "my_recipes" }],
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  }

  // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  else {
    console.log('Unhandled state:', stateData?.state, 'with text:', message.text)
    await sendMessage(
      message.chat.id,
      "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
      getMainKeyboard()
    )
  }
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
 */
async function handleNavigationButtons(message: TelegramMessage, user: any) {
  const text = message.text?.trim()
  const chatId = message.chat.id

  switch (text) {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    case 'üîô –ù–∞–∑–∞–¥':
      await clearUserState(message.from.id)
      await sendMessage(chatId, "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**", getMainKeyboard())
      break

    // üî• –ù–û–í–´–ï –ì–õ–ê–í–ù–´–ï –ö–ù–û–ü–ö–ò (3 —à—Ç)
    case 'üìä –î–Ω–µ–≤–Ω–∏–∫':
      await showDiary(chatId, user.id)
      break

    case 'üìñ –†–µ—Ü–µ–ø—Ç—ã':
      await sendMessage(
        chatId,
        `üìñ **–†–µ—Ü–µ–ø—Ç—ã**\n\n` +
        `–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ —Ä–µ—Ü–µ–ø—Ç—ã.\n\n` +
        `**üçΩ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã** - –±—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\n` +
        `**üìñ –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏\n` +
        `**üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Ü–∏–æ–Ω–∞`,
        myMenuKeyboard()
      )
      break

    // üî• –ö–Ω–æ–ø–∫–∞: –í–æ–¥–∞ (inline –≤—ã–±–æ—Ä –æ–±—ä–µ–º–∞)
    case 'üíß –í–æ–¥–∞':
      await sendMessage(
        chatId,
        `üíß **–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª?**\n\n–í—ã–±–µ—Ä–∏ –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –æ–±—ä–µ–º:`,
        quickWaterKeyboard()
      )
      break

    // üî• –ö–Ω–æ–ø–∫–∞: –ú–æ–π –¥–µ–Ω—å (—Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ + actions)
    case 'üìä –ú–æ–π –¥–µ–Ω—å':
      await showDiary(chatId, user.id)
      break

    // üî• –ö–Ω–æ–ø–∫–∞: –ú–æ—ë –º–µ–Ω—é (—à–∞–±–ª–æ–Ω—ã + —Ä–µ—Ü–µ–ø—Ç—ã)
    case 'üìñ –ú–æ—ë –º–µ–Ω—é':
      await sendMessage(
        chatId,
        `üìñ **–ú–æ—ë –º–µ–Ω—é**\n\n` +
        `–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ —Ä–µ—Ü–µ–ø—Ç—ã.\n\n` +
        `**üçΩ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã** - –±—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\n` +
        `**üìñ –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏\n` +
        `**üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Ü–∏–æ–Ω–∞`,
        myMenuKeyboard()
      )
      break

    // üî• –ö–Ω–æ–ø–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å
    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
      await sendMessage(
        chatId,
        `üë§ **–ü—Ä–æ—Ñ–∏–ª—å**\n\n` +
        `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º, —Ü–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π:`,
        settingsMenuKeyboard()
      )
      break

    // üî• –ö–Ω–æ–ø–∫–∞: –ü–æ–º–æ—â—å (–º–∞–Ω—É–∞–ª)
    case '‚ùì –ü–æ–º–æ—â—å':
      await sendMessage(
        chatId,
        `‚ùì **–ü–æ–º–æ—â—å**\n\n` +
        `**–£–º–Ω—ã–π —á–∞—Ç:**\n` +
        `–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –≤ —á–∞—Ç - —è —Å–∞–º –ø–æ–π–º—É —á—Ç–æ –¥–µ–ª–∞—Ç—å!\n` +
        `‚Ä¢ "—Å—ä–µ–ª –æ–≤—Å—è–Ω–∫—É 60–≥, –±–∞–Ω–∞–Ω" ‚Üí –∑–∞–ø–∏—à—É –ø—Ä–∏–µ–º\n` +
        `‚Ä¢ "–≤—ã–ø–∏–ª 500–º–ª –≤–æ–¥—ã" ‚Üí –∑–∞–ø–∏—à—É –≤–æ–¥—É\n` +
        `‚Ä¢ "—á—Ç–æ –Ω–∞ —É–∂–∏–Ω?" ‚Üí –¥–∞–º —Ä–µ—Ü–µ–ø—Ç\n` +
        `‚Ä¢ "—è –Ω–µ –µ–º —Ä—ã–±—É" ‚Üí –∑–∞–ø–æ–º–Ω—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n\n` +
        `**–ö–Ω–æ–ø–∫–∏:**\n` +
        `üìä **–î–Ω–µ–≤–Ω–∏–∫** - –ö–ë–ñ–£, –≤–æ–¥–∞, –ø—Ä–∏–µ–º—ã –ø–∏—â–∏\n` +
        `üìñ **–†–µ—Ü–µ–ø—Ç—ã** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ —Ä–µ—Ü–µ–ø—Ç—ã\n` +
        `üë§ **–ü—Ä–æ—Ñ–∏–ª—å** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ü–µ–ª–∏, –ø–æ–¥–ø–∏—Å–∫–∞\n\n` +
        `**–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤:**\n` +
        `–ö–æ–≥–¥–∞ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ä–µ—Ü–µ–ø—Ç, –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏:\n` +
        `‚Ä¢ üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç\n` +
        `‚Ä¢ üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –ø—Ä–∏–µ–º\n` +
        `‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–ª—è —Ä–∞—Ü–∏–æ–Ω–æ–≤)\n\n` +
        `**–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∫–∞–∫ ChatGPT!`,
        {
          inline_keyboard: [
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      )
      break

    // –°–¢–ê–†–´–ï –ö–ù–û–ü–ö–ò (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    case 'üìä –ö–ë–ñ–£ + –í–æ–¥–∞':
      await showDiary(chatId, user.id)
      break

    case 'üìù –ú–æ–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏':
      await manageMeals(chatId, user.id)
      break

    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
      await showProfileMenu(chatId, user.id)
      break

    case 'üíé –ü–æ–¥–ø–∏—Å–∫–∞':
      await showSubscriptionMenu(chatId, user.id)
      break

    case 'üéØ –ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è':
      await showUserPreferencesMenu(chatId, user.id)
      break

    default:
      return false // –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
  }

  return true // –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
async function handleMealEdit(userId: number, chatId: number, dbUserId: number, mealId: number, newDescription: string) {
  try {
    await sendMessage(chatId, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...")
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    const { data: plan } = await supabase
      .from('nutrition_plans')
      .select('*')
      .eq('user_id', dbUserId)
      .eq('is_active', true)
      .single()
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
    const prompt = `–¢—ã - C.I.D., AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∫–ª–∏–µ–Ω—Ç–∞.
–û–ø–∏—Å–∞–Ω–∏–µ: "${newDescription}"
–î–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω: ${plan.calories} –∫–∫–∞–ª (–ë: ${plan.protein}–≥, –ñ: ${plan.fats}–≥, –£: ${plan.carbs}–≥)
‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ô –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –¢–ê–ë–õ–ò–¶–´ –ë–ñ–£:
- –¢—É–Ω–µ—Ü –∑–∞–ø–µ—á–µ–Ω–Ω—ã–π/–æ—Ç–≤–∞—Ä–Ω–æ–π: ~130-150 –∫–∫–∞–ª/100–≥, –ë: 28-30–≥, –ñ: 1-2–≥, –£: 0–≥
- –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞: ~110 –∫–∫–∞–ª/100–≥, –ë: 23–≥, –ñ: 1.2–≥
- –†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π: ~130 –∫–∫–∞–ª/100–≥, –ë: 2.7–≥, –ñ: 0.3–≥, –£: 28–≥
- –§–µ—Ç–∞–∫—Å–∞ (—Å—ã—Ä —Ñ–µ—Ç–∞): ~260 –∫–∫–∞–ª/100–≥, –ë: 16–≥, –ñ: 21–≥, –£: 1–≥
- –û–≤–æ—â–∏ —Å–≤–µ–∂–∏–µ: ~15-20 –∫–∫–∞–ª/100–≥
- –¢–≤–æ—Ä–æ–≥ –æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π (0-2%): ~70-80 –∫–∫–∞–ª/100–≥, –ë: 16-18–≥, –ñ: 0.5-2–≥, –£: 2-3–≥
- –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç 0%: ~60-70 –∫–∫–∞–ª/100–≥, –ë: 10-11–≥, –ñ: 0-0.5–≥, –£: 4-5–≥
- –û—Ä–µ—Ö–∏ (–º–∏–Ω–¥–∞–ª—å, –≥—Ä–µ—Ü–∫–∏–π, –∫–µ—à—å—é): ~600-650 –∫–∫–∞–ª/100–≥, –ë: 15-20–≥, –ñ: 50-60–≥, –£: 10-15–≥
- –ê—Ä–∞—Ö–∏—Å: ~550 –∫–∫–∞–ª/100–≥, –ë: 26–≥, –ñ: 45–≥, –£: 10–≥
‚ö†Ô∏è –ü–†–ò–ú–ï–†–´ –†–ê–°–ß–ï–¢–û–í (–°–¢–†–û–ì–û –°–õ–ï–î–£–ô):
–ü—Ä–∏–º–µ—Ä 1: "–û—Ä–µ—Ö–∏ 70–≥"
- –ù–∞ 100–≥: 620 –∫–∫–∞–ª, –ë:18–≥, –ñ:55–≥, –£:12–≥
- –ù–∞ 70–≥: 620*0.7=434 –∫–∫–∞–ª, –ë:12.6–≥, –ñ:38.5–≥, –£:8.4–≥
–ü—Ä–∏–º–µ—Ä 2: "–¢–≤–æ—Ä–æ–≥ 250–≥"
- –ù–∞ 100–≥: 75 –∫–∫–∞–ª, –ë:17–≥, –ñ:1–≥, –£:2.5–≥
- –ù–∞ 250–≥: 187.5 –∫–∫–∞–ª, –ë:42.5–≥, –ñ:2.5–≥, –£:6.25–≥
–ó–∞–¥–∞—á–∏:
1. –†–∞—Å—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞
2. –†–∞—Å–ø–∏—à–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É (–Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–µ—Å, –ö–ë–ñ–£)
3. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
–í–µ—Ä–Ω–∏ JSON:
{
  "calories": —á–∏—Å–ª–æ,
  "protein": —á–∏—Å–ª–æ,
  "fats": —á–∏—Å–ª–æ,
  "carbs": —á–∏—Å–ª–æ,
  "breakdown": [
    {
      "product": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
      "weight": "–≤–µ—Å —Å –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è",
      "calories": —á–∏—Å–ª–æ,
      "protein": —á–∏—Å–ª–æ,
      "fats": —á–∏—Å–ª–æ,
      "carbs": —á–∏—Å–ª–æ
    }
  ],
  "comment": "–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
}`
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: '–¢—ã C.I.D. - AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–¢–†–û–ì–û –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–∞–±–ª–∏—Ü—ã –ë–ñ–£ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∑–Ω–∞—á–µ–Ω–∏—è. –î–ª—è –æ—Ä–µ—Ö–æ–≤ –í–°–ï–ì–î–ê: ~620 –∫–∫–∞–ª/100–≥, –ñ:55–≥ (–ú–ù–û–ì–û –∂–∏—Ä–æ–≤!), –£:12–≥ (–º–∞–ª–æ —É–≥–ª–µ–≤–æ–¥–æ–≤!). –ü—Ä–∏–º–µ—Ä: 70–≥ –æ—Ä–µ—Ö–æ–≤ = 434 –∫–∫–∞–ª, –ñ:38.5–≥, –£:8.4–≥. –ë—É–¥—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–º –ø—Ä–∏ —É–º–Ω–æ–∂–µ–Ω–∏–∏ –Ω–∞ –≤–µ—Å.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1,
        response_format: { type: 'json_object' },
        max_tokens: 500
      })
    })
    const data = await response.json()
    const rawAnalysis = JSON.parse(data.choices[0].message.content)

    // ‚ö° –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–Ø –ö–ë–ñ–£
    const validated = validateNutrition(rawAnalysis)
    console.log('Validated nutrition (edit):', JSON.stringify(validated))

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const analysis = {
      ...rawAnalysis,
      calories: validated.calories,
      protein: validated.protein,
      fats: validated.fats,
      carbs: validated.carbs,
      breakdown: validated.breakdown
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    const { error } = await supabase
      .from('food_logs')
      .update({
        description: newDescription,
        calories: analysis.calories,
        protein: analysis.protein,
        fats: analysis.fats,
        carbs: analysis.carbs
      })
      .eq('id', mealId)
      .eq('user_id', dbUserId)

    if (error) {
      throw error
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
    let breakdownText = ''
    if (analysis.breakdown && analysis.breakdown.length > 0) {
      breakdownText = '\n\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n'
      analysis.breakdown.forEach((item: any, index: number) => {
        breakdownText += `\n${index + 1}. ${item.product} (${item.weight})`
        breakdownText += `\n   üî• ${item.calories} –∫–∫–∞–ª | ü•© –ë: ${item.protein}–≥ | ü•ë –ñ: ${item.fats}–≥ | üçû –£: ${item.carbs}–≥`
      })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ–± –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    let validationText = ''
    if (validated.corrected && validated.notes.length > 0) {
      validationText = `\n\n‚ö†Ô∏è **–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è:**\n${validated.notes.join('\n')}`
    }

    const resultText = `‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!
üî• –ö–∞–ª–æ—Ä–∏–∏: ${analysis.calories} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: ${analysis.protein}–≥
ü•ë –ñ–∏—Ä—ã: ${analysis.fats}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${analysis.carbs}–≥${breakdownText}
üí¨ ${analysis.comment}${validationText}`
    
    await sendMessage(chatId, resultText, {
      inline_keyboard: [
        [{ text: "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞–º–∏", callback_data: "manage_meals" }],
        [{ text: "üìä –î–Ω–µ–≤–Ω–∏–∫", callback_data: "diary" }],
        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
      ]
    })
    
    await clearUserState(userId)
  } catch (error) {
    console.error('Error editing meal:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
  }
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
async function handleParameterEdit(userId: number, chatId: number, dbUserId: number, param: string, value: string) {
  try {
    if (['calories', 'protein', 'fats', 'carbs', 'water'].includes(param)) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–ë–ñ–£
      const { data: currentPlan } = await supabase
        .from('nutrition_plans')
        .select('*')
        .eq('user_id', dbUserId)
        .eq('is_active', true)
        .single()
      
      const numValue = parseFloat(value)
      if (isNaN(numValue)) {
        await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
      }
      
      const updates: any = {}
      
      if (param === 'calories') {
        updates.calories = Math.round(numValue)
      } else if (param === 'protein') {
        updates.protein = numValue
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏: –ë √ó 4 + –ñ √ó 9 + –£ √ó 4
        const proteinCalories = numValue * 4
        const fatsCalories = currentPlan.fats * 9
        const carbsCalories = currentPlan.carbs * 4
        const totalCalories = proteinCalories + fatsCalories + carbsCalories
        updates.calories = Math.round(totalCalories)
      } else if (param === 'fats') {
        updates.fats = numValue
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏: –ë √ó 4 + –ñ √ó 9 + –£ √ó 4
        const proteinCalories = currentPlan.protein * 4
        const fatsCalories = numValue * 9
        const carbsCalories = currentPlan.carbs * 4
        const totalCalories = proteinCalories + fatsCalories + carbsCalories
        updates.calories = Math.round(totalCalories)
      } else if (param === 'carbs') {
        updates.carbs = numValue
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏: –ë √ó 4 + –ñ √ó 9 + –£ √ó 4
        const proteinCalories = currentPlan.protein * 4
        const fatsCalories = currentPlan.fats * 9
        const carbsCalories = numValue * 4
        const totalCalories = proteinCalories + fatsCalories + carbsCalories
        updates.calories = Math.round(totalCalories)
      } else if (param === 'water') {
        updates.water = numValue
      }
      
      console.log('Recalculating calories:', {
        param,
        value: numValue,
        currentCalories: currentPlan.calories,
        newCalories: updates.calories
      })
      
      await supabase
        .from('nutrition_plans')
        .update(updates)
        .eq('id', currentPlan.id)
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
      const { data: updatedPlan } = await supabase
        .from('nutrition_plans')
        .select('*')
        .eq('id', currentPlan.id)
        .single()
      
      const { data: profile } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', dbUserId)
        .single()
      
      const cardText = formatNutritionCard(updatedPlan, profile)
      await sendMessage(chatId, cardText, nutritionCardKeyboard())
      
    } else if (['name', 'weight', 'height', 'age'].includes(param)) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
      const updates: any = {}
      
      if (param === 'name') {
        updates.name = value
      } else if (param === 'weight') {
        const numValue = parseFloat(value)
        if (isNaN(numValue) || numValue < 30 || numValue > 300) {
          await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
          return
        }
        updates.current_weight = numValue
      } else if (param === 'height') {
        const numValue = parseFloat(value)
        if (isNaN(numValue) || numValue < 100 || numValue > 250) {
          await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)")
          return
        }
        updates.height = numValue
      } else if (param === 'age') {
        const numValue = parseInt(value)
        if (isNaN(numValue) || numValue < 10 || numValue > 120) {
          await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120 –ª–µ—Ç)")
          return
        }
        updates.age = numValue
      }
      
      await supabase
        .from('user_profiles')
        .update(updates)
        .eq('user_id', dbUserId)
      
      await sendMessage(chatId, "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    }
    
    await clearUserState(userId)
  } catch (error) {
    console.error('Error editing parameter:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
  }
}
/**
 * –ó–∞–ø–∏—Å—å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥—ã
 */
async function handleWaterLogging(userId: number, chatId: number, dbUserId: number, text: string) {
  try {
    await sendMessage(chatId, "üíß –õ–æ–≥–∏—Ä—É—é –≤–æ–¥—É...")

    // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const lowerText = text.toLowerCase()

    let amountMl = 0

    // –ò—â–µ–º –º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã
    const mlMatch = lowerText.match(/(\d+)\s*(–º–ª|–º–∏–ª–ª–∏–ª–∏—Ç—Ä)/i)
    if (mlMatch) {
      amountMl = parseInt(mlMatch[1])
    }

    // –ò—â–µ–º –ª–∏—Ç—Ä—ã
    const literMatch = lowerText.match(/(\d+(?:[.,]\d+)?)\s*(–ª|–ª–∏—Ç—Ä)/i)
    if (literMatch && amountMl === 0) {
      const liters = parseFloat(literMatch[1].replace(',', '.'))
      amountMl = Math.round(liters * 1000)
    }

    // –ò—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –µ–º–∫–æ—Å—Ç–∏
    if (amountMl === 0) {
      if (/(—Å—Ç–∞–∫–∞–Ω|—Å—Ç–∞–∫)/i.test(lowerText)) amountMl = 250
      else if (/(–±—É—Ç—ã–ª–∫)/i.test(lowerText)) amountMl = 500
      else if (/(–∫—Ä—É–∂–∫|—á–∞—à–∫)/i.test(lowerText)) amountMl = 300
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
    if (amountMl === 0 || amountMl > 5000) {
      await sendMessage(
        chatId,
        `üíß **–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª?**\n\n` +
        `–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n` +
        `‚Ä¢ –í –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö: "500 –º–ª"\n` +
        `‚Ä¢ –í –ª–∏—Ç—Ä–∞—Ö: "1.5 –ª"\n` +
        `‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: "—Å—Ç–∞–∫–∞–Ω", "–±—É—Ç—ã–ª–∫–∞"`,
        {
          inline_keyboard: [
            [
              { text: "250 –º–ª", callback_data: "log_water_250" },
              { text: "500 –º–ª", callback_data: "log_water_500" }
            ],
            [
              { text: "1 –ª–∏—Ç—Ä", callback_data: "log_water_1000" },
              { text: "1.5 –ª–∏—Ç—Ä–∞", callback_data: "log_water_1500" }
            ],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_action" }]
          ]
        }
      )
      return
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–¥—É
    const { data: result, error } = await supabase
      .rpc('log_water_intake', {
        p_user_id: dbUserId,
        p_amount_ml: amountMl,
        p_note: null
      })

    if (error || !result.success) {
      throw new Error('Failed to log water')
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const todayTotalL = (result.today_total_ml / 1000).toFixed(1)
    const targetL = (result.target_ml / 1000).toFixed(1)
    const remainingL = (result.remaining_ml / 1000).toFixed(1)
    const progressPercent = result.progress_percent

    let progressBar = ''
    const filledSegments = Math.floor(progressPercent / 10)
    for (let i = 0; i < 10; i++) {
      progressBar += i < filledSegments ? 'üíß' : '‚ö™'
    }

    let messageText = `‚úÖ **–í–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!**\n\n`
    messageText += `üíß **+${amountMl} –º–ª**\n\n`
    messageText += `üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n`
    messageText += `${progressBar} ${progressPercent}%\n\n`
    messageText += `üíß –í—ã–ø–∏—Ç–æ: **${todayTotalL}–ª** / ${targetL}–ª\n`

    if (result.remaining_ml > 0) {
      messageText += `üìå –û—Å—Ç–∞–ª–æ—Å—å: **${remainingL}–ª**`
    } else {
      messageText += `üéâ **–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!** –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!`
    }

    await sendMessage(chatId, messageText, {
      inline_keyboard: [
        [
          { text: "üíß –ï—â–µ –≤–æ–¥—ã", callback_data: "quick_log_water" },
          { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "water_stats" }
        ],
        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
      ]
    })

  } catch (error) {
    console.error('Error logging water:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
  }
}

async function handleFoodLogging(userId: number, chatId: number, dbUserId: number, foodDescription: string, clarificationAttempt: number = 0) {
  try {
    await sendMessage(chatId, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏...")
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    const { data: plan } = await supabase
      .from('nutrition_plans')
      .select('*')
      .eq('user_id', dbUserId)
      .eq('is_active', true)
      .single()
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0]
    const { data: todayLogs } = await supabase
      .from('food_logs')
      .select('*')
      .eq('user_id', dbUserId)
      .gte('logged_at', `${today}T00:00:00`)
      .order('logged_at', { ascending: false })
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ OpenAI
    const clarificationNote = clarificationAttempt > 0 
      ? '\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ö–ª–∏–µ–Ω—Ç —É–∂–µ –¥–∞–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –†–∞–±–æ—Ç–∞–π —Å —Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —á—Ç–æ –µ—Å—Ç—å. –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£.'
      : `\n1. –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ—Ä—å –ö–ê–ñ–î–´–ô –ø—Ä–æ–¥—É–∫—Ç: –µ—Å–ª–∏ —Ä—è–¥–æ–º —Å –Ω–∏–º –£–ñ–ï —É–∫–∞–∑–∞–Ω—ã –≥—Ä–∞–º–º—ã/–º–ª/—à—Ç—É–∫–∏ - –≤–µ—Å –µ—Å—Ç—å!
2. –î–ª—è –±–ª—é–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±—ä–µ–º–∞ ("—Ç–∞—Ä–µ–ª–∫–∞ —Å—É–ø–∞", "—Å–∞–ª–∞—Ç 350–≥") - –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
3. –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ —É–∫–∞–∑–∞–Ω –≤–µ—Å (–¥–∞–∂–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π) - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –ö–ë–ñ–£, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π —É—Ç–æ—á–Ω–µ–Ω–∏–µ
4. –ó–∞–ø—Ä–∞—à–∏–≤–∞–π —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
–ü—Ä–∏–º–µ—Ä—ã:
- "–±–∞–Ω–∞–Ω 150–≥, —è–±–ª–æ–∫–æ 200–≥" ‚Üí –≤—Å–µ –≤–µ—Å–∞ –µ—Å—Ç—å, —Å—á–∏—Ç–∞–π
- "—Ç–∞—Ä–µ–ª–∫–∞ —Å—É–ø–∞ 250–º–ª, —Å–∞–ª–∞—Ç 350–≥" ‚Üí –≤—Å–µ –≤–µ—Å–∞ –µ—Å—Ç—å, —Å—á–∏—Ç–∞–π  
- "–±–∞–Ω–∞–Ω, —è–±–ª–æ–∫–æ" ‚Üí —Å–ø—Ä–æ—Å–∏: "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å"`
    
    const prompt = `–¢—ã - C.I.D., AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∫–ª–∏–µ–Ω—Ç–∞.
–û–ø–∏—Å–∞–Ω–∏–µ: "${foodDescription}"
–î–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω: ${plan.calories} –∫–∫–∞–ª (–ë: ${plan.protein}–≥, –ñ: ${plan.fats}–≥, –£: ${plan.carbs}–≥)
–ó–∞–¥–∞—á–∏:${clarificationNote}
4. –†–∞—Å—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞
5. –†–∞—Å–ø–∏—à–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É (–Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–µ—Å, –ö–ë–ñ–£)
6. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ª–∏ –≤ –ø–ª–∞–Ω)
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –í–°–ï–ì–î–ê —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –ö–ë–ñ–£ –µ—Å–ª–∏ –µ—Å—Ç—å –•–û–¢–¨ –ö–ê–ö–ê–Ø-–¢–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ/–≤–µ—Å–µ
- –ò–≥–Ω–æ—Ä–∏—Ä—É–π –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Å–ª–æ–≤–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–æ–∫—É—Ä—Ü–æ–≤" = –æ–≥—É—Ä—Ü–æ–≤, "–º–∏–ª–∏–ª–∏—Ç—Ä–æ–≤" = –º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤)
- –î–ª—è –±–ª—é–¥ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã (—Å—É–ø –æ–≤–æ—â–Ω–æ–π ~40-50 –∫–∫–∞–ª/100–≥, —Å–∞–ª–∞—Ç –∏–∑ –æ–≤–æ—â–µ–π ~30-40 –∫–∫–∞–ª/100–≥)
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–º (250–º–ª, 350–≥) - —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π —É—Ç–æ—á–Ω–µ–Ω–∏–µ!
‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ô –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –¢–ê–ë–õ–ò–¶–´ –ë–ñ–£:
- –¢—É–Ω–µ—Ü –∑–∞–ø–µ—á–µ–Ω–Ω—ã–π/–æ—Ç–≤–∞—Ä–Ω–æ–π: ~130-150 –∫–∫–∞–ª/100–≥, –ë: 28-30–≥, –ñ: 1-2–≥, –£: 0–≥
- –¢—É–Ω–µ—Ü –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –º–∞—Å–ª–µ: ~200 –∫–∫–∞–ª/100–≥
- –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞: ~110 –∫–∫–∞–ª/100–≥, –ë: 23–≥, –ñ: 1.2–≥
- –†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π: ~130 –∫–∫–∞–ª/100–≥, –ë: 2.7–≥, –ñ: 0.3–≥, –£: 28–≥
- –§–µ—Ç–∞–∫—Å–∞ (—Å—ã—Ä —Ñ–µ—Ç–∞): ~260 –∫–∫–∞–ª/100–≥, –ë: 16–≥, –ñ: 21–≥, –£: 1–≥
- –û–≤–æ—â–∏ —Å–≤–µ–∂–∏–µ (–æ–≥—É—Ä—Ü—ã/–ø–æ–º–∏–¥–æ—Ä—ã): ~15-20 –∫–∫–∞–ª/100–≥
- –¢–≤–æ—Ä–æ–≥ –æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π (0-2%): ~70-80 –∫–∫–∞–ª/100–≥, –ë: 16-18–≥, –ñ: 0.5-2–≥, –£: 2-3–≥
- –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç 0%: ~60-70 –∫–∫–∞–ª/100–≥, –ë: 10-11–≥, –ñ: 0-0.5–≥, –£: 4-5–≥
- –û—Ä–µ—Ö–∏ (–º–∏–Ω–¥–∞–ª—å, –≥—Ä–µ—Ü–∫–∏–π, –∫–µ—à—å—é): ~600-650 –∫–∫–∞–ª/100–≥, –ë: 15-20–≥, –ñ: 50-60–≥, –£: 10-15–≥
- –ê—Ä–∞—Ö–∏—Å: ~550 –∫–∫–∞–ª/100–≥, –ë: 26–≥, –ñ: 45–≥, –£: 10–≥
‚ö†Ô∏è –ë–£–î–¨ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ú:
- –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –í–°–ï–ì–î–ê –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü –ë–ñ–£, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∑–Ω–∞—á–µ–Ω–∏—è
- –î–ª—è "–∑–∞–ø–µ—á–µ–Ω–Ω–æ–≥–æ —Ç—É–Ω—Ü–∞" –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π ~130-150 –∫–∫–∞–ª/100–≥
–ü—Ä–∏–º–µ—Ä—ã:
‚úÖ "—Ç–∞—Ä–µ–ª–∫–∞ —Å—É–ø–∞ 250–º–ª, —Å–∞–ª–∞—Ç 350–≥" ‚Üí –µ—Å—Ç—å –≤–µ—Å, —Å—á–∏—Ç–∞–π –ö–ë–ñ–£
‚úÖ "–±–∞–Ω–∞–Ω 150–≥" ‚Üí –µ—Å—Ç—å –≤–µ—Å, —Å—á–∏—Ç–∞–π
‚úÖ "–ø–æ—Ä—Ü–∏—è –∫—É—Ä–∏—Ü—ã 200–≥" ‚Üí –µ—Å—Ç—å –≤–µ—Å, —Å—á–∏—Ç–∞–π
‚ùå "–±–∞–Ω–∞–Ω" ‚Üí –Ω–µ—Ç –≤–µ—Å–∞, –∑–∞–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
‚ö†Ô∏è –ü–†–ò–ú–ï–†–´ –†–ê–°–ß–ï–¢–û–í (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–õ–ï–î–£–ô –≠–¢–û–ô –õ–û–ì–ò–ö–ï):
–ü—Ä–∏–º–µ—Ä 1: "–û—Ä–µ—Ö–∏ 70–≥"
- –ù–∞ 100–≥: 620 –∫–∫–∞–ª, –ë:18–≥, –ñ:55–≥, –£:12–≥
- –ù–∞ 70–≥: 620*0.7=434 –∫–∫–∞–ª, –ë:18*0.7=12.6–≥, –ñ:55*0.7=38.5–≥, –£:12*0.7=8.4–≥
–ü—Ä–∏–º–µ—Ä 2: "–¢–≤–æ—Ä–æ–≥ –æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π 250–≥"
- –ù–∞ 100–≥: 75 –∫–∫–∞–ª, –ë:17–≥, –ñ:1–≥, –£:2.5–≥
- –ù–∞ 250–≥: 75*2.5=187.5 –∫–∫–∞–ª, –ë:17*2.5=42.5–≥, –ñ:1*2.5=2.5–≥, –£:2.5*2.5=6.25–≥
‚ö†Ô∏è –ù–ò–ö–û–ì–î–ê –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π 0 –∫–∞–ª–æ—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ!
–í–µ—Ä–Ω–∏ JSON:
{
  "need_clarification": true/false,
  "clarification_question": "–≤–æ–ø—Ä–æ—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ",
  "calories": —á–∏—Å–ª–æ,
  "protein": —á–∏—Å–ª–æ,
  "fats": —á–∏—Å–ª–æ,
  "carbs": —á–∏—Å–ª–æ,
  "breakdown": [
    {
      "product": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
      "weight": "–≤–µ—Å —Å –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è",
      "calories": —á–∏—Å–ª–æ,
      "protein": —á–∏—Å–ª–æ,
      "fats": —á–∏—Å–ª–æ,
      "carbs": —á–∏—Å–ª–æ
    }
  ],
  "comment": "–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
}`
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: '–¢—ã C.I.D. - AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–¢–†–û–ì–û –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–∞–±–ª–∏—Ü—ã –ë–ñ–£ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∑–Ω–∞—á–µ–Ω–∏—è. –î–ª—è –æ—Ä–µ—Ö–æ–≤ –í–°–ï–ì–î–ê: ~620 –∫–∫–∞–ª/100–≥, –ñ:55–≥ (–ú–ù–û–ì–û –∂–∏—Ä–æ–≤!), –£:12–≥ (–º–∞–ª–æ —É–≥–ª–µ–≤–æ–¥–æ–≤!). –ü—Ä–∏–º–µ—Ä: 70–≥ –æ—Ä–µ—Ö–æ–≤ = 434 –∫–∫–∞–ª, –ñ:38.5–≥, –£:8.4–≥. –ë—É–¥—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–º –ø—Ä–∏ —É–º–Ω–æ–∂–µ–Ω–∏–∏ –Ω–∞ –≤–µ—Å.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1,
        response_format: { type: 'json_object' },
        max_tokens: 500
      })
    })
    const data = await response.json()
    console.log('OpenAI response for food logging:', JSON.stringify(data))

    const rawAnalysis = JSON.parse(data.choices[0].message.content)
    console.log('Parsed analysis:', JSON.stringify(rawAnalysis))

    // –í–ê–õ–ò–î–ê–¶–ò–Ø: –ï—Å–ª–∏ calories === 0 –∏–ª–∏ undefined, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    if (!rawAnalysis.calories || rawAnalysis.calories === 0) {
      console.error('Invalid analysis result - zero calories:', rawAnalysis)
      await sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ (—É–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤).")
      await clearUserState(userId)
      return
    }

    // ‚ö° –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–Ø –ö–ë–ñ–£
    const validated = validateNutrition(rawAnalysis)
    console.log('Validated nutrition:', JSON.stringify(validated))

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const analysis = {
      ...rawAnalysis,
      calories: validated.calories,
      protein: validated.protein,
      fats: validated.fats,
      carbs: validated.carbs,
      breakdown: validated.breakdown
    }

    // –†–∞–∑—Ä–µ—à–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if (rawAnalysis.need_clarification && clarificationAttempt === 0) {
      // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã!
      await setUserState(userId, 'logging_food', { 
        clarification_attempt: 1,
        original_description: foodDescription
      })
      await sendMessage(chatId, `‚ùì ${analysis.clarification_question}`, {
        inline_keyboard: [[{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]]
      })
      return
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∞–µ–º ID
    const { data: savedLog, error: saveError } = await supabase
      .from('food_logs')
      .insert({
        user_id: dbUserId,
        description: foodDescription, // –≠—Ç–æ —É–∂–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏—Å—Ö–æ–¥–Ω–æ–µ + —É—Ç–æ—á–Ω–µ–Ω–∏–µ)
        calories: analysis.calories,
        protein: analysis.protein,
        fats: analysis.fats,
        carbs: analysis.carbs,
        logged_at: new Date().toISOString()
      })
      .select()
      .single()
    
    if (saveError) {
      throw saveError
    }

    // üî• STREAK SYSTEM: –û–±–Ω–æ–≤–ª—è–µ–º streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let streakInfo: any = null
    try {
      const { data: streakData, error: streakError } = await supabase
        .rpc('update_user_streak', { p_user_id: dbUserId })
        .single()

      if (!streakError && streakData) {
        streakInfo = streakData
        console.log(`‚úÖ Streak updated for user ${dbUserId}:`, streakInfo)
      }
    } catch (error) {
      console.error('Error updating streak:', error)
      // –ù–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ streak –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    let breakdownText = ''
    if (analysis.breakdown && analysis.breakdown.length > 0) {
      breakdownText = '\n\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n'
      analysis.breakdown.forEach((item: any, index: number) => {
        breakdownText += `\n${index + 1}. ${item.product} (${item.weight})`
        breakdownText += `\n   üî• ${item.calories} –∫–∫–∞–ª | ü•© –ë: ${item.protein}–≥ | ü•ë –ñ: ${item.fats}–≥ | üçû –£: ${item.carbs}–≥`
      })
    }
    
    const now = new Date()
    const timeStr = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })

    // –§–æ—Ä–º–∏—Ä—É–µ–º streak –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    let streakText = ''
    if (streakInfo) {
      streakText = `\n\nüî• **Streak: ${streakInfo.current_streak} ${streakInfo.current_streak === 1 ? '–¥–µ–Ω—å' : streakInfo.current_streak < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}!**`

      if (streakInfo.is_new_record) {
        streakText += ` üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!`
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (streakInfo.earned_achievements && streakInfo.earned_achievements.length > 0) {
        streakText += `\n\nüèÜ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n${streakInfo.earned_achievements.join('\n')}`
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ–± –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    let validationText = ''
    if (validated.corrected && validated.notes.length > 0) {
      validationText = `\n\n‚ö†Ô∏è **–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è:**\n${validated.notes.join('\n')}`
    }

    const resultText = `‚úÖ **–ü—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞–ø–∏—Å–∞–Ω!**
üìù ${foodDescription}
üî• ${analysis.calories} –∫–∫–∞–ª | ü•© –ë: ${analysis.protein}–≥ | ü•ë –ñ: ${analysis.fats}–≥ | üçû –£: ${analysis.carbs}–≥${breakdownText}
‚è∞ ${timeStr}
üí¨ ${analysis.comment}${validationText}${streakText}
üí° **–°–æ–≤–µ—Ç:** –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ üì∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É!`
    
    // üî• –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï Post-action buttons
    await sendMessage(chatId, resultText, afterFoodLogKeyboard(savedLog.id))
    
    await clearUserState(userId)
  } catch (error) {
    console.error('Error logging food:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
  }
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ—Ü–µ–ø—Ç–∞
 */
async function handleRecipeRequest(userId: number, chatId: number, dbUserId: number, request: string, messageId?: number) {
  try {
    console.log(`ü§ñ handleRecipeRequest called for user ${dbUserId}`)

    // ‚ö° RATE LIMITING CHECK
    const rateLimit = await checkRateLimit(dbUserId, 30, 1) // 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    if (!rateLimit.allowed) {
      console.warn(`üö´ Rate limit exceeded for user ${dbUserId}. Retry after ${rateLimit.retryAfter}s`)
      await sendMessage(
        chatId,
        `‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ ${rateLimit.retryAfter} —Å–µ–∫—É–Ω–¥.\n\n–≠—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. üôè`,
        undefined,
        'Markdown',
        messageId
      )
      return
    }
    console.log(`‚úÖ Rate limit OK. Remaining: ${rateLimit.remaining}/30`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–¥—É–º–∞—é—â–µ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await sendMessage(chatId, "ü§î –î—É–º–∞—é...", undefined, 'Markdown', messageId)

    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    console.log(`üîç Extracting preferences from text: "${request}"`)
    const extractedPrefs = await extractPreferencesFromText(request)
    console.log(`Found ${extractedPrefs.length} preferences:`, extractedPrefs)
    
    for (const pref of extractedPrefs) {
      await saveUserPreference(
        dbUserId,
        pref.type as 'allergy' | 'intolerance' | 'dislike' | 'exclude' | 'preference',
        pref.item
      )
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`üìã Loading all user preferences...`)
    const userPreferences = await getUserPreferences(dbUserId)
    console.log(`User has ${userPreferences.length} saved preferences`)
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    const chatHistory = await getChatHistory(dbUserId, 30)
    console.log(`üìö Chat history loaded: ${chatHistory.length} messages`)
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const { data: plan } = await supabase
      .from('nutrition_plans')
      .select('*')
      .eq('user_id', dbUserId)
      .eq('is_active', true)
      .single()
    
    const today = new Date().toISOString().split('T')[0]
    const { data: todayLogs } = await supabase
      .from('food_logs')
      .select('*')
      .eq('user_id', dbUserId)
      .gte('logged_at', `${today}T00:00:00`)
    
    // –°—á–∏—Ç–∞–µ–º —Å—ä–µ–¥–µ–Ω–Ω–æ–µ
    const consumed = todayLogs?.reduce((acc, log) => ({
      calories: acc.calories + (log.calories || 0),
      protein: acc.protein + (log.protein || 0),
      fats: acc.fats + (log.fats || 0),
      carbs: acc.carbs + (log.carbs || 0)
    }), { calories: 0, protein: 0, fats: 0, carbs: 0 }) || { calories: 0, protein: 0, fats: 0, carbs: 0 }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º
    const lastMeal = todayLogs?.[0]
    const timeSinceLastMeal = lastMeal ? (Date.now() - new Date(lastMeal.logged_at).getTime()) / (1000 * 60) : 999
    
    // 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    let preferencesText = ''
    if (userPreferences.length > 0) {
      preferencesText = '\n\nüö´ –í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n'
      const allergies = userPreferences.filter(p => p.preference_type === 'allergy')
      const intolerances = userPreferences.filter(p => p.preference_type === 'intolerance')
      const excludes = userPreferences.filter(p => p.preference_type === 'exclude')
      
      if (allergies.length > 0) {
        preferencesText += `- –ê–ª–ª–µ—Ä–≥–∏—è: ${allergies.map(p => p.item).join(', ')}\n`
      }
      if (intolerances.length > 0) {
        preferencesText += `- –ù–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å: ${intolerances.map(p => p.item).join(', ')}\n`
      }
      if (excludes.length > 0) {
        preferencesText += `- –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Ä–∞—Ü–∏–æ–Ω–∞: ${excludes.map(p => p.item).join(', ')}\n`
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ª–∞–∫—Ç–æ–∑—ã
      if (intolerances.some(p => p.item.includes('–ª–∞–∫—Ç–æ–∑') || p.item.includes('–º–æ–ª–æ–∫'))) {
        preferencesText += '\n‚ö†Ô∏è –ü—Ä–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏ –ª–∞–∫—Ç–æ–∑—ã: –ú–û–ñ–ù–û —Ç–≤–æ—Ä–æ–≥ –∏ —Ç–≤–µ—Ä–¥—ã–µ —Å—ã—Ä—ã (–≤ –Ω–∏—Ö –ø–æ—á—Ç–∏ –Ω–µ—Ç –ª–∞–∫—Ç–æ–∑—ã), –Ω–æ –ù–ï–õ–¨–ó–Ø –º–æ–ª–æ–∫–æ, —Å–ª–∏–≤–∫–∏, –º—è–≥–∫–∏–µ —Å—ã—Ä—ã, –π–æ–≥—É—Ä—Ç—ã.\n'
      }
    }
    
    // 6. –î–ï–¢–ï–ö–¢–û–† –ö–û–†–†–ï–ö–¢–ò–†–û–í–û–ö - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π/–∑–∞–º–µ–Ω
    const recentUserMessages = chatHistory.filter(msg => msg.role === 'user').slice(-5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const excludedProducts: string[] = []
    const replacements: Array<{from: string, to: string}> = []

    for (const msg of recentUserMessages) {
      // –î–µ—Ç–µ–∫—Ç–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è: "—É–±–µ—Ä–∏ X", "–±–µ–∑ X", "–Ω–µ —Ö–æ—á—É X", "–Ω–µ –ª—é–±–ª—é X"
      const excludePatterns = [
        /—É–±–µ—Ä[–∏—å]\s+([–∞-—è—ë]+)/gi,
        /–±–µ–∑\s+([–∞-—è—ë]+)/gi,
        /–Ω–µ\s+(?:—Ö–æ—á—É|–ª—é–±–ª—é|–µ–º)\s+([–∞-—è—ë]+)/gi
      ]

      for (const pattern of excludePatterns) {
        const matches = [...msg.content.matchAll(pattern)]
        for (const match of matches) {
          if (match[1]) {
            excludedProducts.push(match[1])
          }
        }
      }

      // –î–µ—Ç–µ–∫—Ç–∏–º –∑–∞–º–µ–Ω—ã: "–∑–∞–º–µ–Ω–∏ X –Ω–∞ Y", "–≤–º–µ—Å—Ç–æ X –¥–∞–π Y"
      const replaceMatch = msg.content.match(/–∑–∞–º–µ–Ω[–∏—å]\s+([–∞-—è—ë]+)(?:\s+–Ω–∞\s+([–∞-—è—ë]+))?/i)
      if (replaceMatch) {
        if (replaceMatch[2]) {
          replacements.push({ from: replaceMatch[1], to: replaceMatch[2] })
        } else {
          excludedProducts.push(replaceMatch[1])
        }
      }
    }

    console.log(`üîç Detected exclusions:`, excludedProducts)
    console.log(`üîç Detected replacements:`, replacements)

    // 7. –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const lastAssistantMessage = chatHistory.length > 0
      ? chatHistory.slice().reverse().find(msg => msg.role === 'assistant')
      : null

    let contextAnalysis = ''

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å "–ø—Ä–∏—à–ª–∏ –≤—Å—ë", –¥–æ–±–∞–≤–ª—è–µ–º –ñ–ò–†–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï
    const isRequestingFullPlan = request.toLowerCase().match(/(–ø—Ä–∏—à–ª–∏|–ø–æ–∫–∞–∂–∏|–¥–∞–π).*(–≤–µ—Å—å|–≤—Å—ë|–ø–æ–ª–Ω|—Ü–µ–ª–∏–∫–æ–º|—Ä–∞—Ü–∏–æ–Ω|–ø–ª–∞–Ω)/i)

    if ((excludedProducts.length > 0 || replacements.length > 0) && isRequestingFullPlan) {
      contextAnalysis = `\n\nüö®üö®üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ü–†–û–°–ò–õ –ü–û–õ–ù–´–ô –ü–õ–ê–ù –° –£–ß–ï–¢–û–ú –ö–û–†–†–ï–ö–¢–ò–†–û–í–û–ö! üö®üö®üö®

‚õî –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï –ü–†–û–î–£–ö–¢–´ (–ù–ò–ö–û–ì–î–ê –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ò–•):
${excludedProducts.length > 0 ? excludedProducts.map(p => `- ${p}`).join('\n') : '- –Ω–µ—Ç'}

üîÑ –ó–ê–ú–ï–ù–´ –ü–†–û–î–£–ö–¢–û–í:
${replacements.length > 0 ? replacements.map(r => `- ${r.from} ‚Üí ${r.to}`).join('\n') : '- –Ω–µ—Ç'}

üìã –ß–¢–û –î–ï–õ–ê–¢–¨:
1. –ù–∞–π–¥–∏ –ü–û–õ–ù–´–ô –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–∑ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—â–∏ üïê –∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏)
2. –£–î–ê–õ–ò –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
3. –ü–†–ò–ú–ï–ù–ò –≤—Å–µ –∑–∞–º–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
4. –ü–æ–∫–∞–∂–∏ –í–ï–°–¨ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ü–µ–ª–∏–∫–æ–º
5. –ù–ï –°–û–ó–î–ê–í–ê–ô –Ω–æ–≤—ã–π –ø–ª–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞—Ä—ã–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏!

`
    }

    if (lastAssistantMessage) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–ª–∞–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      const hasMealPlan = lastAssistantMessage.content.includes('üïê') && lastAssistantMessage.content.includes('üìä –ò—Ç–æ–≥–æ')

      contextAnalysis += `\nüîç –ê–ù–ê–õ–ò–ó –ü–†–ï–î–´–î–£–©–ï–ì–û –ö–û–ù–¢–ï–ö–°–¢–ê:
${hasMealPlan ? '‚ö†Ô∏è –í –ü–†–ï–î–´–î–£–©–ò–• –°–û–û–ë–©–ï–ù–ò–Ø–• –¢–´ –£–ñ–ï –°–û–°–¢–ê–í–ò–õ –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø!' : ''}

–¢–í–û–ô –ü–û–°–õ–ï–î–ù–ò–ô –û–¢–í–ï–¢ —Å–æ–¥–µ—Ä–∂–∞–ª:
${lastAssistantMessage.content.substring(0, 1200)}${lastAssistantMessage.content.length > 1200 ? '...' : ''}

üö® –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ü–†–û–í–ï–†–¨ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ - —Ç–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏!
2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–ø—Ä–æ –∫–∞–∫–æ–π X" - –∏—â–∏ X –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
3. –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç—Ä–∏—Ü–∞–π —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏!
`
    }
    
    // 8. –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const systemMessage = `–¢—ã - C.I.D., AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç—É —Å –ø–∏—Ç–∞–Ω–∏–µ–º.
üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:
–î–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω: ${plan?.calories || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'} –∫–∫–∞–ª (–ë: ${plan?.protein || 0}–≥, –ñ: ${plan?.fats || 0}–≥, –£: ${plan?.carbs || 0}–≥)
–°—ä–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${consumed.calories} –∫–∫–∞–ª (–ë: ${consumed.protein}–≥, –ñ: ${consumed.fats}–≥, –£: ${consumed.carbs}–≥)
–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º: ${Math.round(timeSinceLastMeal)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥${preferencesText}${contextAnalysis}

üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ü–ò–©–ï–í–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
${userPreferences.length > 0 ? `
- –¢—ã –û–ë–Ø–ó–ê–ù —Å–æ–±–ª—é–¥–∞—Ç—å –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
- –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!
- –ü–µ—Ä–µ–¥ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞ –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–π —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã!
- –í—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤—ã—à–µ –∑–∞–ø–æ–º–Ω–µ–Ω—ã –ù–ê–í–°–ï–ì–î–ê - —É—á–∏—Ç—ã–≤–∞–π –∏—Ö –≤ –ö–ê–ñ–î–û–ú –æ—Ç–≤–µ—Ç–µ!
` : '- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º—è–Ω–µ—Ç - –∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ!'}

üìù –¢–í–û–ò –ó–ê–î–ê–ß–ò:
1. –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ï–†–ï–î —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!
2. –ï—Å–ª–∏ –ø—Ä–∏–µ–º –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ (<2—á) - –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–∫—É—Å/–≤–æ–¥—É –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ –ø—Ä–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ–¥
3. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é - —Å–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –°–¢–†–û–ì–û –≤ —Ä–∞–º–∫–∞—Ö –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ö–ë–ñ–£
4. –ò–Ω–∞—á–µ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Ü–µ–ø—Ç —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–∞ –ö–ë–ñ–£ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
5. –ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —ç—Ç–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥

üîÑ –í–ê–ñ–ù–û - –†–ê–ë–û–¢–ê –° –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê–ú–ò:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "–∑–∞–º–µ–Ω–∏ X", "—É–±–µ—Ä–∏ Y", "–¥–æ–±–∞–≤—å Z" –ë–ï–ó —Å–ª–æ–≤ "–ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å" - —ç—Ç–æ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê
- –ù–ï —Å–æ—Å—Ç–∞–≤–ª—è–π –Ω–æ–≤—ã–π –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω! –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏/—É–±–µ—Ä–∏/–¥–æ–±–∞–≤—å –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
- –ü—Ä–∏–º–µ—Ä: "–ú–µ–¥ –∑–∞–º–µ–Ω–∏" ‚Üí –∑–∞–º–µ–Ω–∏ –¢–û–õ–¨–ö–û –º–µ–¥ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É, –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –≤–µ—Å—å –ø–ª–∞–Ω
- –ü—Ä–∏–º–µ—Ä: "–ê–≤–æ–∫–∞–¥–æ —Ç–æ–∂–µ —É–±–µ—Ä–∏" ‚Üí —É–±–µ—Ä–∏ –¢–û–õ–¨–ö–û –∞–≤–æ–∫–∞–¥–æ, –æ—Å—Ç–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω–æ–µ
- –ü–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ø—Ä–∏–µ–º –ø–∏—â–∏ —Å –Ω–æ–≤—ã–º–∏ –ö–ë–ñ–£
- **–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û**: –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç "–ø—Ä–∏—à–ª–∏ –≤—Å—ë —Ü–µ–ª–∏–∫–æ–º", "–ø–æ–∫–∞–∂–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é", "–≤–µ—Å—å –ø–ª–∞–Ω" - –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –ù–û–í–´–ô –ø–ª–∞–Ω!
  –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–æ–∑—å–º–∏ –í–°–ï –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∏–∑ –°–í–û–ò–• –ü–†–ï–î–´–î–£–©–ò–• —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –ø—Ä–∏–º–µ–Ω–∏ –í–°–ï –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (–∑–∞–º–µ–Ω—ã/—É–¥–∞–ª–µ–Ω–∏—è) –∏ –ø–æ–∫–∞–∂–∏ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º –í–°–ï–• –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç "–Ω–æ–≤—ã–π –ø–ª–∞–Ω", "–¥—Ä—É–≥–æ–π —Ä–∞—Ü–∏–æ–Ω", "—Ä–∞—Å–ø–∏—à–∏ –∑–∞–Ω–æ–≤–æ" - —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ —Å–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –ø–ª–∞–Ω

üìè –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–†–¶–ò–ô:
- "–î–∞–≤–∞–π –ø–æ—Ä—Ü–∏–∏ —É–≤–µ–ª–∏—á–∏–º" / "–ü–æ–±–æ–ª—å—à–µ" / "–£–≤–µ–ª–∏—á—å –ø–æ—Ä—Ü–∏–∏" ‚Üí –£–í–ï–õ–ò–ß–¨ –ø–æ—Ä—Ü–∏–∏ –≤—Å–µ—Ö –±–ª—é–¥ –Ω–∞ 20-30%
- "–£–º–µ–Ω—å—à–∏ –ø–æ—Ä—Ü–∏–∏" / "–ü–æ–º–µ–Ω—å—à–µ" ‚Üí –£–ú–ï–ù–¨–®–ò –ø–æ—Ä—Ü–∏–∏ –Ω–∞ 20-30%
- "–í–µ–∑–¥–µ –ø–æ —Å—É—Ç—å" (–ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–æ—Ä—Ü–∏—è—Ö) ‚Üí –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ –í–°–ï–ú –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
- –ü–ï–†–ï–°–ß–ò–¢–ê–ô –∏—Ç–æ–≥–æ–≤—ã–µ –ö–ë–ñ–£ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ü–∏–π
- –ü–æ–∫–∞–∂–∏ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ø–ª–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏ –∏ –ö–ë–ñ–£

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –ü–†–ò –°–û–°–¢–ê–í–õ–ï–ù–ò–ò –ú–ï–ù–Æ –ù–ê –î–ï–ù–¨:
- –ò–¢–û–ì–û–í–´–ï –ö–ë–ñ–£ –î–û–õ–ñ–ù–´ –°–û–í–ü–ê–î–ê–¢–¨ –° –î–ù–ï–í–ù–´–ú –ü–õ–ê–ù–û–ú (¬±50 –∫–∫–∞–ª)
- –ü–ª–∞–Ω: ${plan?.calories || 0} –∫–∫–∞–ª, –ë: ${plan?.protein || 0}–≥, –ñ: ${plan?.fats || 0}–≥, –£: ${plan?.carbs || 0}–≥
- –ù–ï –ø—Ä–µ–≤—ã—à–∞–π —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è! –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∫–∞–ª–æ—Ä–∏–∏ –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
- –í –∫–æ–Ω—Ü–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–∫–∞–∂–∏ –∏—Ç–æ–≥–æ–≤—ã–µ –ö–ë–ñ–£ –∏ —Å—Ä–∞–≤–Ω–∏ —Å –ø–ª–∞–Ω–æ–º

‚ö†Ô∏è –í–ê–ñ–ù–û: 
- –í –æ—Ç–≤–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –ù–ï —É–ø–æ–º–∏–Ω–∞–π —Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞
- –ì–æ–≤–æ—Ä–∏ –æ–±–æ–±—â–µ–Ω–Ω–æ: "–Ω–µ–¥–∞–≤–Ω–æ –ø–æ–µ–ª", "–¥–∞–≤–Ω–æ –Ω–µ –µ–ª", "—É–∂–µ –ø–æ—Ä–∞ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å"
- –ü—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ —É–∫–∞–∑—ã–≤–∞–π –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç –ù–û–í–´–ï –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≥–æ–≤–æ—Ä–∏—Ç "–Ω–µ –µ–º X", "–Ω–µ —Ö–æ—á—É Y", "–∑–∞–º–µ–Ω–∏ Z"), 
  –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–¥—Ç–≤–µ—Ä–¥–∏: "üìã –ó–∞–ø–æ–º–Ω–∏–ª, [–ø—Ä–æ–¥—É–∫—Ç] –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å!"

üéØ –û–ë–†–ê–ë–û–¢–ö–ê –£–¢–û–ß–ù–Ø–Æ–©–ò–• –í–û–ü–†–û–°–û–í (–∞–Ω–∞—Ñ–æ—Ä—ã):
- "–ü—Ä–æ –∫–∞–∫–æ–π X?" ‚Üí –ò—â–∏ X –≤ —Å–≤–æ–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ –∏ –æ—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
- "–ß—Ç–æ –∑–∞ X?" ‚Üí –î–∞–≤–∞–π –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ X –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–ª–∞–Ω–∞
- "–†–∞—Å—Å–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç" ‚Üí –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª –±–ª—é–¥–æ/—Å–æ—É—Å - –¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∏–º–µ–Ω–Ω–æ –µ–≥–æ
- "–ê —Å–æ—É—Å?" ‚Üí –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–ª —Å–æ—É—Å - —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ–≥–æ
- "–ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ?" ‚Üí –£—Ç–æ—á–Ω–∏ —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
- –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç—Ä–∏—Ü–∞–π —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ!
üì± –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø TELEGRAM:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ (####, ###, ##)
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤: üçΩÔ∏è, ‚òÄÔ∏è, üåÜ, üåô, üìä, üî•
- –î–ª—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–∏–æ–¥—ã –¥–Ω—è –ë–ï–ó —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:
  ‚Ä¢ ‚òÄÔ∏è –£—Ç—Ä–æ - –ó–∞–≤—Ç—Ä–∞–∫
  ‚Ä¢ üåû –î–µ–Ω—å - –û–±–µ–¥
  ‚Ä¢ üåÜ –í–µ—á–µ—Ä - –£–∂–∏–Ω
  ‚Ä¢ üçé –ü–µ—Ä–µ–∫—É—Å
- –î–ª—è –ö–ë–ñ–£ –∏—Å–ø–æ–ª—å–∑—É–π: üî• 600 –∫–∫–∞–ª (–ë: 50–≥, –ñ: 15–≥, –£: 40–≥)
- –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: ‚Ä¢ –∏–ª–∏ -
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
- –ú–∞–∫—Å–∏–º—É–º 1 –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **—Ç–æ–ª—å–∫–æ** –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º
–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
‚òÄÔ∏è –£—Ç—Ä–æ - –ó–∞–≤—Ç—Ä–∞–∫
‚Ä¢ –û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ - 50–≥
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 15–≥
üî• 400 –∫–∫–∞–ª (–ë: 10–≥, –ñ: 15–≥, –£: 60–≥)
üåû –î–µ–Ω—å - –û–±–µ–¥
‚Ä¢ –ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ - 150–≥
‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 100–≥
üî• 500 –∫–∫–∞–ª (–ë: 60–≥, –ñ: 15–≥, –£: 30–≥)
üìä –ò—Ç–æ–≥–æ: 900 –∫–∫–∞–ª`
    
    // 9. –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    const messages: Array<{role: string, content: string}> = [
      { role: 'system', content: systemMessage }
    ]

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    if (chatHistory.length > 0) {
      messages.push(...chatHistory)
      console.log(`üìù Added ${chatHistory.length} history messages to context`)
    } else {
      console.log('üìù No chat history found - starting fresh conversation')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.push({ role: 'user', content: request })
    console.log(`üì® Total messages sent to OpenAI: ${messages.length} (1 system + ${chatHistory.length} history + 1 current)`)

    // 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏)
    let recommendation: string = ''
    let cacheHit = false

    // –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const shouldCache = chatHistory.length === 0 && request.length < 200
    let cacheKey = ''

    if (shouldCache) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      cacheKey = generateCacheKey('recipe', {
        request: request.toLowerCase().trim(),
        calories: plan?.calories || 0,
        preferences: userPreferences.map(p => p.item).sort()
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cachedResponse = await getFromCache(cacheKey)
      if (cachedResponse) {
        recommendation = cachedResponse
        cacheHit = true
        console.log(`üí∞ CACHE HIT! Saved OpenAI call for: "${request.substring(0, 50)}..."`)
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ - –≤—ã–∑—ã–≤–∞–µ–º OpenAI —Å retry
    if (!cacheHit) {
      console.log(`üåê CACHE MISS - calling OpenAI API...`)

      const data = await callOpenAIWithRetry(
        'https://api.openai.com/v1/chat/completions',
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: messages,
            temperature: 0.7, // –ü–æ–Ω–∏–∂–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            max_tokens: 2500 // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ä–∞—Ü–∏–æ–Ω–∞–º–∏
          })
        },
        3, // maxRetries
        30000 // timeout 30s
      )

      recommendation = data.choices[0].message.content

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à (–µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)
      if (shouldCache && cacheKey) {
        await saveToCache(
          cacheKey,
          'recipe',
          { request, calories: plan?.calories, preferences: userPreferences.map(p => p.item) },
          recommendation,
          86400 // TTL 24 —á–∞—Å–∞ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–æ–Ω–∏ –º–µ–Ω—è—é—Ç—Å—è —Ä–µ–∂–µ)
        )
      }
    }

    // 11. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    console.log(`üíæ Saving user message to chat history (length: ${request.length} chars)`)
    await saveChatMessage(dbUserId, 'user', request)
    console.log(`üíæ Saving assistant response to chat history (length: ${recommendation.length} chars)`)
    await saveChatMessage(dbUserId, 'assistant', recommendation)

    // 12. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ (—Ä–∞—Ü–∏–æ–Ω –∏–ª–∏ –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç)
    const mealMatches = recommendation.match(/(–∑–∞–≤—Ç—Ä–∞–∫|–æ–±–µ–¥|—É–∂–∏–Ω|–ø–µ—Ä–µ–∫—É—Å):/gi)
    const hasMultipleMeals = mealMatches ? mealMatches.length >= 2 : false

    // 13. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∫–∞–∫ reply –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await sendMessage(
      chatId,
      `üìã ${recommendation}`,
      aiResponseActionsKeyboard(hasMultipleMeals),
      'Markdown',
      messageId
    )
    
    // –ù–ï –æ—á–∏—â–∞–µ–º state - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞
    // –û–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∏—Å–∞—Ç—å, –¥–∏–∞–ª–æ–≥ –∏–¥–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ
    // –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥" –∏–ª–∏ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
  } catch (error) {
    console.error('Error handling recipe request:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", undefined, 'Markdown', messageId)
  }
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function handleVoiceMessage(message: TelegramMessage) {
  const userId = message.from.id
  const chatId = message.chat.id
  
  try {
    await sendMessage(chatId, "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const fileResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${message.voice!.file_id}`
    )
    const fileData = await fileResponse.json()
    
    if (!fileData.ok) {
      throw new Error('Failed to get file info')
    }
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const filePath = fileData.result.file_path
    const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`
    const audioResponse = await fetch(fileUrl)
    const audioBuffer = await audioResponse.arrayBuffer()
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Blob
    const audioBlob = new Blob([audioBuffer], { type: 'audio/ogg' })
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    const formData = new FormData()
    formData.append('file', audioBlob, 'voice.ogg')
    formData.append('model', 'whisper-1')
    formData.append('language', 'ru')
    
    const whisperResponse = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
      body: formData
    })
    
    const transcription = await whisperResponse.json()
    
    if (!transcription.text) {
      throw new Error('Failed to transcribe audio')
    }
    
    console.log('Voice transcribed:', transcription.text)
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const textMessage: TelegramMessage = {
      ...message,
      text: transcription.text
    }
    
    await handleTextMessage(textMessage)
    
  } catch (error) {
    console.error('Error handling voice message:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")
  }
}
/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–æ—Ç–æ
 */
async function getPhotoUrl(fileId: string): Promise<string | null> {
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`
    )
    const data = await response.json()
    
    if (data.ok && data.result.file_path) {
      return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
    }
    return null
  } catch (error) {
    console.error('Error getting photo URL:', error)
    return null
  }
}
/**
 * –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —Å –µ–¥–æ–π —á–µ—Ä–µ–∑ GPT-4 Vision
 */
async function analyzeFoodPhoto(photoUrl: string, caption?: string): Promise<any> {
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã/–±–ª—é–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ
2. –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å/–æ–±—ä–µ–º –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
3. –ö–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
${caption ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${caption}` : ''}
–í–ê–ñ–ù–û: –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤—ã—Å–æ–∫–æ–π.
–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "items": [
    {
      "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
      "weight": —á–∏—Å–ª–æ_–≤_–≥—Ä–∞–º–º–∞—Ö,
      "calories": —á–∏—Å–ª–æ,
      "protein": —á–∏—Å–ª–æ,
      "fats": —á–∏—Å–ª–æ,
      "carbs": —á–∏—Å–ª–æ
    }
  ],
  "total": {
    "calories": —á–∏—Å–ª–æ,
    "protein": —á–∏—Å–ª–æ,
    "fats": —á–∏—Å–ª–æ,
    "carbs": —á–∏—Å–ª–æ
  },
  "confidence": "low/medium/high",
  "notes": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏"
}`
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${OPENAI_API_KEY}`
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: prompt
            },
            {
              type: 'image_url',
              image_url: {
                url: photoUrl
              }
            }
          ]
        }
      ],
      max_tokens: 1000,
      temperature: 0.3
    })
  })
  
  const data = await response.json()
  let content = data.choices[0].message.content
  
  // –û—á–∏—â–∞–µ–º –æ—Ç markdown –±–ª–æ–∫–æ–≤ (```json ... ```)
  content = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
  
  try {
    return JSON.parse(content)
  } catch (error) {
    console.error('Error parsing GPT response:', error)
    console.error('Content:', content)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
  }
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –µ–¥–æ–π
 */
async function handlePhotoMessage(message: TelegramMessage) {
  const chatId = message.chat.id
  const userId = message.from.id
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const { data: user } = await supabase
      .from('users')
      .select('id')
      .eq('telegram_id', userId)
      .single()
    
    if (!user) {
      await sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start")
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const hasAccess = await checkSubscriptionAccess(user.id)
    if (!hasAccess) {
      await sendMessage(
        chatId,
        "‚ö†Ô∏è **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π**\n\n" +
        "–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é!",
        {
          inline_keyboard: [
            [{ text: "üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      )
      return
    }
    
    await sendMessage(chatId, "üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤—ã—Å–æ–∫–æ–π!")
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
    const photo = message.photo![message.photo!.length - 1]
    const photoUrl = await getPhotoUrl(photo.file_id)
    
    if (!photoUrl) {
      await sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
      return
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
    const analysis = await analyzeFoodPhoto(photoUrl, message.caption)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let resultText = `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ:**\n\n`
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –æ —Ç–æ—á–Ω–æ—Å—Ç–∏
    const confidenceEmoji = {
      'low': 'üü°',
      'medium': 'üü†',
      'high': 'üü¢'
    }
    resultText += `${confidenceEmoji[analysis.confidence] || 'üü°'} –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.confidence === 'low' ? '–Ω–∏–∑–∫–∞—è' : analysis.confidence === 'medium' ? '—Å—Ä–µ–¥–Ω—è—è' : '–≤—ã—Å–æ–∫–∞—è'}\n\n`
    
    // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    resultText += `üçΩÔ∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:**\n`
    for (const item of analysis.items) {
      resultText += `‚Ä¢ ${item.name} (~${item.weight}–≥)\n`
      resultText += `  –ö: ${item.calories} | –ë: ${item.protein}–≥ | –ñ: ${item.fats}–≥ | –£: ${item.carbs}–≥\n`
    }
    
    resultText += `\nüìà **–ò—Ç–æ–≥–æ:**\n`
    resultText += `üî• –ö–∞–ª–æ—Ä–∏–∏: ${analysis.total.calories} –∫–∫–∞–ª\n`
    resultText += `ü•© –ë–µ–ª–∫–∏: ${analysis.total.protein}–≥\n`
    resultText += `üßà –ñ–∏—Ä—ã: ${analysis.total.fats}–≥\n`
    resultText += `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${analysis.total.carbs}–≥\n`
    
    if (analysis.notes) {
      resultText += `\nüí° ${analysis.notes}\n`
    }
    
    resultText += `\n‚ö†Ô∏è **–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞!** –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑–≤–µ—à–∏–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã.`
    
    await sendMessage(chatId, resultText, {
      inline_keyboard: [
        [{ text: "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å", callback_data: `confirm_photo_${user.id}` }],
        [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_photo_meal" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" }]
      ]
    })
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await setUserState(userId, 'photo_analysis_pending', {
      analysis: analysis,
      photo_url: photoUrl
    })
    
  } catch (error) {
    console.error('Error handling photo message:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–∏—à–∏ –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º.")
  }
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function showNotificationsMenu(chatId: number, dbUserId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let { data: settings } = await supabase
      .from('notification_settings')
      .select('*')
      .eq('user_id', dbUserId)
      .single()
    
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if (!settings) {
      const { data: newSettings } = await supabase
        .from('notification_settings')
        .insert({
          user_id: dbUserId,
          food_notifications_enabled: true,
          water_notifications_enabled: true
        })
        .select()
        .single()
      
      settings = newSettings
    }
    
    const foodStatus = settings.food_notifications_enabled ? '‚úÖ –í–∫–ª' : '‚ùå –í—ã–∫–ª'
    const waterStatus = settings.water_notifications_enabled ? '‚úÖ –í–∫–ª' : '‚ùå –í—ã–∫–ª'
    
    const menuText = `üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**
üìä **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–¥–µ:** ${foodStatus}
–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ —Å ${settings.food_notification_start_time.substring(0, 5)} –¥–æ ${settings.food_notification_end_time.substring(0, 5)}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${settings.food_notification_count} —Ä–∞–∑ –≤ –¥–µ–Ω—å
üíß **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–¥–µ:** ${waterStatus}
–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∏—Ç—å –≤–æ–¥—É —Å ${settings.water_notification_start_time.substring(0, 5)} –¥–æ ${settings.water_notification_end_time.substring(0, 5)}
–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ ${settings.water_notification_interval_minutes} –º–∏–Ω—É—Ç
üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å!`
    
    await sendMessage(chatId, menuText, {
      inline_keyboard: [
        [{ 
          text: settings.food_notifications_enabled ? "üçΩ –ï–¥–∞: –í—ã–∫–ª—é—á–∏—Ç—å" : "üçΩ –ï–¥–∞: –í–∫–ª—é—á–∏—Ç—å", 
          callback_data: "toggle_food_notifications" 
        }],
        [{ 
          text: settings.water_notifications_enabled ? "üíß –í–æ–¥–∞: –í—ã–∫–ª—é—á–∏—Ç—å" : "üíß –í–æ–¥–∞: –í–∫–ª—é—á–∏—Ç—å", 
          callback_data: "toggle_water_notifications" 
        }],
        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
      ]
    })
  } catch (error) {
    console.error('Error showing notifications menu:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
  }
}
/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
async function toggleNotifications(chatId: number, dbUserId: number, type: 'food' | 'water') {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const { data: settings } = await supabase
      .from('notification_settings')
      .select('*')
      .eq('user_id', dbUserId)
      .single()
    
    if (!settings) {
      await sendMessage(chatId, "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
      return
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ
    const field = type === 'food' ? 'food_notifications_enabled' : 'water_notifications_enabled'
    const newValue = !settings[field]
    
    await supabase
      .from('notification_settings')
      .update({ [field]: newValue })
      .eq('user_id', dbUserId)
    
    const emoji = type === 'food' ? 'üçΩ' : 'üíß'
    const name = type === 'food' ? '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–¥–µ' : '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–¥–µ'
    const status = newValue ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'
    
    await sendMessage(chatId, `${emoji} ${name.charAt(0).toUpperCase() + name.slice(1)} ${status}!`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await showNotificationsMenu(chatId, dbUserId)
  } catch (error) {
    console.error('Error toggling notifications:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
  }
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏
 */
async function showHelpMenu(chatId: number, dbUserId: number) {
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
  const subscriptionData = await getSubscriptionInfo(dbUserId)
  const subscriptionInfo = Array.isArray(subscriptionData) ? subscriptionData[0] : subscriptionData
  
  let subscriptionText = ''
  if (subscriptionInfo) {
    if (subscriptionInfo.is_unlimited) {
      subscriptionText = `\nüì¶ **–ü–æ–¥–ø–∏—Å–∫–∞:** ‚ú® –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è (–ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∞)\n\n`
    } else if (subscriptionInfo.is_trial && !subscriptionInfo.needs_payment) {
      const expiresDate = new Date(subscriptionInfo.expires_at)
      const daysLeft = Math.ceil((expiresDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))
      subscriptionText = `\nüì¶ **–ü–æ–¥–ø–∏—Å–∫–∞:** üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (${daysLeft} ${daysLeft === 1 ? '–¥–µ–Ω—å' : daysLeft < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'} –æ—Å—Ç–∞–ª–æ—Å—å)\n\n`
    } else if (!subscriptionInfo.needs_payment) {
      const expiresDate = new Date(subscriptionInfo.expires_at)
      const formattedDate = expiresDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })
      subscriptionText = `\nüì¶ **–ü–æ–¥–ø–∏—Å–∫–∞:** ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formattedDate}\n\n`
    }
  }
  
  const helpText = `‚ùì **–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞**
${subscriptionText}
ü§ñ **–ß—Ç–æ —É–º–µ–µ—Ç C.I.D.:**

üìä **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ö–ë–ñ–£**
–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ä–∞—Ü–∏–æ–Ω –ø–æ –Ω–∞—É—á–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ü–µ–ª–∏)

üçΩÔ∏è **–£–º–Ω–∞—è –∑–∞–ø–∏—Å—å –µ–¥—ã**
–ó–∞–ø–∏—Å—ã–≤–∞–π –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —Ç–µ–∫—Å—Ç–æ–º, –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ üì∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π. AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª—é–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º

üí¨ **AI-–¥–∏–µ—Ç–æ–ª–æ–≥ (–ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã!)**
–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ä–µ—Ü–µ–ø—Ç—ã —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–∞ –ö–ë–ñ–£, –ø–æ–º–æ–≥–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–π–º—É –∏ –æ—Ç–≤–µ—á—É!

üìã **–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è**
–í–µ–¥—É –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –ö–ë–ñ–£ –∏ –≤–æ–¥–µ, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π

üíß **–¢—Ä–µ–∫–∏–Ω–≥ –≤–æ–¥—ã**
–ó–∞–ø–∏—Å—ã–≤–∞–π –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É –∏ —Å–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!

üî• **–°–∏—Å—Ç–µ–º–∞ Streak**
–õ–æ–≥–∏—Ä—É–π –µ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –Ω–∞—Ä–∞—â–∏–≤–∞–π —Å–µ—Ä–∏—é! –≠—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º

üìñ **–®–∞–±–ª–æ–Ω—ã –∏ —Ä–µ—Ü–µ–ø—Ç—ã**
–°–æ—Ö—Ä–∞–Ω—è–π —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω—è–π –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏

üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥**
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –Ω–∞–≥–æ–≤–∞—Ä–∏–≤–∞–π –≤–º–µ—Å—Ç–æ –ø–µ—á–∞—Ç–∏

üì∏ **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ**
–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –µ–¥—É - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£
---
üíé **–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:**
–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º, –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–ª–∞—Ç—å C.I.D. –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
---
üìû **–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:**
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ –ø—Ä–æ–±–ª–µ–º–∞–º –ø–∏—à–∏—Ç–µ:
üë§ @gena12m
–ë—É–¥—É —Ä–∞–¥ –≤–∞—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏! üôè`
  await sendMessage(chatId, helpText, {
    inline_keyboard: [
      [{ text: "üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data: "support_project" }],
      [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
    ]
  })
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showProfileMenu(chatId: number, dbUserId: number) {
  try {
    // ‚ö° PHASE 2 OPTIMIZATION: 1 –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ 2
    const context = await getUserFullContextById(dbUserId)
    const profile = context?.profile
    const plan = context?.plan

    if (!profile) {
      await sendMessage(chatId, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start")
      return
    }
    
    const genderEmoji = profile.gender === 'male' ? 'üë®' : 'üë©'
    const activityLevel = profile.activity_level === 'sedentary' ? '–ù–∏–∑–∫–∞—è' :
                         profile.activity_level === 'lightly_active' ? '–õ–µ–≥–∫–∞—è' :
                         profile.activity_level === 'moderately_active' ? '–°—Ä–µ–¥–Ω—è—è' :
                         profile.activity_level === 'very_active' ? '–í—ã—Å–æ–∫–∞—è' : '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'
    
    let profileText = `üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n`
    profileText += `${genderEmoji} **–ü–æ–ª:** ${profile.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}\n`
    profileText += `üìè **–†–æ—Å—Ç:** ${profile.height} —Å–º\n`
    profileText += `‚öñÔ∏è **–í–µ—Å:** ${profile.current_weight} –∫–≥\n`
    profileText += `üéÇ **–í–æ–∑—Ä–∞—Å—Ç:** ${profile.age} –ª–µ—Ç\n`
    profileText += `üèÉ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** ${activityLevel}\n\n`
    
    if (plan) {
      profileText += `üìä **–¢–≤–æ–π –ø–ª–∞–Ω –ö–ë–ñ–£:**\n`
      profileText += `üî• –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(plan.calories)} –∫–∫–∞–ª\n`
      profileText += `üçó –ë–µ–ª–∫–∏: ${Math.round(plan.protein)} –≥\n`
      profileText += `ü•ë –ñ–∏—Ä—ã: ${Math.round(plan.fats)} –≥\n`
      profileText += `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(plan.carbs)} –≥\n`
      profileText += `üíß –í–æ–¥–∞: ${Math.round(plan.water * 10) / 10} –ª\n\n`
    }

    // üî• STREAK SYSTEM: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É streak
    try {
      const { data: streakStats, error: streakError } = await supabase
        .rpc('get_user_streak_stats', { p_user_id: dbUserId })
        .single()

      console.log('Streak stats:', { streakStats, streakError })

      if (!streakError && streakStats) {
        profileText += `üî• **–¢–≤–æ–π Streak:**\n`
        profileText += `‚Ä¢ –¢–µ–∫—É—â–∏–π: **${streakStats.current_streak}** ${streakStats.current_streak === 1 ? '–¥–µ–Ω—å' : streakStats.current_streak < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}\n`
        profileText += `‚Ä¢ –†–µ–∫–æ—Ä–¥: **${streakStats.longest_streak}** ${streakStats.longest_streak === 1 ? '–¥–µ–Ω—å' : streakStats.longest_streak < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}\n`
        profileText += `‚Ä¢ –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: **${streakStats.total_logs}**\n`

        if (streakStats.is_at_risk && streakStats.current_streak > 0) {
          profileText += `\n‚ö†Ô∏è Streak –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏! –ù–µ –∑–∞–±—É–¥—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É —Å–µ–≥–æ–¥–Ω—è!\n`
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if (streakStats.achievements && streakStats.achievements.length > 0) {
          const achievementsCount = streakStats.achievements.length
          profileText += `\nüèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (${achievementsCount}):**\n`

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
          const recentAchievements = streakStats.achievements.slice(0, 5)
          for (const achievement of recentAchievements) {
            const icon = achievement.type === 'streak_3' ? 'üî•' :
                        achievement.type === 'streak_7' ? '‚≠ê' :
                        achievement.type === 'streak_14' ? 'üí´' :
                        achievement.type === 'streak_30' ? 'üåü' :
                        achievement.type === 'streak_100' ? 'üëë' :
                        achievement.type === 'total_logs_10' ? 'üìä' :
                        achievement.type === 'total_logs_50' ? 'üìà' :
                        achievement.type === 'total_logs_100' ? 'üéØ' : 'üèÜ'

            profileText += `${icon} **${achievement.name}** ‚Äî ${achievement.description}\n`
          }

          if (achievementsCount > 5) {
            profileText += `_...–∏ –µ—â–µ ${achievementsCount - 5}_\n`
          }
        }

        profileText += `\n`
      } else if (streakError) {
        console.error('Streak error details:', streakError)
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        profileText += `üî• **–¢–≤–æ–π Streak:**\n`
        profileText += `‚Ä¢ –ù–∞—á–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å —Å–µ—Ä–∏—é!\n\n`
      }
    } catch (error) {
      console.error('Error getting streak stats:', error)
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    const subscriptionData = await getSubscriptionInfo(dbUserId)
    const subscriptionInfo = Array.isArray(subscriptionData) ? subscriptionData[0] : subscriptionData
    
    console.log('Subscription info:', JSON.stringify(subscriptionInfo))
    
    if (subscriptionInfo) {
      profileText += `üì¶ **–ü–æ–¥–ø–∏—Å–∫–∞:**\n`
      
      if (subscriptionInfo.is_unlimited) {
        profileText += `‚ú® **–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è** (–ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∞)\n\n`
      } else if (subscriptionInfo.is_trial && !subscriptionInfo.needs_payment) {
        const daysLeft = Math.ceil((new Date(subscriptionInfo.expires_at).getTime() - Date.now()) / (1000 * 60 * 60 * 24))
        profileText += `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${daysLeft} ${daysLeft === 1 ? '–¥–µ–Ω—å' : daysLeft < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'} –æ—Å—Ç–∞–ª–æ—Å—å\n`
        profileText += `\nüí° –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã.\n\n`
      } else if (subscriptionInfo.needs_payment) {
        profileText += `üîí **–ò—Å—Ç–µ–∫–ª–∞**\n\n`
        profileText += `üí≥ –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:\n`
        profileText += `üì¶ 1 –º–µ—Å—è—Ü - 129‚ÇΩ\n`
        profileText += `üì¶ 6 –º–µ—Å—è—Ü–µ–≤ - 649‚ÇΩ\n`
        profileText += `üì¶ 1 –≥–æ–¥ - 1099‚ÇΩ\n\n`
      } else {
        const daysLeft = Math.ceil((new Date(subscriptionInfo.expires_at).getTime() - Date.now()) / (1000 * 60 * 60 * 24))
        profileText += `‚úÖ **–ê–∫—Ç–∏–≤–Ω–∞:** ${subscriptionInfo.plan_name}\n`
        profileText += `‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** ${daysLeft} ${daysLeft === 1 ? '–¥–µ–Ω—å' : daysLeft < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}\n\n`
      }
    }
    
    profileText += `üí° –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –ö–ë–ñ–£`
    
    const keyboard: any[] = [
      [
        { text: "üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data: "show_charts" },
        { text: "‚öñÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å", callback_data: "log_weight" }
      ],
      [{ text: "üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –ö–ë–ñ–£", callback_data: "edit_nutrition" }],
      [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data: "edit_parameters" }]
    ]

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
    if (subscriptionInfo && subscriptionInfo.needs_payment) {
      keyboard.unshift([{ text: "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }])
    }

    keyboard.push([{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }])
    
    await sendMessage(chatId, profileText, {
      inline_keyboard: keyboard
    })
  } catch (error) {
    console.error('Error showing profile menu:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
  }
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showUserPreferencesMenu(chatId: number, dbUserId: number) {
  try {
    const preferences = await getUserPreferences(dbUserId)
    
    let text = `üéØ **–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è**\n\n`
    
    if (preferences.length === 0) {
      text += `–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.\n\n`
      text += `üí° –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏ –∏—Ö –≤ –¥–∏–∞–ª–æ–≥–µ —Å C.I.D.! –ù–∞–ø—Ä–∏–º–µ—Ä:\n`
      text += `‚Ä¢ "–£ –º–µ–Ω—è –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –ª–∞–∫—Ç–æ–∑—ã"\n`
      text += `‚Ä¢ "–Ø –Ω–µ –µ–º —Ä—ã–±—É"\n`
      text += `‚Ä¢ "–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞"\n\n`
      text += `–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–º–Ω—é –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è.`
    } else {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
      const allergies = preferences.filter(p => p.preference_type === 'allergy')
      const intolerances = preferences.filter(p => p.preference_type === 'intolerance')
      const excludes = preferences.filter(p => p.preference_type === 'exclude')
      const dislikes = preferences.filter(p => p.preference_type === 'dislike')
      
      if (allergies.length > 0) {
        text += `üö´ **–ê–ª–ª–µ—Ä–≥–∏–∏:**\n`
        allergies.forEach(p => {
          text += `‚Ä¢ ${p.item}\n`
        })
        text += `\n`
      }
      
      if (intolerances.length > 0) {
        text += `‚ö†Ô∏è **–ù–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å:**\n`
        intolerances.forEach(p => {
          text += `‚Ä¢ ${p.item}\n`
        })
        text += `\n`
      }
      
      if (excludes.length > 0) {
        text += `‚ùå **–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Ä–∞—Ü–∏–æ–Ω–∞:**\n`
        excludes.forEach(p => {
          text += `‚Ä¢ ${p.item}\n`
        })
        text += `\n`
      }
      
      if (dislikes.length > 0) {
        text += `üëé **–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:**\n`
        dislikes.forEach(p => {
          text += `‚Ä¢ ${p.item}\n`
        })
        text += `\n`
      }
      
      text += `\nüí° –≠—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.`
    }
    
    const keyboard: any[] = []
    
    if (preferences.length > 0) {
      keyboard.push([{ text: "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data: "clear_all_preferences" }])
    }
    
    keyboard.push(
      [{ text: "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞", callback_data: "clear_chat_history" }],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
    )
    
    await sendMessage(chatId, text, {
      inline_keyboard: keyboard
    })
  } catch (error) {
    console.error('Error showing preferences menu:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
  }
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function showSubscriptionMenu(chatId: number, dbUserId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    const subscriptionData = await getSubscriptionInfo(dbUserId)
    const subscriptionInfo = Array.isArray(subscriptionData) ? subscriptionData[0] : subscriptionData
    
    let statusText = ''
    let statusEmoji = ''
    let keyboard: any[] = []
    
    if (!subscriptionInfo) {
      statusText = `‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞**\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.`
      statusEmoji = '‚ùå'
      keyboard = [
        [{ text: "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
      ]
    } else if (subscriptionInfo.is_unlimited) {
      // –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
      statusText = `‚ú® **–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\nüéÅ –£ —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ (–ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n\n–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!`
      statusEmoji = '‚ú®'
      keyboard = [
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
      ]
    } else if (subscriptionInfo.is_trial && !subscriptionInfo.needs_payment) {
      // Trial –ø–µ—Ä–∏–æ–¥
      const expiresDate = new Date(subscriptionInfo.expires_at)
      const daysLeft = Math.ceil((expiresDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))
      const formattedDate = expiresDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })
      
      statusText = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**\n\n` +
        `‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** ${daysLeft} ${daysLeft === 1 ? '–¥–µ–Ω—å' : daysLeft < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}\n` +
        `üìÖ **–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:** ${formattedDate}\n\n` +
        `üí° –°–µ–π—á–∞—Å —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n` +
        `–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n` +
        `‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 129‚ÇΩ\n` +
        `‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 649‚ÇΩ (–≤—ã–≥–æ–¥–Ω–æ!)\n` +
        `‚Ä¢ 1 –≥–æ–¥ ‚Äî 1099‚ÇΩ (—Å—É–ø–µ—Ä –≤—ã–≥–æ–¥–Ω–æ!)`
      statusEmoji = 'üéÅ'
      keyboard = [
        [{ text: "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ", callback_data: "buy_subscription" }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
      ]
    } else if (subscriptionInfo.needs_payment) {
      // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
      statusText = `‚è∞ **–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**\n\n` +
        `üòî –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n\n` +
        `–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:\n` +
        `‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 129‚ÇΩ\n` +
        `‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 649‚ÇΩ (–≤—ã–≥–æ–¥–Ω–æ!)\n` +
        `‚Ä¢ 1 –≥–æ–¥ ‚Äî 1099‚ÇΩ (—Å—É–ø–µ—Ä –≤—ã–≥–æ–¥–Ω–æ!)`
      statusEmoji = '‚è∞'
      keyboard = [
        [{ text: "üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
      ]
    } else {
      // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      const expiresDate = new Date(subscriptionInfo.expires_at)
      const daysLeft = Math.ceil((expiresDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))
      const formattedDate = expiresDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
      let planName = '–ê–∫—Ç–∏–≤–Ω–∞—è'
      if (subscriptionInfo.plan_name === 'monthly') planName = '–ú–µ—Å—è—á–Ω–∞—è'
      else if (subscriptionInfo.plan_name === 'quarterly') planName = '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è (3 –º–µ—Å—è—Ü–∞)'
      else if (subscriptionInfo.plan_name === 'yearly') planName = '–ì–æ–¥–æ–≤–∞—è'
      
      statusText = `‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞**\n\n` +
        `üì¶ **–ü–ª–∞–Ω:** ${planName}\n` +
        `üìÖ **–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ:** ${formattedDate}\n` +
        `‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** ${daysLeft} ${daysLeft === 1 ? '–¥–µ–Ω—å' : daysLeft < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}\n\n` +
        `‚ú® –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã!`
      statusEmoji = '‚úÖ'
      keyboard = [
        [{ text: "üîÑ –°–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data: "buy_subscription" }],
        [{ text: "üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data: "support_project" }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
      ]
    }
    
    const messageText = `üíé **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π**\n\n${statusText}`
    
    await sendMessage(chatId, messageText, {
      inline_keyboard: keyboard
    })
  } catch (error) {
    console.error('Error showing subscription menu:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ")
  }
}
/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è)
 */
async function manageMeals(chatId: number, dbUserId: number) {
  try {
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É 2 –¥–Ω—è –Ω–∞–∑–∞–¥
    const twoDaysAgo = new Date()
    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2)
    const startDate = twoDaysAgo.toISOString().split('T')[0]
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
    const { data: logs } = await supabase
      .from('food_logs')
      .select('*')
      .eq('user_id', dbUserId)
      .gte('logged_at', `${startDate}T00:00:00`)
      .order('logged_at', { ascending: false })
    
    if (!logs || logs.length === 0) {
      await sendMessage(chatId, "üìù **–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è**\n\n–î–æ–±–∞–≤—å –ø–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏!", {
        inline_keyboard: [
          [{ text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º", callback_data: "quick_log_food" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
        ]
      })
      return
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
    const logsByDate: { [key: string]: any[] } = {}
    logs.forEach(log => {
      const date = new Date(log.logged_at).toISOString().split('T')[0]
      if (!logsByDate[date]) {
        logsByDate[date] = []
      }
      logsByDate[date].push(log)
    })
    
    let message = `üìù **–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è**\n\n`
    const keyboard: any = { inline_keyboard: [] }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    const formatDate = (dateStr: string) => {
      const date = new Date(dateStr)
      const today = new Date().toISOString().split('T')[0]
      const yesterday = new Date()
      yesterday.setDate(yesterday.getDate() - 1)
      const yesterdayStr = yesterday.toISOString().split('T')[0]
      
      if (dateStr === today) return 'üìÖ **–°–µ–≥–æ–¥–Ω—è**'
      if (dateStr === yesterdayStr) return 'üìÖ **–í—á–µ—Ä–∞**'
      return `üìÖ **${date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })}**`
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
    let mealIndex = 0
    Object.keys(logsByDate).sort().reverse().forEach(date => {
      message += `${formatDate(date)}\n\n`

      logsByDate[date].forEach(log => {
        mealIndex++

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–Ω—è –≤–º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const logDate = new Date(log.logged_at)
        const hour = logDate.getHours()
        let period = ''
        if (hour >= 5 && hour < 12) period = '‚òÄÔ∏è –£—Ç—Ä–æ'
        else if (hour >= 12 && hour < 17) period = 'üåû –î–µ–Ω—å'
        else if (hour >= 17 && hour < 22) period = 'üåÜ –í–µ—á–µ—Ä'
        else period = 'üåô –ù–æ—á—å'

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        const desc = log.description.length > 100
          ? log.description.substring(0, 100) + '...'
          : log.description

        message += `**${mealIndex}.** ${period}\n`
        message += `${desc}\n`
        message += `üî• ${log.calories} –∫–∫–∞–ª ‚Ä¢ –ë: ${log.protein}–≥ ‚Ä¢ –ñ: ${log.fats}–≥ ‚Ä¢ –£: ${log.carbs}–≥\n`
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`

        // Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞
        keyboard.inline_keyboard.push([
          { text: `‚úèÔ∏è #${mealIndex}`, callback_data: `edit_meal_${log.id}` },
          { text: `üóë #${mealIndex}`, callback_data: `delete_meal_${log.id}` }
        ])

        message += '\n'
      })
    })
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.inline_keyboard.push(
      [{ text: "üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º", callback_data: "quick_log_food" }],
      [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "diary" }],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
    )
    
    await sendMessage(chatId, message, keyboard)
  } catch (error) {
    console.error('Error managing meals:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏")
  }
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
async function deleteMeal(chatId: number, dbUserId: number, mealId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–µ
    const { data: meal } = await supabase
      .from('food_logs')
      .select('*')
      .eq('id', mealId)
      .eq('user_id', dbUserId)
      .single()
    
    if (!meal) {
      await sendMessage(chatId, "‚ùå –ü—Ä–∏–µ–º –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
      return
    }
    
    const time = new Date(meal.logged_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    await sendMessage(
      chatId,
      `‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ**\n\n` +
      `‚è∞ ${time}\n` +
      `üìù ${meal.description}\n` +
      `üî• ${meal.calories} –∫–∫–∞–ª | ü•© –ë:${meal.protein}–≥ | ü•ë –ñ:${meal.fats}–≥ | üçû –£:${meal.carbs}–≥\n\n` +
      `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
      {
        inline_keyboard: [
          [
            { text: "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data: `confirm_delete_meal_${mealId}` },
            { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "manage_meals" }
          ]
        ]
      }
    )
  } catch (error) {
    console.error('Error showing delete confirmation:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞")
  }
}
/**
 * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
async function confirmDeleteMeal(chatId: number, dbUserId: number, mealId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–µ
    const { data: meal } = await supabase
      .from('food_logs')
      .select('*')
      .eq('id', mealId)
      .eq('user_id', dbUserId)
      .single()
    
    if (!meal) {
      await sendMessage(chatId, "‚ùå –ü—Ä–∏–µ–º –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
      return
    }
    
    // –£–¥–∞–ª—è–µ–º
    const { error } = await supabase
      .from('food_logs')
      .delete()
      .eq('id', mealId)
      .eq('user_id', dbUserId)
    
    if (error) {
      throw error
    }
    
    const time = new Date(meal.logged_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    await sendMessage(
      chatId,
      `‚úÖ **–ü—Ä–∏–µ–º –ø–∏—â–∏ —É–¥–∞–ª–µ–Ω**\n\n‚è∞ ${time}\nüìù ${meal.description}`,
      {
        inline_keyboard: [
          [{ text: "üìù –ú–æ–∏ –ø—Ä–∏–µ–º—ã", callback_data: "manage_meals" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "cancel_action" }]
        ]
      }
    )
  } catch (error) {
    console.error('Error deleting meal:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏")
  }
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫
 */
async function showDiary(chatId: number, dbUserId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
    const { data: plan } = await supabase
      .from('nutrition_plans')
      .select('*')
      .eq('user_id', dbUserId)
      .eq('is_active', true)
      .single()
    
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', dbUserId)
      .single()
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0]
    const { data: todayLogs } = await supabase
      .from('food_logs')
      .select('*')
      .eq('user_id', dbUserId)
      .gte('logged_at', `${today}T00:00:00`)
      .order('logged_at', { ascending: false })
    
    // –°—á–∏—Ç–∞–µ–º —Å—ä–µ–¥–µ–Ω–Ω–æ–µ
    const consumed = todayLogs?.reduce((acc, log) => ({
      calories: acc.calories + (log.calories || 0),
      protein: acc.protein + (log.protein || 0),
      fats: acc.fats + (log.fats || 0),
      carbs: acc.carbs + (log.carbs || 0)
    }), { calories: 0, protein: 0, fats: 0, carbs: 0 }) || { calories: 0, protein: 0, fats: 0, carbs: 0 }
    
    // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    const round = (num: number) => Math.round(num * 10) / 10

    let diaryText = `üìä **–î–Ω–µ–≤–Ω–∏–∫ –∑–∞ ${new Date().toLocaleDateString('ru-RU')}**
**–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å:**
üî• –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(plan.calories)} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: ${Math.round(plan.protein)}–≥
ü•ë –ñ–∏—Ä—ã: ${Math.round(plan.fats)}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(plan.carbs)}–≥
üíß –í–æ–¥–∞: ${round(plan.water)}–ª
**–°—ä–µ–¥–µ–Ω–æ:**
üî• ${round(consumed.calories)} / ${Math.round(plan.calories)} –∫–∫–∞–ª (${Math.round(consumed.calories / plan.calories * 100)}%)
ü•© ${round(consumed.protein)}–≥ / ${Math.round(plan.protein)}–≥
ü•ë ${round(consumed.fats)}–≥ / ${Math.round(plan.fats)}–≥
üçû ${round(consumed.carbs)}–≥ / ${Math.round(plan.carbs)}–≥
**–û—Å—Ç–∞–ª–æ—Å—å:**
üî• ${round(plan.calories - consumed.calories)} –∫–∫–∞–ª
ü•© ${round(plan.protein - consumed.protein)}–≥ –±–µ–ª–∫–∞
ü•ë ${round(plan.fats - consumed.fats)}–≥ –∂–∏—Ä–æ–≤
üçû ${round(plan.carbs - consumed.carbs)}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤`
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    if (todayLogs && todayLogs.length > 0) {
      diaryText += '\n\n**üìù –ü—Ä–∏–µ–º—ã –ø–∏—â–∏:**'
      todayLogs.forEach((log, index) => {
        const time = new Date(log.logged_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
        const shortDesc = log.description.length > 50 ? log.description.substring(0, 50) + '...' : log.description
        diaryText += `\n${index + 1}. ${time} - ${shortDesc}`
        diaryText += `\n   üî• ${log.calories}–∫–∫–∞–ª | –ë:${log.protein}–≥ | –ñ:${log.fats}–≥ | –£:${log.carbs}–≥`
      })
    }
    
    // üî• –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    await sendMessage(chatId, diaryText, myDayActionsKeyboard())
  } catch (error) {
    console.error('Error showing diary:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞")
  }
}
/**
 * –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function startOnboarding(chatId: number, userId: number) {
  try {
    // –®–∞–≥ 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–±–∑–æ—Ä
    await sendMessage(
      chatId,
      `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ C.I.D.!**\n\n` +
      `–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é!\n\n` +
      `üì± **–ß—Ç–æ —è —É–º–µ—é:**\n` +
      `‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ (—Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, üì∏ —Ñ–æ—Ç–æ)\n` +
      `‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ö–ë–ñ–£ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n` +
      `‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏\n` +
      `‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –º–µ–Ω—é\n` +
      `‚Ä¢ –¢—Ä–µ–∫–∞—Ç—å –≤–æ–¥—É –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏\n` +
      `‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É Streak üî•\n\n` +
      `üöÄ **–ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤!**`,
      {
        inline_keyboard: [
          [{ text: "‚û°Ô∏è –î–∞–ª–µ–µ", callback_data: "onboarding_step_2" }],
          [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "main_menu" }]
        ]
      }
    )
  } catch (error) {
    console.error('Error in onboarding:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", getMainKeyboard())
  }
}
/**
 * –®–∞–≥ 2 –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 */
async function onboardingStep2(chatId: number, userId: number) {
  await sendMessage(
    chatId,
    `üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n` +
    `–≠—Ç–æ —Ç–≤–æ—è –±–∞–∑–∞! –û—Ç—Å—é–¥–∞ —Ç—ã –º–æ–∂–µ—à—å:\n\n` +
    `üìä **–î–Ω–µ–≤–Ω–∏–∫** - —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ö–ë–ñ–£, –≤–æ–¥—ã –∏ –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏\n` +
    `üìñ **–†–µ—Ü–µ–ø—Ç—ã** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ —à–∞–±–ª–æ–Ω—ã –±–ª—é–¥\n` +
    `üë§ **–ü—Ä–æ—Ñ–∏–ª—å** - —Ç–≤–æ–π –ø–ª–∞–Ω –ö–ë–ñ–£, Streak üî• –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n` +
    `üí° **–°–æ–≤–µ—Ç:** –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –µ–¥—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç —á—Ç–æ —Å—ä–µ–ª!`,
    {
      inline_keyboard: [
        [{ text: "‚û°Ô∏è –î–∞–ª–µ–µ", callback_data: "onboarding_step_3" }],
        [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "main_menu" }]
      ]
    }
  )
}
/**
 * –®–∞–≥ 3 –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: –ó–∞–ø–∏—Å—å –µ–¥—ã
 */
async function onboardingStep3(chatId: number, userId: number) {
  await sendMessage(
    chatId,
    `üçΩÔ∏è **–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏**\n\n` +
    `**–°–ø–æ—Å–æ–± 1:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç\n` +
    `‚Ä¢ "–±–∞–Ω–∞–Ω 150–≥, –æ–≤—Å—è–Ω–∫–∞ 60–≥"\n` +
    `‚Ä¢ "—Å—ä–µ–ª –∫—É—Ä–∏—Ü—É —Å —Ä–∏—Å–æ–º"\n` +
    `‚Ä¢ "–≤—ã–ø–∏–ª –∫–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º"\n\n` +
    `**–°–ø–æ—Å–æ–± 2:** üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
    `‚Ä¢ –ù–∞–∂–º–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Å—ä–µ–ª\n` +
    `‚Ä¢ –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –∑–∞–ø–∏—à—É!\n\n` +
    `**–°–ø–æ—Å–æ–± 3:** üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –µ–¥—ã\n` +
    `‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π —Å–≤–æ—é –µ–¥—É\n` +
    `‚Ä¢ AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ö–ë–ñ–£!\n\n` +
    `ü§ñ **–ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ —è:**\n` +
    `‚Ä¢ –ü–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –ö–ë–ñ–£\n` +
    `‚Ä¢ –ü–æ–∫–∞–∂—É –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É\n` +
    `‚Ä¢ –î–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é`,
    {
      inline_keyboard: [
        [{ text: "‚û°Ô∏è –î–∞–ª–µ–µ", callback_data: "onboarding_step_4" }],
        [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "main_menu" }]
      ]
    }
  )
}
/**
 * –®–∞–≥ 4 –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
async function onboardingStep4(chatId: number, userId: number) {
  await sendMessage(
    chatId,
    `‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —à–∞–±–ª–æ–Ω—ã**\n\n` +
    `–ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –µ–¥—ã —Ç—ã —É–≤–∏–¥–∏—à—å –∫–Ω–æ–ø–∫–∏:\n\n` +
    `‚úèÔ∏è **–ò–∑–º–µ–Ω–∏—Ç—å** - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Å\n` +
    `üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å** - —É–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å\n` +
    `üíæ **–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω** - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞\n` +
    `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫\n\n` +
    `üìñ **–®–∞–±–ª–æ–Ω—ã –∏ —Ä–µ—Ü–µ–ø—Ç—ã:**\n` +
    `‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–∏–µ–º—ã\n` +
    `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º\n` +
    `‚Ä¢ –•—Ä–∞–Ω–∏ –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏`,
    {
      inline_keyboard: [
        [{ text: "‚û°Ô∏è –î–∞–ª–µ–µ", callback_data: "onboarding_step_5" }],
        [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "main_menu" }]
      ]
    }
  )
}
/**
 * –®–∞–≥ 5 –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
 */
async function onboardingStep5(chatId: number, userId: number) {
  await sendMessage(
    chatId,
    `üìä **–î–Ω–µ–≤–Ω–∏–∫ –∏ –ø—Ä–æ—Ñ–∏–ª—å**\n\n` +
    `**üìä –í –¥–Ω–µ–≤–Ω–∏–∫–µ —É–≤–∏–¥–∏—à—å:**\n` +
    `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ö–ë–ñ–£ –∑–∞ –¥–µ–Ω—å (–ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä)\n` +
    `‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –≤–æ–¥—ã üíß\n` +
    `‚Ä¢ –í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏\n\n` +
    `**üë§ –í –ø—Ä–æ—Ñ–∏–ª–µ —É–≤–∏–¥–∏—à—å:**\n` +
    `‚Ä¢ –°–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ö–ë–ñ–£\n` +
    `‚Ä¢ –°–∏—Å—Ç–µ–º—É Streak üî• (—Å–µ—Ä–∏—è –¥–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)\n` +
    `‚Ä¢ –û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n` +
    `**üî• Streak –º–æ—Ç–∏–≤–∞—Ü–∏—è:**\n` +
    `–õ–æ–≥–∏—Ä—É–π –µ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –Ω–∞—Ä–∞—â–∏–≤–∞–π —Å–≤–æ–π Streak!\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º.`,
    {
      inline_keyboard: [
        [{ text: "‚û°Ô∏è –î–∞–ª–µ–µ", callback_data: "onboarding_step_6" }],
        [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "main_menu" }]
      ]
    }
  )
}
/**
 * –®–∞–≥ 6 –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: –°–æ–≤–µ—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
 */
async function onboardingStep6(chatId: number, userId: number) {
  await sendMessage(
    chatId,
    `üí° **AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã**\n\n` +
    `ü§ñ **–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç:**\n` +
    `‚Ä¢ "–ú–æ–∂–Ω–æ –ª–∏ –º–Ω–µ –±–∞–Ω–∞–Ω?"\n` +
    `‚Ä¢ "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫—É—Ä–∏—Ü—ã?"\n` +
    `‚Ä¢ "–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Ü–µ–ø—Ç –Ω–∞ —É–∂–∏–Ω"\n` +
    `‚Ä¢ "–ö–∞–∫ –¥–æ–±–∏—Ç—å –±–µ–ª–∫–∏?"\n\n` +
    `–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–π–º—É, —á—Ç–æ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å, –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –ö–ë–ñ–£!\n\n` +
    `**–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:**\n` +
    `‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π –µ–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞\n` +
    `‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (150–≥, 200–º–ª)\n` +
    `‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –µ–¥—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n` +
    `‚Ä¢ –¢—Ä–µ–∫–∞–π –≤–æ–¥—É üíß - —ç—Ç–æ –≤–∞–∂–Ω–æ!\n` +
    `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π Streak üî• –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏\n\n` +
    `üöÄ **–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?**`,
    {
      inline_keyboard: [
        [{ text: "üéØ –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!", callback_data: "main_menu" }]
      ]
    }
  )
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–æ–Ω–∞—Ç–∞
 */
async function showDonationOptions(chatId: number, userId: number) {
  await sendMessage(
    chatId,
    `üíù **–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç C.I.D.**\n\n` +
    `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞!\n\n` +
    `–¢–≤–æ–π –¥–æ–Ω–∞—Ç –ø–æ–º–æ–∂–µ—Ç:\n` +
    `‚Ä¢ –û–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –∏ AI\n` +
    `‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n` +
    `‚Ä¢ –£–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞\n\n` +
    `üí∞ **–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –∏–ª–∏ —É–∫–∞–∂–∏ —Å–≤–æ—é:**`,
    {
      inline_keyboard: [
        [
          { text: "‚òï 100‚ÇΩ", callback_data: "donate_100" },
          { text: "üçï 300‚ÇΩ", callback_data: "donate_300" }
        ],
        [
          { text: "üéÅ 500‚ÇΩ", callback_data: "donate_500" },
          { text: "üíé 1000‚ÇΩ", callback_data: "donate_1000" }
        ],
        [
          { text: "‚úèÔ∏è –°–≤–æ—è —Å—É–º–º–∞", callback_data: "donate_custom" }
        ],
        [
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" }
        ]
      ]
    }
  )
}
/**
 * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –¥–æ–Ω–∞—Ç–∞
 */
async function createDonationPayment(chatId: number, dbUserId: number, amount: number) {
  try {
    console.log('createDonationPayment called with:', { chatId, dbUserId, amount, dbUserIdType: typeof dbUserId })
    
    await sendMessage(chatId, "‚è≥ –°–æ–∑–¥–∞—é —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id
    const orderId = `donation_${dbUserId}_${Date.now()}`
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data: paymentIntent, error } = await supabase
      .from('payment_intents')
      .insert({
        user_id: dbUserId,
        plan_id: null, // –î–ª—è –¥–æ–Ω–∞—Ç–∞ plan_id –Ω–µ –Ω—É–∂–µ–Ω
        order_id: orderId,
        amount_rub: amount,
        amount_kopeks: amount * 100,
        description: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ C.I.D. - ${amount}‚ÇΩ`,
        status: 'NEW',
        is_donation: true // –§–ª–∞–≥ –¥–æ–Ω–∞—Ç–∞
      })
      .select()
      .single()
    
    if (error) {
      console.error('Error creating donation payment intent:', error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
      return
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ T-Bank
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
    const requestData = {
      userId: Number(dbUserId),  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
      amount_rub: amount,
      order_id: orderId,
      description: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ C.I.D. - ${amount}‚ÇΩ`,
      is_donation: true
    }
    
    console.log('Sending donation request:', JSON.stringify(requestData, null, 2))
    
    const response = await fetch(`${SUPABASE_URL}/functions/v1/tbank-payment`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${Deno.env.get('SUPABASE_ANON_KEY')}`
      },
      body: JSON.stringify(requestData)
    })
    
    if (!response.ok) {
      const errorText = await response.text()
      console.error('T-Bank payment HTTP error:', response.status, errorText)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
      return
    }
    
    const paymentData = await response.json()
    
    if (paymentData.error) {
      console.error('T-Bank payment error:', paymentData.error)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
      return
    }
    
    if (!paymentData.payment_url) {
      console.error('No payment URL in response:', paymentData)
      await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
      return
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    await sendMessage(
      chatId,
      `üíù **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ - ${amount}‚ÇΩ**\n\n` +
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å C.I.D.!\n\n` +
      `üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ T-Bank**\n` +
      `‚ú® –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n` +
      `üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
      {
        inline_keyboard: [
          [{ text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url: paymentData.payment_url }],
          [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    )
  } catch (error) {
    console.error('Error creating donation payment:', error)
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
  }
}
/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
async function handleUpdate(update: TelegramUpdate) {
  try {
    if (update.message) {
      const message = update.message
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (message.text?.startsWith('/')) {
        const command = message.text.split(' ')[0].substring(1)
        
        if (command === 'start') {
          await handleStartCommand(message)
        }
      } else if (message.photo) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        await handlePhotoMessage(message)
      } else if (message.voice) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await handleVoiceMessage(message)
      } else if (message.text) {
        await handleTextMessage(message)
      }
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query)
    }
  } catch (error) {
    console.error('Error handling update:', error)
  }
}
/**
 * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
serve(async (req) => {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  }
  
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }
  
  try {
    const update: TelegramUpdate = await req.json()
    console.log('Received update:', update.update_id)
    
    // –í–ê–ñ–ù–û: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
    await handleUpdate(update)
    
    return new Response(
      JSON.stringify({ ok: true }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )
  } catch (error) {
    console.error('Error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    )
  }
})
