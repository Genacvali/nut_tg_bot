// Smart Notifications - –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å AI –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'

const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 */
async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const payload: any = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  }

  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }

  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })

    const result = await response.json()

    if (!response.ok) {
      console.error('Telegram API error:', result)
      // Retry without markdown if parse error
      if (result.description?.includes("can't parse entities")) {
        payload.parse_mode = undefined
        await fetch(`${TELEGRAM_API}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        })
      }
    }

    return result
  } catch (error) {
    console.error('Error sending message:', error)
    throw error
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å AI
 */
async function generateSmartReminder(
  userContext: any,
  reminderType: 'morning' | 'lunch' | 'evening' | 'water' | 'streak_risk'
): Promise<string> {

  const profile = userContext.profile
  const plan = userContext.plan
  const todayStats = userContext.today_stats
  const streakInfo = userContext.streak_info

  let prompt = ''

  if (reminderType === 'morning') {
    prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –¶–µ–ª—å: ${profile.goal === 'lose' ? '–ø–æ—Ö—É–¥–µ–Ω–∏–µ' : profile.goal === 'gain' ? '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã' : '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞'}
- –ü–ª–∞–Ω –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –¥–µ–Ω—å: ${plan.calories} –∫–∫–∞–ª
- –¢–µ–∫—É—â–∏–π streak: ${streakInfo?.current_streak || 0} –¥–Ω–µ–π

–í–∫–ª—é—á–∏:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º streak (–µ—Å–ª–∏ –µ—Å—Ç—å)
2. –ö—Ä–∞—Ç–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –∫–∞–ª–æ—Ä–∏—è–º–∏
3. –ú–æ—Ç–∏–≤–∞—Ü–∏—é

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –∏–∑–±—ã—Ç–∫–µ. –¢–æ–Ω - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π.`
  }

  else if (reminderType === 'lunch') {
    const remainingCalories = plan.calories - (todayStats?.calories || 0)
    const remainingProtein = plan.protein - (todayStats?.protein || 0)

    prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–±–µ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –£–∂–µ —Å—ä–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${todayStats?.calories || 0} –∫–∫–∞–ª
- –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ –¥–µ–Ω—å: ${remainingCalories} –∫–∫–∞–ª
- –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–µ–ª–∫–∞: ${Math.max(0, remainingProtein)}–≥

–í–∫–ª—é—á–∏:
1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–µ–¥–∞
2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —á—Ç–æ –ø–æ–µ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞–ª–æ—Ä–∏–π
3. –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–ª–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –º–∞–ª–æ

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –∏–∑–±—ã—Ç–∫–µ.`
  }

  else if (reminderType === 'evening') {
    const remainingCalories = plan.calories - (todayStats?.calories || 0)

    prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –£–∂–µ —Å—ä–µ–¥–µ–Ω–æ: ${todayStats?.calories || 0} –∫–∫–∞–ª –∏–∑ ${plan.calories} –∫–∫–∞–ª
- –û—Å—Ç–∞–ª–æ—Å—å: ${remainingCalories} –∫–∫–∞–ª

–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∫–∞–ª–æ—Ä–∏–π (< 300) - –ø–æ—Å–æ–≤–µ—Ç—É–π –ª–µ–≥–∫–∏–π —É–∂–∏–Ω.
–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–Ω–æ–≥–æ (> 600) - –Ω–∞–ø–æ–º–Ω–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —É–∂–∏–Ω.
–ï—Å–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–æ—Ä–º–∞ - –ø–æ—Ö–≤–∞–ª–∏ –∑–∞ –±–∞–ª–∞–Ω—Å.

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –∏–∑–±—ã—Ç–∫–µ.`
  }

  else if (reminderType === 'water') {
    prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –≤–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ù–æ—Ä–º–∞ –≤–æ–¥—ã: ${plan.water ? Math.round(plan.water * 1000) : 2000}–º–ª –≤ –¥–µ–Ω—å

–°–¥–µ–ª–∞–π –µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –Ω–æ –∫—Ä–∞—Ç–∫–∏–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏.`
  }

  else if (reminderType === 'streak_risk') {
    prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ú–û–¢–ò–í–ò–†–£–Æ–©–ï–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∏—Å–∫—É–µ—Ç –ø–æ—Ç–µ—Ä—è—Ç—å streak.

–¢–µ–∫—É—â–∏–π streak: ${streakInfo?.current_streak || 0} –¥–Ω–µ–π
–†–µ–∫–æ—Ä–¥: ${streakInfo?.longest_streak || 0} –¥–Ω–µ–π

–¢–æ–Ω - —Å—Ä–æ—á–Ω—ã–π –Ω–æ –Ω–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π. –ú–æ—Ç–∏–≤–∏—Ä—É–π –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–µ—Ä–∏—é.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏.`
  }

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 200,
        temperature: 0.7
      })
    })

    const data = await response.json()
    return data.choices[0].message.content.trim()
  } catch (error) {
    console.error('Error generating AI reminder:', error)
    // Fallback messages
    const fallbacks = {
      morning: `‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫. –£ —Ç–µ–±—è ${plan.calories} –∫–∫–∞–ª –Ω–∞ –¥–µ–Ω—å.`,
      lunch: `üçΩ –í—Ä–µ–º—è –æ–±–µ–¥–∞! –û—Å—Ç–∞–ª–æ—Å—å ${plan.calories - (todayStats?.calories || 0)} –∫–∫–∞–ª.`,
      evening: `üåô –í—Ä–µ–º—è —É–∂–∏–Ω–∞! –°–µ–≥–æ–¥–Ω—è —Ç—ã —Å—ä–µ–ª ${todayStats?.calories || 0} –∫–∫–∞–ª –∏–∑ ${plan.calories} –∫–∫–∞–ª.`,
      water: `üíß –ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å –≤–æ–¥—É! –ù–æ—Ä–º–∞: ${plan.water ? Math.round(plan.water * 1000) : 2000}–º–ª –≤ –¥–µ–Ω—å.`,
      streak_risk: `üî• –¢–≤–æ–π streak ${streakInfo?.current_streak || 0} –¥–Ω–µ–π –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏! –ó–∞–ª–æ–≥–∏—Ä—É–π –µ–¥—É —Å–µ–≥–æ–¥–Ω—è!`
    }
    return fallbacks[reminderType]
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 */
serve(async (req) => {
  try {
    // Cron job –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∂–¥—ã–π —á–∞—Å
    const currentHour = new Date().getHours()
    console.log(`‚è∞ Smart notifications check at ${currentHour}:00`)

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    const { data: activeUsers, error } = await supabase
      .from('users')
      .select(`
        id,
        telegram_id,
        first_name,
        current_streak,
        longest_streak,
        last_log_date
      `)
      .not('telegram_id', 'is', null)

    if (error) throw error

    console.log(`Found ${activeUsers.length} users to check`)

    let sentCount = 0

    for (const user of activeUsers) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: context } = await supabase
          .rpc('get_user_full_context_by_id', { p_user_id: user.id })

        if (!context || !context.profile || !context.plan) {
          continue // Skip users without profile
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if (!context.subscription ||
            (context.subscription.status !== 'active' &&
             context.subscription.status !== 'trial')) {
          continue // Skip users without active subscription
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date().toISOString().split('T')[0]
        const { data: todayLogs } = await supabase
          .from('food_logs')
          .select('calories, protein, fats, carbs')
          .eq('user_id', user.id)
          .gte('logged_at', `${today}T00:00:00`)

        const todayStats = todayLogs?.reduce((acc, log) => ({
          calories: acc.calories + (log.calories || 0),
          protein: acc.protein + (log.protein || 0),
          fats: acc.fats + (log.fats || 0),
          carbs: acc.carbs + (log.carbs || 0)
        }), { calories: 0, protein: 0, fats: 0, carbs: 0 })

        // –ü–æ–ª—É—á–∞–µ–º streak info
        const { data: streakInfo } = await supabase
          .rpc('get_user_streak_stats', { p_user_id: user.id })
          .single()

        const userContext = {
          profile: context.profile,
          plan: context.plan,
          today_stats: todayStats,
          streak_info: streakInfo
        }

        let shouldSend = false
        let reminderType: any = null
        let reminderText = ''

        // –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô

        // 1. STREAK RISK (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ 20:00 –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞–ª —Å–µ–≥–æ–¥–Ω—è
        if (currentHour === 20 &&
            user.current_streak > 0 &&
            (!todayLogs || todayLogs.length === 0)) {
          shouldSend = true
          reminderType = 'streak_risk'
          reminderText = await generateSmartReminder(userContext, 'streak_risk')
        }

        // 2. –£–¢–†–ï–ù–ù–ï–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï - 8:00
        else if (currentHour === 8) {
          shouldSend = true
          reminderType = 'morning'
          reminderText = await generateSmartReminder(userContext, 'morning')
        }

        // 3. –û–ë–ï–î - 13:00 (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –µ–ª)
        else if (currentHour === 13 && (!todayStats || todayStats.calories < 500)) {
          shouldSend = true
          reminderType = 'lunch'
          reminderText = await generateSmartReminder(userContext, 'lunch')
        }

        // 4. –£–ñ–ò–ù - 19:00
        else if (currentHour === 19) {
          shouldSend = true
          reminderType = 'evening'
          reminderText = await generateSmartReminder(userContext, 'evening')
        }

        // 5. –í–û–î–ê - 12:00, 16:00
        else if (currentHour === 12 || currentHour === 16) {
          shouldSend = true
          reminderType = 'water'
          reminderText = await generateSmartReminder(userContext, 'water')
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (shouldSend && reminderText) {
          await sendMessage(
            user.telegram_id,
            reminderText,
            {
              inline_keyboard: [
                [{ text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É", callback_data: "quick_log_food" }],
                [{ text: "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ª–æ–≥", callback_data: "quick_log" }]
              ]
            }
          )

          sentCount++
          console.log(`‚úÖ Sent ${reminderType} reminder to user ${user.id}`)

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Telegram API
          await new Promise(resolve => setTimeout(resolve, 100))
        }

      } catch (userError) {
        console.error(`Error processing user ${user.id}:`, userError)
        // Continue with next user
      }
    }

    return new Response(
      JSON.stringify({
        success: true,
        hour: currentHour,
        checked_users: activeUsers.length,
        sent_notifications: sentCount
      }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 200
      }
    )

  } catch (error) {
    console.error('Smart notifications error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})
