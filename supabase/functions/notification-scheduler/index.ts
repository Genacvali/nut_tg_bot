/**
 * Supabase Edge Function –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ pg_cron –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 */

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'

const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any): Promise<boolean> {
  try {
    const payload: any = {
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown'
    }
    
    if (replyMarkup) {
      payload.reply_markup = replyMarkup
    }
    
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })
    
    const result = await response.json()
    return result.ok
  } catch (error) {
    console.error('Error sending Telegram message:', error)
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getUserLocalTime(timezone: string): Date {
  try {
    const now = new Date()
    const userTime = new Date(now.toLocaleString('en-US', { timeZone: timezone }))
    return userTime
  } catch (error) {
    console.error('Error getting user local time:', error)
    return new Date()
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –µ–¥–µ
 */
async function shouldSendFoodNotification(
  userId: string, 
  settings: any, 
  userLocalTime: Date
): Promise<boolean> {
  const currentHour = userLocalTime.getHours()
  const currentMinute = userLocalTime.getMinutes()
  const currentTimeMinutes = currentHour * 60 + currentMinute
  
  // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
  const [startHour, startMinute] = settings.food_notification_start_time.split(':').map(Number)
  const [endHour, endMinute] = settings.food_notification_end_time.split(':').map(Number)
  const startTimeMinutes = startHour * 60 + startMinute
  const endTimeMinutes = endHour * 60 + endMinute
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  if (currentTimeMinutes < startTimeMinutes || currentTimeMinutes > endTimeMinutes) {
    return false
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  const totalMinutes = endTimeMinutes - startTimeMinutes
  const interval = totalMinutes / settings.food_notification_count
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞
  const minutesSinceStart = currentTimeMinutes - startTimeMinutes
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç
  const { data: recentLogs } = await supabase
    .from('notification_logs')
    .select('*')
    .eq('user_id', userId)
    .eq('notification_type', 'food')
    .gte('sent_at', new Date(Date.now() - 15 * 60 * 1000).toISOString())
    .limit(1)
  
  if (recentLogs && recentLogs.length > 0) {
    return false
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ–º –ª–∏ –º—ã –≤ –æ–¥–Ω–æ –∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–∫–æ–Ω (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é ¬±5 –º–∏–Ω—É—Ç)
  for (let i = 0; i < settings.food_notification_count; i++) {
    const targetTime = i * interval
    if (Math.abs(minutesSinceStart - targetTime) <= 5) {
      return true
    }
  }
  
  return false
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–¥–µ
 */
async function shouldSendWaterNotification(
  userId: string,
  settings: any,
  userLocalTime: Date
): Promise<boolean> {
  const currentHour = userLocalTime.getHours()
  const currentMinute = userLocalTime.getMinutes()
  const currentTimeMinutes = currentHour * 60 + currentMinute
  
  // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
  const [startHour, startMinute] = settings.water_notification_start_time.split(':').map(Number)
  const [endHour, endMinute] = settings.water_notification_end_time.split(':').map(Number)
  const startTimeMinutes = startHour * 60 + startMinute
  const endTimeMinutes = endHour * 60 + endMinute
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  if (currentTimeMinutes < startTimeMinutes || currentTimeMinutes > endTimeMinutes) {
    return false
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç
  const checkInterval = settings.water_notification_interval_minutes - 5 // –° –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é
  const { data: recentLogs } = await supabase
    .from('notification_logs')
    .select('*')
    .eq('user_id', userId)
    .eq('notification_type', 'water')
    .gte('sent_at', new Date(Date.now() - checkInterval * 60 * 1000).toISOString())
    .limit(1)
  
  if (recentLogs && recentLogs.length > 0) {
    return false
  }
  
  return true
}

/**
 * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–¥–µ —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ö–ë–ñ–£
 */
async function generateFoodNotificationText(userId: string): Promise<string> {
  // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
  const { data: plan } = await supabase
    .from('nutrition_plans')
    .select('*')
    .eq('user_id', userId)
    .eq('is_active', true)
    .single()
  
  if (!plan) {
    return 'üçΩ –í—Ä–µ–º—è –ø–æ–µ—Å—Ç—å! –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏.'
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const today = new Date().toISOString().split('T')[0]
  const { data: todayLogs } = await supabase
    .from('food_logs')
    .select('*')
    .eq('user_id', userId)
    .gte('logged_at', `${today}T00:00:00`)
  
  // –°—á–∏—Ç–∞–µ–º —Å—ä–µ–¥–µ–Ω–Ω–æ–µ
  const consumed = todayLogs?.reduce((acc, log) => ({
    calories: acc.calories + (log.calories || 0),
    protein: acc.protein + (log.protein || 0),
    fats: acc.fats + (log.fats || 0),
    carbs: acc.carbs + (log.carbs || 0)
  }), { calories: 0, protein: 0, fats: 0, carbs: 0 }) || { calories: 0, protein: 0, fats: 0, carbs: 0 }
  
  const remaining = {
    calories: plan.calories - consumed.calories,
    protein: plan.protein - consumed.protein,
    fats: plan.fats - consumed.fats,
    carbs: plan.carbs - consumed.carbs
  }
  
  const percentConsumed = Math.round((consumed.calories / plan.calories) * 100)
  
  let message = `üçΩ *–í—Ä–µ–º—è –ø–æ–µ—Å—Ç—å!*\n\n`
  
  if (percentConsumed < 25) {
    message += `‚òÄÔ∏è –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è! –£ —Ç–µ–±—è –≤–ø–µ—Ä–µ–¥–∏ –≤–µ—Å—å –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Ü–∏–æ–Ω.\n\n`
  } else if (percentConsumed < 50) {
    message += `üëç –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ –º–Ω–æ–≥–æ –≤–∫—É—Å–Ω–æ–≥–æ.\n\n`
  } else if (percentConsumed < 75) {
    message += `üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –¢—ã —É–∂–µ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –ø—É—Ç–∏.\n\n`
  } else if (percentConsumed < 100) {
    message += `üéØ –ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ.\n\n`
  } else {
    message += `‚úÖ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –ø–ª–∞–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞.\n\n`
  }
  
  message += `üìä *–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è:*\n`
  message += `üî• ${remaining.calories} –∫–∫–∞–ª\n`
  message += `ü•© ${remaining.protein}–≥ –±–µ–ª–∫–∞\n`
  message += `ü•ë ${remaining.fats}–≥ –∂–∏—Ä–æ–≤\n`
  message += `üçû ${remaining.carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤`
  
  return message
}

/**
 * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–¥–µ
 */
async function generateWaterNotificationText(userId: string): Promise<string> {
  // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º—ã –≤–æ–¥—ã
  const { data: plan } = await supabase
    .from('nutrition_plans')
    .select('*')
    .eq('user_id', userId)
    .eq('is_active', true)
    .single()
  
  const waterGoal = plan?.water || 2.5
  
  const messages = [
    `üíß *–í—Ä–µ–º—è –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã!*\n\n–¢–≤–æ—è –Ω–æ—Ä–º–∞: ${waterGoal}–ª –≤ –¥–µ–Ω—å\n\nüí° –í–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫—Å–∏–Ω—ã.`,
    `üíß *–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≤–æ–¥—É!*\n\n–¶–µ–ª—å: ${waterGoal}–ª –≤ –¥–µ–Ω—å\n\nüí° –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã —É–ª—É—á—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞.`,
    `üíß *–í—Ä–µ–º—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏!*\n\n–ù–æ—Ä–º–∞: ${waterGoal}–ª –≤ –¥–µ–Ω—å\n\nüí° –í–æ–¥–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –æ–±–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–∞.`,
    `üíß *–ü–æ–ø–µ–π –≤–æ–¥–∏—á–∫–∏!*\n\n–¶–µ–ª—å: ${waterGoal}–ª –≤ –¥–µ–Ω—å\n\nüí° –î–∞–∂–µ –ª–µ–≥–∫–æ–µ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.`
  ]
  
  return messages[Math.floor(Math.random() * messages.length)]
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function processNotifications() {
  console.log('Starting notification processing...')
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  const { data: settings, error } = await supabase
    .from('notification_settings')
    .select(`
      *,
      users!inner(telegram_id)
    `)
    .or('food_notifications_enabled.eq.true,water_notifications_enabled.eq.true')
  
  if (error) {
    console.error('Error fetching notification settings:', error)
    return { error: error.message }
  }
  
  if (!settings || settings.length === 0) {
    console.log('No users with enabled notifications')
    return { processed: 0 }
  }
  
  let foodSent = 0
  let waterSent = 0
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const setting of settings) {
    try {
      const userLocalTime = getUserLocalTime(setting.timezone)
      console.log(`Processing user ${setting.user_id}, local time: ${userLocalTime.toISOString()}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–¥–µ
      if (setting.food_notifications_enabled) {
        const shouldSendFood = await shouldSendFoodNotification(
          setting.user_id,
          setting,
          userLocalTime
        )
        
        if (shouldSendFood) {
          const text = await generateFoodNotificationText(setting.user_id)
          const sent = await sendTelegramMessage(
            setting.users.telegram_id,
            text,
            {
              inline_keyboard: [
                [{ text: "üìã –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data: "menu_recipes" }],
                [{ text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º", callback_data: "log_food" }]
              ]
            }
          )
          
          if (sent) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            await supabase
              .from('notification_logs')
              .insert({
                user_id: setting.user_id,
                notification_type: 'food',
                sent_at: new Date().toISOString()
              })
            
            foodSent++
            console.log(`Food notification sent to user ${setting.user_id}`)
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–¥–µ
      if (setting.water_notifications_enabled) {
        const shouldSendWater = await shouldSendWaterNotification(
          setting.user_id,
          setting,
          userLocalTime
        )
        
        if (shouldSendWater) {
          const text = await generateWaterNotificationText(setting.user_id)
          const sent = await sendTelegramMessage(
            setting.users.telegram_id,
            text,
            {
              inline_keyboard: [
                [{ text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º", callback_data: "log_food" }]
              ]
            }
          )
          
          if (sent) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            await supabase
              .from('notification_logs')
              .insert({
                user_id: setting.user_id,
                notification_type: 'water',
                sent_at: new Date().toISOString()
              })
            
            waterSent++
            console.log(`Water notification sent to user ${setting.user_id}`)
          }
        }
      }
      
    } catch (error) {
      console.error(`Error processing user ${setting.user_id}:`, error)
    }
  }
  
  console.log(`Notification processing complete. Food: ${foodSent}, Water: ${waterSent}`)
  
  return {
    processed: settings.length,
    foodSent,
    waterSent
  }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
serve(async (req) => {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  }
  
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    const authHeader = req.headers.get('Authorization')
    const expectedAuth = `Bearer ${SUPABASE_SERVICE_KEY}`
    
    if (authHeader !== expectedAuth) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 401 
        }
      )
    }
    
    const result = await processNotifications()
    
    return new Response(
      JSON.stringify(result),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )
  } catch (error) {
    console.error('Error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    )
  }
})

