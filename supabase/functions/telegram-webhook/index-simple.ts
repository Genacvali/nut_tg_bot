// –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Telegram –±–æ—Ç–∞
// –ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Supabase Edge Functions

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders, status: 200 })
  }
  
  try {
    const update = await req.json()
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const chatId = callbackQuery.message.chat.id
      const userId = callbackQuery.from.id
      const data = callbackQuery.data
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
      await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: callbackQuery.id })
      })
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
      await handleCallbackQuery(chatId, userId, data)
      
      return success()
    }
    
    if (update.message) {
      const chatId = update.message.chat.id
      const userId = update.message.from.id
      const text = update.message.text
      const photo = update.message.photo
      const voice = update.message.voice
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text?.startsWith('/start')) {
        await ensureUser(userId, update.message.from.username)
        await sendMessage(chatId, 'üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –±–æ—Ç–∞-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞!\n\n–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã, —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        return success()
      }
      
      if (text?.startsWith('/menu')) {
        await sendMessageWithInlineKeyboard(chatId, 'üçé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard())
        return success()
      }
      
      if (text?.startsWith('/help')) {
        await sendMessage(chatId, '‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã: "–µ–ª –∫—É—Ä–∏—Ü—É —Å —Ä–∏—Å–æ–º"\n‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –±–ª—é–¥–∞\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
        return success()
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (voice) {
        await sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        
        try {
          const fileId = voice.file_id
          const fileUrl = await getFileUrl(fileId)
          const transcribedText = await transcribeVoice(fileUrl)
          
          if (transcribedText) {
            await sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${transcribedText}"`)
            
            // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
            if (transcribedText.toLowerCase().includes('–¥–æ–±–∞–≤—å') || transcribedText.toLowerCase().includes('–µ–ª')) {
              await sendMessage(chatId, 'üçΩÔ∏è –î–æ–±–∞–≤–ª—è—é –ø—Ä–∏—ë–º –ø–∏—â–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫!')
            } else if (transcribedText.toLowerCase().includes('–≤–µ—Å')) {
              await sendMessage(chatId, '‚öñÔ∏è –û–±–Ω–æ–≤–ª—è—é –≤–µ—Å!')
            } else {
              await sendMessage(chatId, 'ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å: "–î–æ–±–∞–≤—å –∫—É—Ä–∏—Ü—É 200 –∫–∫–∞–ª" –∏–ª–∏ "–û–±–Ω–æ–≤–∏ –≤–µ—Å 75 –∫–≥"')
            }
          } else {
            await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
          }
        } catch (error) {
          console.error('Voice processing error:', error)
          await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
        }
        
        return success()
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (text && !text.startsWith('/')) {
        await handleTextMessage(userId, chatId, text)
        return success()
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
      if (photo && photo.length > 0) {
        await sendMessage(chatId, 'üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...')
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ OpenAI
        await sendMessage(chatId, '‚úÖ –§–æ—Ç–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫.')
        return success()
      }
    }
    
    return success()
  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
})

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function success() {
  return new Response(JSON.stringify({ ok: true }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200
  })
}

async function sendMessage(chatId: number, text: string) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML' })
  })
}

async function sendMessageWithInlineKeyboard(chatId: number, text: string, keyboard: any) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ 
      chat_id: chatId, 
      text, 
      parse_mode: 'HTML',
      reply_markup: keyboard
    })
  })
}

async function ensureUser(userId: number, username?: string) {
  const { data } = await supabase
    .from('users')
    .select('user_id')
    .eq('user_id', userId)
    .single()
  
  if (!data) {
    await supabase.from('users').insert({
      user_id: userId,
      username: username,
      calories_goal: 2000,
      protein_goal: 150,
      carbs_goal: 200,
      fat_goal: 70
    })
  }
}

async function getFileUrl(fileId: string) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
  const data = await response.json()
  return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
}

async function transcribeVoice(fileUrl: string): Promise<string | null> {
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
    const audioResponse = await fetch(fileUrl)
    const audioBlob = await audioResponse.blob()
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è Whisper API
    const formData = new FormData()
    formData.append('file', audioBlob, 'audio.ogg')
    formData.append('model', 'whisper-1')
    formData.append('language', 'ru')
    
    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: formData
    })
    
    if (!response.ok) {
      throw new Error(`Whisper API error: ${response.status}`)
    }
    
    const text = await response.text()
    return text.trim()
  } catch (error) {
    console.error('Transcription error:', error)
    return null
  }
}

async function handleCallbackQuery(chatId: number, userId: number, data: string) {
  // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback query
  switch (data) {
    case 'menu_main':
      await sendMessageWithInlineKeyboard(chatId, 'üçé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard())
      break
    case 'menu_profile':
      await sendMessage(chatId, 'üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è')
      break
    case 'menu_calculate':
      await sendMessage(chatId, 'üìä –†–∞—Å—á—ë—Ç –ö–ë–ñ–£\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—á—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞')
      break
    case 'menu_today':
      await sendMessage(chatId, 'üìÖ –°–µ–≥–æ–¥–Ω—è\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Ü–∏–æ–Ω')
      break
    case 'menu_reminders':
      await sendMessage(chatId, '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
      break
    case 'menu_help':
      await sendMessage(chatId, '‚ùì –ü–æ–º–æ—â—å\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /menu, /help')
      break
    default:
      await sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
  }
}

function getMainMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'menu_profile' },
        { text: 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£', callback_data: 'menu_calculate' }
      ],
      [
        { text: 'üìÖ –°–µ–≥–æ–¥–Ω—è', callback_data: 'menu_today' },
        { text: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'menu_reminders' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'menu_help' }
      ]
    ]
  }
}

async function handleTextMessage(userId: number, chatId: number, text: string) {
  // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (text.toLowerCase().includes('–µ–ª') || text.toLowerCase().includes('—Å—ä–µ–ª') || text.toLowerCase().includes('–ø–æ–µ–ª')) {
    await sendMessage(chatId, 'üçΩÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã
    const analysis = await analyzeFoodText(text)
    await saveMeal(userId, analysis)
    
    await sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫:\n\nüçΩÔ∏è ${analysis.name}\nüî• ${analysis.calories} –∫–∫–∞–ª\nü•© ${analysis.protein}–≥ –±–µ–ª–∫–∞\nüçû ${analysis.carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤\nü•ë ${analysis.fat}–≥ –∂–∏—Ä–æ–≤`)
  } else {
    await sendMessage(chatId, 'ü§î –ù–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ –≤—ã –µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–µ–ª –∫—É—Ä–∏—Ü—É —Å —Ä–∏—Å–æ–º"')
  }
}

async function analyzeFoodText(text: string) {
  // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã - –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç OpenAI
  return {
    name: text,
    calories: 300,
    protein: 20,
    carbs: 30,
    fat: 10,
    weight: 200
  }
}

async function saveMeal(userId: number, analysis: any) {
  await supabase.from('meals').insert({
    user_id: userId,
    meal_name: analysis.name,
    kcal: analysis.calories,
    protein: analysis.protein,
    carbs: analysis.carbs,
    fat: analysis.fat,
    weight_grams: analysis.weight
  })
}
