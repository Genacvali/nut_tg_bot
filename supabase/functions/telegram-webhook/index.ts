import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders, status: 200 })
  }
  
  try {
    const update = await req.json()
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline –∫–Ω–æ–ø–æ–∫
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const chatId = callbackQuery.message.chat.id
      const userId = callbackQuery.from.id
      const data = callbackQuery.data
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: callbackQuery.id })
      })
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      if (data === 'stats') {
        const stats = await getDailyStats(userId)
        await sendMessage(chatId, stats)
      } else if (data === 'recipe') {
        await sendMessage(chatId, 'ü•ò –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã...')
        const recipe = await getRecipeSuggestion(userId)
        await sendMessage(chatId, recipe)
      } else if (data === 'undo') {
        const result = await undoLastMeal(userId)
        await sendMessage(chatId, result)
      } else if (data === 'goals') {
        await sendMessage(chatId, getGoalsMessage(userId))
      } else if (data === 'menu') {
        await sendMessageWithKeyboard(chatId, 'üçé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainKeyboard())
      }
      
      return success()
    }
    
    if (update.message) {
      const chatId = update.message.chat.id
      const userId = update.message.from.id
      const text = update.message.text
      const photo = update.message.photo
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text?.startsWith('/start')) {
        await sendMessageWithKeyboard(chatId, getWelcomeMessage(), getMainKeyboard())
        await ensureUser(userId, update.message.from.username)
        return success()
      }
      
      if (text?.startsWith('/menu')) {
        await sendMessageWithKeyboard(chatId, 'üçé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainKeyboard())
        return success()
      }
      
      if (text?.startsWith('/help')) {
        await sendMessage(chatId, getHelpMessage())
        return success()
      }
      
      if (text?.startsWith('/stats')) {
        const stats = await getDailyStats(userId)
        await sendMessage(chatId, stats)
        return success()
      }
      
      if (text?.startsWith('/goals')) {
        await sendMessage(chatId, getGoalsMessage(userId))
        return success()
      }
      
      if (text?.startsWith('/recipe')) {
        await sendMessage(chatId, 'ü•ò –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã...')
        const recipe = await getRecipeSuggestion(userId)
        await sendMessage(chatId, recipe)
        return success()
      }
      
      if (text?.startsWith('/undo')) {
        const result = await undoLastMeal(userId)
        await sendMessage(chatId, result)
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (text && !text.startsWith('/')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ç
        const isQuestion = text.toLowerCase().includes('—á—Ç–æ') || 
                          text.toLowerCase().includes('–ø–æ—Å–æ–≤–µ—Ç—É–π') ||
                          text.toLowerCase().includes('–ø—Ä–µ–¥–ª–æ–∂–∏') ||
                          text.toLowerCase().includes('?')
        
        if (isQuestion) {
          // –î–∞–µ–º —Å–æ–≤–µ—Ç –∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç
          await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...')
          const advice = await getSmartAdvice(userId, text)
          await sendMessage(chatId, advice)
        } else {
          // –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã
          await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
          const analysis = await analyzeFoodText(text)
          await saveMeal(userId, analysis)
          
          // –î–∞–µ–º –∞–Ω–∞–ª–∏–∑ + —Å–æ–≤–µ—Ç
          const advice = await getAdviceAfterMeal(userId, analysis)
          await sendMessage(chatId, formatAnalysis(analysis) + '\n\n' + advice)
        }
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ
      if (photo && photo.length > 0) {
        await sendMessage(chatId, 'üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...')
        const fileId = photo[photo.length - 1].file_id
        const fileUrl = await getFileUrl(fileId)
        const analysis = await analyzePhoto(fileUrl)
        await saveMeal(userId, analysis)
        await sendMessage(chatId, formatAnalysis(analysis))
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞
      if (update.message.voice) {
        await sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        const fileId = update.message.voice.file_id
        const fileUrl = await getFileUrl(fileId)
        const text = await transcribeVoice(fileUrl)
        
        if (text) {
          await sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${text}`)
          const analysis = await analyzeFoodText(text)
          await saveMeal(userId, analysis)
          await sendMessage(chatId, formatAnalysis(analysis))
        } else {
          await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        }
        return success()
      }
    }
    
    return success()
  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
})

function success() {
  return new Response(JSON.stringify({ ok: true }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200
  })
}

async function sendMessage(chatId: number, text: string) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML' })
  })
}

async function sendMessageWithKeyboard(chatId: number, text: string, keyboard: any) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ 
      chat_id: chatId, 
      text, 
      parse_mode: 'HTML',
      reply_markup: keyboard
    })
  })
}

function getMainKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        { text: 'ü•ò –†–µ—Ü–µ–ø—Ç—ã', callback_data: 'recipe' }
      ],
      [
        { text: 'üéØ –¶–µ–ª–∏', callback_data: 'goals' },
        { text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'undo' }
      ],
      [
        { text: 'üçé –ú–µ–Ω—é', callback_data: 'menu' }
      ]
    ]
  }
}

async function ensureUser(userId: number, username?: string) {
  const { data } = await supabase
    .from('users')
    .select('user_id')
    .eq('user_id', userId)
    .single()
  
  if (!data) {
    await supabase.from('users').insert({
      user_id: userId,
      username: username,
      calories_goal: 2000,
      protein_goal: 150,
      carbs_goal: 200,
      fat_goal: 70
    })
  }
}

async function analyzeFoodText(text: string) {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π –ö–ë–ñ–£. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "weight": —á–∏—Å–ª–æ}'
          },
          { role: 'user', content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã: ${text}` }
        ],
        max_tokens: 200
      })
    })
    
    const data = await response.json()
    
    if (!data.choices || !data.choices[0]) {
      throw new Error('Invalid OpenAI response')
    }
    
    const content = data.choices[0].message.content
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try {
      return JSON.parse(content)
    } catch (jsonError) {
      // –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
      console.error('JSON parse error:', jsonError)
      return parseTextResponse(content)
    }
  } catch (error) {
    console.error('Analysis error:', error)
    return {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ',
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      weight: 100
    }
  }
}

function parseTextResponse(text: string) {
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const numbers = text.match(/\d+\.?\d*/g) || []
  return {
    name: '–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞',
    calories: parseInt(numbers[0]) || 0,
    protein: parseFloat(numbers[1]) || 0,
    carbs: parseFloat(numbers[2]) || 0,
    fat: parseFloat(numbers[3]) || 0,
    weight: parseInt(numbers[4]) || 100
  }
}

async function analyzePhoto(fileUrl: string) {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –µ–¥—ã. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ö–ë–ñ–£ –Ω–∞ 100–≥. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "weight": —á–∏—Å–ª–æ}'
              },
              {
                type: 'image_url',
                image_url: { url: fileUrl }
              }
            ]
          }
        ],
        max_tokens: 300
      })
    })
    
    const data = await response.json()
    
    if (!data.choices || !data.choices[0]) {
      throw new Error('Invalid OpenAI response')
    }
    
    const content = data.choices[0].message.content
    
    try {
      return JSON.parse(content)
    } catch (jsonError) {
      console.error('JSON parse error:', jsonError)
      return parseTextResponse(content)
    }
  } catch (error) {
    console.error('Photo analysis error:', error)
    return {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ —Å —Ñ–æ—Ç–æ',
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      weight: 100
    }
  }
}

async function getFileUrl(fileId: string) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
  const data = await response.json()
  return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
}

async function transcribeVoice(fileUrl: string) {
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
    const audioResponse = await fetch(fileUrl)
    const audioBlob = await audioResponse.blob()
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è Whisper API
    const formData = new FormData()
    formData.append('file', audioBlob, 'audio.ogg')
    formData.append('model', 'whisper-1')
    formData.append('language', 'ru')
    
    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: formData
    })
    
    const data = await response.json()
    return data.text || null
  } catch (error) {
    console.error('Transcription error:', error)
    return null
  }
}

async function saveMeal(userId: number, analysis: any) {
  await supabase.from('meals').insert({
    user_id: userId,
    meal_name: analysis.name,
    calories: analysis.calories,
    protein: analysis.protein,
    carbs: analysis.carbs,
    fat: analysis.fat
  })
}

async function getDailyStats(userId: number) {
  const today = new Date().toISOString().split('T')[0]
  
  const { data: meals } = await supabase
    .from('meals')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', `${today}T00:00:00`)
    .lte('created_at', `${today}T23:59:59`)
  
  if (!meals || meals.length === 0) {
    return 'üìä –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ.'
  }
  
  const { data: user } = await supabase
    .from('users')
    .select('*')
    .eq('user_id', userId)
    .single()
  
  const total = meals.reduce((acc, meal) => ({
    calories: acc.calories + meal.calories,
    protein: acc.protein + meal.protein,
    carbs: acc.carbs + meal.carbs,
    fat: acc.fat + meal.fat
  }), { calories: 0, protein: 0, carbs: 0, fat: 0 })
  
  return `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:

üî• –ö–∞–ª–æ—Ä–∏–∏: ${total.calories} / ${user?.calories_goal || 2000}
ü•© –ë–µ–ª–∫–∏: ${total.protein.toFixed(1)}–≥ / ${user?.protein_goal || 150}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${total.carbs.toFixed(1)}–≥ / ${user?.carbs_goal || 200}–≥
ü•ë –ñ–∏—Ä—ã: ${total.fat.toFixed(1)}–≥ / ${user?.fat_goal || 70}–≥

üìù –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: ${meals.length}`
}

function getGoalsMessage(userId: number) {
  return `üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏ –ø–æ –ö–ë–ñ–£:

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/setgoals - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏
/today - –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è`
}

function formatAnalysis(analysis: any) {
  return `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫:

üçΩÔ∏è ${analysis.name}
üî• ${analysis.calories} –∫–∫–∞–ª
ü•© ${analysis.protein}–≥ –±–µ–ª–∫–∞
üçû ${analysis.carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
ü•ë ${analysis.fat}–≥ –∂–∏—Ä–æ–≤`
}

function getWelcomeMessage() {
  return `üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –ö–ë–ñ–£. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
üìù –¢–µ–∫—Å—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—ã –µ–ª–∏
üì∑ –§–æ—Ç–æ –µ–¥—ã
üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–í–µ—á–µ—Ä–æ–º —è –ø—Ä–∏—à–ª—é –æ—Ç—á–µ—Ç –ø–æ –¥–Ω—é!`
}

function getHelpMessage() {
  return `üçé –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É:

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç: "–Ø –µ–ª –±–æ—Ä—â –∏ —Ö–ª–µ–±"
üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/goals - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£
/recipe - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç
/undo - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏

–í–µ—á–µ—Ä–æ–º –≤ 21:00 —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—é –æ—Ç—á–µ—Ç!`
}

async function undoLastMeal(userId: number) {
  try {
    const { data: lastMeal } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()
    
    if (!lastMeal) {
      return '‚ùå –ù–µ—Ç –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
    }
    
    await supabase
      .from('meals')
      .delete()
      .eq('id', lastMeal.id)
    
    return `‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${lastMeal.meal_name} (${lastMeal.calories} –∫–∫–∞–ª)`
  } catch (error) {
    console.error('Undo error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'
  }
}

async function getRecipeSuggestion(userId: number) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) {
      return '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start'
    }
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
      .lte('created_at', `${today}T23:59:59`)
    
    const total = meals?.reduce((acc, meal) => ({
      calories: acc.calories + meal.calories,
      protein: acc.protein + meal.protein,
      carbs: acc.carbs + meal.carbs,
      fat: acc.fat + meal.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    const prompt = `–ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ:
- –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ ${remaining.calories} –∫–∫–∞–ª (–º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ)
- –ë–µ–ª–∫–∞: ${remaining.protein.toFixed(1)}–≥
- –£–≥–ª–µ–≤–æ–¥–æ–≤: ${remaining.carbs.toFixed(1)}–≥
- –ñ–∏—Ä–æ–≤: ${remaining.fat.toFixed(1)}–≥

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üçΩÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
- —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: XXX –∫–∫–∞–ª, XX–≥/XX–≥/XX–≥`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –ø–æ–≤–∞—Ä. –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ—Å—Ç—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 500
      })
    })
    
    const data = await response.json()
    const recipe = data.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'
    
    return `ü•ò –†–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π:\n\n–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª\n\n${recipe}`
  } catch (error) {
    console.error('Recipe error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
  }
}

async function getAdviceAfterMeal(userId: number, meal: any) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) return ''
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
    
    const total = meals?.reduce((acc, m) => ({
      calories: acc.calories + m.calories,
      protein: acc.protein + m.protein,
      carbs: acc.carbs + m.carbs,
      fat: acc.fat + m.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    let advice = 'üí° –°–æ–≤–µ—Ç:\n'
    
    if (remaining.calories < 0) {
      advice += `‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –Ω–∞ ${Math.abs(remaining.calories)} –∫–∫–∞–ª. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è!`
    } else if (remaining.calories < 500) {
      advice += `‚úÖ –û—Å—Ç–∞–ª–æ—Å—å ${remaining.calories} –∫–∫–∞–ª –¥–æ —Ü–µ–ª–∏. –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!`
    } else {
      advice += `üìä –û—Å—Ç–∞–ª–æ—Å—å ${remaining.calories} –∫–∫–∞–ª. `
      
      if (remaining.protein > 30) {
        advice += `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–µ–ª–∫–∞ (${remaining.protein.toFixed(0)}–≥) - –¥–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∏—Ü—É, —Ç–≤–æ—Ä–æ–≥ –∏–ª–∏ —è–π—Ü–∞. `
      }
      if (remaining.carbs < 50 && remaining.protein < 20) {
        advice += `–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–≥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å —Å —É–≥–ª–µ–≤–æ–¥–∞–º–∏.`
      }
    }
    
    return advice
  } catch (error) {
    console.error('Advice error:', error)
    return ''
  }
}

async function getSmartAdvice(userId: number, question: string) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) {
      return '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start'
    }
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
    
    const mealsList = meals?.map(m => `${m.meal_name} (${m.calories} –∫–∫–∞–ª, ${m.protein}–≥ –±–µ–ª–∫–∞)`).join(', ') || '–Ω–∏—á–µ–≥–æ'
    
    const total = meals?.reduce((acc, m) => ({
      calories: acc.calories + m.calories,
      protein: acc.protein + m.protein,
      carbs: acc.carbs + m.carbs,
      fat: acc.fat + m.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    const prompt = `–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –≤ Telegram. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "${question}"

–°–µ–≥–æ–¥–Ω—è –æ–Ω —É–∂–µ –µ–ª: ${mealsList}
–°—ä–µ–¥–µ–Ω–æ: ${total.calories} –∫–∫–∞–ª, ${total.protein.toFixed(0)}–≥ –±–µ–ª–∫–∞, ${total.carbs.toFixed(0)}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, ${total.fat.toFixed(0)}–≥ –∂–∏—Ä–æ–≤

–¶–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å: ${user.calories_goal} –∫–∫–∞–ª, ${user.protein_goal}–≥ –±–µ–ª–∫–∞, ${user.carbs_goal}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, ${user.fat_goal}–≥ –∂–∏—Ä–æ–≤

–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª, ${remaining.protein.toFixed(0)}–≥ –±–µ–ª–∫–∞

–í–ê–ñ–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram!
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown (* _ -)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π** –∏–ª–∏ *–∫—É—Ä—Å–∏–≤*
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
- –ö–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã

–î–∞–π —Å–æ–≤–µ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

üìã –ê–Ω–∞–ª–∏–∑:
[–∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —á—Ç–æ –æ–Ω –µ–ª –∏ —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç]

üçΩÔ∏è –í–∞—Ä–∏–∞–Ω—Ç 1: [–Ω–∞–∑–≤–∞–Ω–∏–µ]
‚Ä¢ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π]
‚Ä¢ –ö–ë–ñ–£: 300 –∫–∫–∞–ª, 20–±/30—É/10–∂
‚Ä¢ [–ø–æ—á–µ–º—É —ç—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç]

üçΩÔ∏è –í–∞—Ä–∏–∞–Ω—Ç 2: [–Ω–∞–∑–≤–∞–Ω–∏–µ]
‚Ä¢ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π]
‚Ä¢ –ö–ë–ñ–£: 250 –∫–∫–∞–ª, 15–±/25—É/12–∂
‚Ä¢ [–ø–æ—á–µ–º—É —ç—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç]

üí° –ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:
[—á—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ —Å–µ–π—á–∞—Å]`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –î–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 600
      })
    })
    
    const data = await response.json()
    const advice = data.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç'
    
    const progressText = `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:
üî• –ö–∞–ª–æ—Ä–∏–∏: ${total.calories} –∏–∑ ${user.calories_goal}
ü•© –ë–µ–ª–∫–∏: ${total.protein.toFixed(0)}–≥ –∏–∑ ${user.protein_goal}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${total.carbs.toFixed(0)}–≥ –∏–∑ ${user.carbs_goal}–≥
ü•ë –ñ–∏—Ä—ã: ${total.fat.toFixed(0)}–≥ –∏–∑ ${user.fat_goal}–≥

–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª

---

${advice}`
    
    return progressText
  } catch (error) {
    console.error('Smart advice error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
  }
}
