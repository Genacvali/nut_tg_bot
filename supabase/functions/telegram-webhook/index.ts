import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

// –¶–µ–Ω—ã OpenAI API (–∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤)
const OPENAI_PRICES = {
  'gpt-4o': { input: 0.0025, output: 0.010 },        // $2.50/$10.00 per 1M tokens
  'gpt-4o-mini': { input: 0.00015, output: 0.0006 }, // $0.15/$0.60 per 1M tokens
  'whisper-1': 0.006 / 60                             // $0.006 per minute
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async function addToContext(userId: number, role: 'user' | 'assistant', content: string) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('conversation_context')
      .eq('user_id', userId)
      .single()
    
    const context = user?.conversation_context || []
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.push({
      role,
      content,
      timestamp: new Date().toISOString()
    })
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    const limitedContext = context.slice(-10)
    
    await supabase
      .from('users')
      .update({ conversation_context: limitedContext })
      .eq('user_id', userId)
      
  } catch (error) {
    console.error('Add context error:', error)
  }
}

async function getContext(userId: number) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('conversation_context')
      .eq('user_id', userId)
      .single()
    
    return user?.conversation_context || []
  } catch (error) {
    console.error('Get context error:', error)
    return []
  }
}

async function clearContext(userId: number) {
  try {
    await supabase
      .from('users')
      .update({ conversation_context: [] })
      .eq('user_id', userId)
  } catch (error) {
    console.error('Clear context error:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ OpenAI
async function trackOpenAICost(userId: number, model: string, promptTokens: number, completionTokens: number, audioMinutes?: number) {
  try {
    let cost = 0
    
    if (model === 'whisper-1' && audioMinutes) {
      // Whisper –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ –º–∏–Ω—É—Ç—ã
      cost = audioMinutes * OPENAI_PRICES['whisper-1']
    } else if (model === 'gpt-4o') {
      // GPT-4o –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ —Ç–æ–∫–µ–Ω—ã
      cost = (promptTokens / 1000) * OPENAI_PRICES['gpt-4o'].input +
             (completionTokens / 1000) * OPENAI_PRICES['gpt-4o'].output
    } else if (model === 'gpt-4o-mini') {
      // GPT-4o-mini –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ —Ç–æ–∫–µ–Ω—ã
      cost = (promptTokens / 1000) * OPENAI_PRICES['gpt-4o-mini'].input +
             (completionTokens / 1000) * OPENAI_PRICES['gpt-4o-mini'].output
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('openai_cost_total, openai_requests_count')
      .eq('user_id', userId)
      .single()
    
    await supabase
      .from('users')
      .update({
        openai_cost_total: (user?.openai_cost_total || 0) + cost,
        openai_requests_count: (user?.openai_requests_count || 0) + 1,
        last_request_at: new Date().toISOString()
      })
      .eq('user_id', userId)
    
    console.log(`User ${userId}: +$${cost.toFixed(4)} (total: $${((user?.openai_cost_total || 0) + cost).toFixed(4)})`)
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    const totalCost = (user?.openai_cost_total || 0) + cost
    if (totalCost > 5.0) {
      console.warn(`‚ö†Ô∏è User ${userId} exceeded $5 limit: $${totalCost.toFixed(2)}`)
    }
    
  } catch (error) {
    console.error('Track cost error:', error)
  }
}

// Wrapper –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ OpenAI —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
async function callOpenAI(userId: number, requestBody: any) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(requestBody)
  })
  
  const data = await response.json()
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
  if (data.usage) {
    await trackOpenAICost(
      userId,
      requestBody.model,
      data.usage.prompt_tokens,
      data.usage.completion_tokens
    )
  }
  
  return data
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders, status: 200 })
  }
  
  try {
    const update = await req.json()
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const chatId = callbackQuery.message.chat.id
      const userId = callbackQuery.from.id
      const data = callbackQuery.data
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
      await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ callback_query_id: callbackQuery.id })
      })
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞
      if (data.startsWith('edit_meal_')) {
        const mealId = data.replace('edit_meal_', '')
        await sendMessage(chatId, '‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–¢—Ä–µ—Å–∫–∞ —Å —á–µ—Ä–Ω–∏–∫–æ–π –∏ —à–ø–∏–Ω–∞—Ç–æ–º"')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await supabase.from('users').update({ 
          editing_meal_id: mealId 
        }).eq('user_id', userId)
        
        return success()
      }
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª—é–¥–∞
      if (data === 'confirm_meal') {
        await sendMessageWithKeyboard(chatId, '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!', getMainKeyboard())
        return success()
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      if (data === 'clear_today_stats') {
        const today = new Date().toISOString().split('T')[0]
        const { error } = await supabase
          .from('meals')
          .delete()
          .eq('user_id', userId)
          .gte('created_at', `${today}T00:00:00`)
          .lte('created_at', `${today}T23:59:59`)
        
        if (error) {
          await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
        } else {
          await sendMessageWithKeyboard(chatId, 'üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—á–∏—â–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.', getMainKeyboard())
        }
        return success()
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (data === 'clear_all_stats') {
        const { error } = await supabase
          .from('meals')
          .delete()
          .eq('user_id', userId)
        
        if (error) {
          await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
        } else {
          await sendMessageWithKeyboard(chatId, 'üóëÔ∏è –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –æ—á–∏—â–µ–Ω–∞!\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.', getMainKeyboard())
        }
        return success()
      }
      
      return success()
    }
    
    if (update.message) {
      const chatId = update.message.chat.id
      const userId = update.message.from.id
      const text = update.message.text
      const photo = update.message.photo
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text?.startsWith('/start')) {
        await ensureUser(userId, update.message.from.username)
        const user = await getUser(userId)
        
        if (!user || !user.height) {
          // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          await sendMessage(chatId, getInitialSetupMessage())
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
          await sendMessageWithKeyboard(chatId, getWelcomeMessage(), getMainKeyboard())
        }
        return success()
      }
      
      if (text?.startsWith('/menu') || text?.startsWith('/help')) {
        await sendMessageWithKeyboard(chatId, getHelpMessage(), getMainKeyboard())
        return success()
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
      if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' || text?.startsWith('/stats')) {
        const stats = await getDailyStats(userId)
        await sendMessageWithKeyboard(chatId, stats, getMainKeyboard())
        return success()
      }
      
      if (text?.startsWith('/cost')) {
        const { data: user } = await supabase
          .from('users')
          .select('openai_cost_total, openai_requests_count, last_request_at')
          .eq('user_id', userId)
          .single()
        
        const costMessage = `üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI API:

üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${(user?.openai_cost_total || 0).toFixed(4)}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${user?.openai_requests_count || 0}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: ${user?.last_request_at ? new Date(user.last_request_at).toLocaleString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üí° –õ–∏–º–∏—Ç: $5.00 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
        
        await sendMessageWithKeyboard(chatId, costMessage, getMainKeyboard())
        return success()
      }
      
      if (text?.startsWith('/clear')) {
        await clearContext(userId)
        await sendMessageWithKeyboard(chatId, 'üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–∞—á–Ω–µ—Ç –¥–∏–∞–ª–æ–≥ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.', getMainKeyboard())
        return success()
      }
      
      if (text === 'ü•ò –ß—Ç–æ –ø–æ–µ—Å—Ç—å?' || text?.startsWith('/recipe')) {
        await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...')
        const advice = await getSmartAdvice(userId, '—á—Ç–æ –º–Ω–µ –ø–æ–µ—Å—Ç—å —Å–µ–π—á–∞—Å?')
        await sendMessageWithKeyboard(chatId, advice, getMainKeyboard())
        return success()
      }
      
      if (text === '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ' || text?.startsWith('/undo')) {
        const result = await undoLastMeal(userId)
        await sendMessageWithKeyboard(chatId, result, getMainKeyboard())
        return success()
      }
      
      if (text === '‚öôÔ∏è –ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' || text?.startsWith('/params')) {
        const user = await getUser(userId)
        if (user) {
          const paramsText = getUserParamsText(user)
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
          const inlineKeyboard = {
            inline_keyboard: [[
              { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'clear_today_stats' },
            ], [
              { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'clear_all_stats' }
            ]]
          }
          
          await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: chatId,
              text: paramsText,
              reply_markup: inlineKeyboard
            })
          })
        } else {
          await sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start')
        }
        return success()
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π –ø–æ –ö–ë–ñ–£
      if (text?.startsWith('/setgoals ')) {
        const goalsText = text.replace('/setgoals ', '')
        const result = await updateUserGoals(userId, goalsText)
        await sendMessageWithKeyboard(chatId, result, getMainKeyboard())
        return success()
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π
      if (text?.startsWith('/calories ')) {
        const calories = parseInt(text.replace('/calories ', ''))
        if (calories && calories > 500 && calories < 10000) {
          await supabase
            .from('users')
            .update({ calories_goal: calories })
            .eq('user_id', userId)
          
          await sendMessageWithKeyboard(chatId, `‚úÖ –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${calories} –∫–∫–∞–ª/–¥–µ–Ω—å`, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π: /calories 2500')
        }
        return success()
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Apple Watch / Apple Health
      if (text?.startsWith('/sync_weight ')) {
        const weight = parseFloat(text.split(' ')[1])
        if (weight && weight > 30 && weight < 300) {
          await syncHealthData(userId, 'weight', weight)
          await sendMessageWithKeyboard(chatId, `‚úÖ –í–µ—Å –∑–∞–ø–∏—Å–∞–Ω: ${weight} –∫–≥\n\n‚åö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Apple Shortcuts –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!`, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: /sync_weight 75.5')
        }
        return success()
      }

      if (text?.startsWith('/sync_steps ')) {
        const steps = parseInt(text.split(' ')[1])
        if (steps && steps > 0 && steps < 100000) {
          await syncHealthData(userId, 'steps', steps)
          let message = `‚úÖ –®–∞–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã: ${steps.toLocaleString()} üëü`
          
          // –ú–æ—Ç–∏–≤–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
          if (steps >= 15000) {
            message += `\n\nüî• –û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n–î–æ–±–∞–≤–∏–ª +300 –∫–∫–∞–ª –∫ –≤–∞—à–µ–π –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º–µ.`
          } else if (steps >= 10000) {
            message += `\n\nüëç –•–æ—Ä–æ—à–æ! –¶–µ–ª—å 10000 —à–∞–≥–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!`
          } else if (steps >= 5000) {
            message += `\n\nüí™ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –¥–∞–≤–∞–π—Ç–µ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ 10000!`
          }
          
          await sendMessageWithKeyboard(chatId, message, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: /sync_steps 12000')
        }
        return success()
      }

      if (text?.startsWith('/sync_sleep ')) {
        const sleep = parseFloat(text.split(' ')[1])
        if (sleep && sleep > 0 && sleep < 24) {
          await syncHealthData(userId, 'sleep_hours', sleep)
          let message = `‚úÖ –°–æ–Ω –∑–∞–ø–∏—Å–∞–Ω: ${sleep}—á üõå`
          
          // –°–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞
          if (sleep < 6) {
            message += `\n\n‚ö†Ô∏è –ú–∞–ª–æ —Å–Ω–∞! –û—Ä–≥–∞–Ω–∏–∑–º –≤ —Å—Ç—Ä–µ—Å—Å–µ.\n–î–æ–±–∞–≤–∏–ª +200 –∫–∫–∞–ª –∫ –Ω–æ—Ä–º–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`
          } else if (sleep >= 7 && sleep <= 9) {
            message += `\n\n‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã–π —Å–æ–Ω! –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!`
          } else if (sleep > 9) {
            message += `\n\nüò¥ –ú–Ω–æ–≥–æ —Å–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö?`
          }
          
          await sendMessageWithKeyboard(chatId, message, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Å—ã —Å–Ω–∞: /sync_sleep 7.5')
        }
        return success()
      }

      if (text?.startsWith('/sync_calories ')) {
        const calories = parseInt(text.split(' ')[1])
        if (calories && calories > 0 && calories < 5000) {
          await syncHealthData(userId, 'active_calories', calories)
          let message = `‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞: ${calories} –∫–∫–∞–ª üî•`
          
          if (calories >= 500) {
            message += `\n\nüí™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!\n–î–æ–±–∞–≤–∏–ª ${calories} –∫–∫–∞–ª –∫ –≤–∞—à–µ–π –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º–µ.`
          } else if (calories >= 300) {
            message += `\n\nüëç –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`
          }
          
          await sendMessageWithKeyboard(chatId, message, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: /sync_calories 450')
        }
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (text && !text.startsWith('/')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª—é–¥–æ
        const { data: userData } = await supabase
          .from('users')
          .select('editing_meal_id')
          .eq('user_id', userId)
          .single()
        
        if (userData?.editing_meal_id) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
          await supabase
            .from('meals')
            .update({ meal_name: text })
            .eq('id', userData.editing_meal_id)
          
          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          await supabase
            .from('users')
            .update({ editing_meal_id: null })
            .eq('user_id', userId)
          
          await sendMessageWithKeyboard(chatId, `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\nüçΩÔ∏è ${text}\n\n–¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.`, getMainKeyboard())
          return success()
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ü–µ–ª—å
        const isUserParams = (text.toLowerCase().includes('—Ä–æ—Å—Ç') && text.toLowerCase().includes('–≤–µ—Å')) ||
                            text.toLowerCase().includes('–ø–µ—Ä–µ—Å–æ–±–µ—Ä–µ–º') ||
                            text.toLowerCase().includes('–ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º') ||
                            text.toLowerCase().includes('–∫–∞–ª–æ—Ä–∞–∂') ||
                            text.toLowerCase().includes('–ø–∞—Ä–∞–º–µ—Ç—Ä—ã') ||
                            text.toLowerCase().includes('–∑–∞–ø–∏—Å–∞—Ç—å') ||
                            text.toLowerCase().includes('–æ–±–Ω–æ–≤–∏') ||
                            text.toLowerCase().includes('–∏–∑–º–µ–Ω–∏') ||
                            text.toLowerCase().includes('–∑–∞–Ω–æ–≤–æ') ||
                            (text.toLowerCase().includes('–ø–æ—Ö—É–¥–µ—Ç—å') && text.toLowerCase().includes('–∫–≥')) ||
                            (text.toLowerCase().includes('–ø–æ—Ö—É–¥–µ—Ç—å') && text.toLowerCase().includes('–≤–µ—Å')) ||
                            (text.match(/\d+\s*(—Å–º|–º|–º–µ—Ç—Ä)/i) && text.match(/\d+\s*–∫–≥/i))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏ –ö–ë–ñ–£
        const isGoalChange = text.toLowerCase().includes('—Ö–æ—á—É') && (
          text.toLowerCase().includes('–∫–∞–ª–æ—Ä–∏') ||
          text.toLowerCase().includes('–±–µ–ª–∫') ||
          text.toLowerCase().includes('—É–≥–ª–µ–≤–æ–¥') ||
          text.toLowerCase().includes('–∂–∏—Ä') ||
          text.toLowerCase().includes('—Ü–µ–ª—å') ||
          text.toLowerCase().includes('–Ω–æ—Ä–º')
        ) || text.match(/\d+\s*(–∫–∫–∞–ª|–∫–∞–ª–æ—Ä–∏|–±–µ–ª–∫|—É–≥–ª–µ–≤–æ–¥|–∂–∏—Ä)/i)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ë–ñ–£
        const isAcceptBJU = text.toLowerCase().includes('–¥–∞') || 
                           text.toLowerCase().includes('—É—Å—Ç–∞–Ω–æ–≤–∏ –±–∂—É') ||
                           text.toLowerCase().includes('—Å–æ–≥–ª–∞—Å–µ–Ω') ||
                           text.toLowerCase().includes('—Ö–æ—Ä–æ—à–æ')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –µ–¥–µ
        const isFoodPreferences = text.toLowerCase().includes('–ª—é–±–ª—é') ||
                                 text.toLowerCase().includes('–Ω—Ä–∞–≤–∏—Ç—Å—è') ||
                                 text.toLowerCase().includes('–µ–º') ||
                                 text.toLowerCase().includes('–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é') ||
                                 text.toLowerCase().includes('–æ–±–æ–∂–∞—é')
        
        if (isAcceptBJU) {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ë–ñ–£
          const { data: user } = await supabase
            .from('users')
            .select('calories_goal')
            .eq('user_id', userId)
            .single()
          
          if (user?.calories_goal) {
            const calories = user.calories_goal
            const protein = Math.round(calories * 0.25 / 4)
            const carbs = Math.round(calories * 0.45 / 4)
            const fat = Math.round(calories * 0.30 / 9)
            
            await supabase
              .from('users')
              .update({ 
                protein_goal: protein,
                carbs_goal: carbs,
                fat_goal: fat
              })
              .eq('user_id', userId)
            
            await sendMessageWithKeyboard(chatId, 
              `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏:\n\n` +
              `üî• –ö–∞–ª–æ—Ä–∏–∏: ${calories}\n` +
              `ü•© –ë–µ–ª–∫–∏: ${protein}–≥ (25%)\n` +
              `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${carbs}–≥ (45%)\n` +
              `ü•ë –ñ–∏—Ä—ã: ${fat}–≥ (30%)\n\n` +
              `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–ª–∞–Ω! –•–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å? üçΩÔ∏è\n\n` +
              `${calculateWaterRecommendation(user, null)}`, 
              getMainKeyboard())
          }
        } else if (isFoodPreferences) {
          // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
          await sendMessage(chatId, 'üçΩÔ∏è –û—Ç–ª–∏—á–Ω–æ! –°–æ—Å—Ç–∞–≤–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...')
          const mealPlan = await generatePersonalMealPlan(userId, text)
          const { data: user } = await supabase
            .from('users')
            .select('*')
            .eq('user_id', userId)
            .single()
          const waterRec = calculateWaterRecommendation(user, null)
          await sendMessageWithKeyboard(chatId, mealPlan + '\n\n' + waterRec, getMainKeyboard())
        } else if (isGoalChange) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏
          await sendMessage(chatId, 'üéØ –û–±–Ω–æ–≤–ª—è—é –≤–∞—à–∏ —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£...')
          const result = await updateUserGoals(userId, text)
          await sendMessageWithKeyboard(chatId, result, getMainKeyboard())
        } else if (isUserParams) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await sendMessage(chatId, 'üìù –û–±–Ω–æ–≤–ª—è—é –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ü–µ–ª–∏...')
          const result = await updateUserParams(userId, text)
          await sendMessageWithKeyboard(chatId, result, getMainKeyboard())
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ç
          const isQuestion = text.toLowerCase().includes('—á—Ç–æ') || 
                            text.toLowerCase().includes('–ø–æ—Å–æ–≤–µ—Ç—É–π') ||
                            text.toLowerCase().includes('–ø—Ä–µ–¥–ª–æ–∂–∏') ||
                            text.toLowerCase().includes('?') ||
                            text.toLowerCase().includes('—Ö–æ—á—É') ||
                            text.toLowerCase().includes('–º–æ–∂–Ω–æ') ||
                            text.toLowerCase().includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É–π') ||
                            text.toLowerCase().includes('—Å–æ–≤–µ—Ç') ||
                            text.toLowerCase().includes('–ø–æ–º–æ–≥–∏') ||
                            text.toLowerCase().includes('—á—Ç–æ-—Ç–æ') ||
                            text.toLowerCase().includes('–Ω–∏—á–µ–≥–æ') ||
                            text.toLowerCase().includes('–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π') ||
                            text.toLowerCase().includes('—á—Ç–æ –±—ã') ||
                            text.toLowerCase().includes('—á—Ç–æ –º–Ω–µ') ||
                            text.toLowerCase().includes('–Ω–µ –∑–Ω–∞—é') ||
                            text.toLowerCase().includes('–≤—ã–±–æ—Ä') ||
                            text.toLowerCase().includes('–≤–∞—Ä–∏–∞–Ω—Ç')
          
          if (isQuestion) {
            // –î–∞–µ–º —Å–æ–≤–µ—Ç –∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç
            await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...')
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await addToContext(userId, 'user', text)
            
            const advice = await getSmartAdvice(userId, text)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await addToContext(userId, 'assistant', advice)
            
            await sendMessageWithKeyboard(chatId, advice, getMainKeyboard())
          } else {
            // –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã
            await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
            const analysis = await analyzeFoodText(text)
            await saveMeal(userId, analysis)
            
            // –î–∞–µ–º –∞–Ω–∞–ª–∏–∑ + —Å–æ–≤–µ—Ç
            const advice = await getAdviceAfterMeal(userId, analysis)
            await sendMessageWithKeyboard(chatId, formatAnalysis(analysis) + '\n\n' + advice, getMainKeyboard())
          }
        }
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ
      if (photo && photo.length > 0) {
        await sendMessage(chatId, 'üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...')
        const fileId = photo[photo.length - 1].file_id
        const fileUrl = await getFileUrl(fileId)
        const analysis = await analyzePhoto(fileUrl)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º meal_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const { data: mealData } = await supabase.from('meals').insert({
          user_id: userId,
          meal_name: analysis.name,
          calories: analysis.calories,
          protein: analysis.protein,
          carbs: analysis.carbs,
          fat: analysis.fat,
          protein_percent: analysis.protein_percent,
          carbs_percent: analysis.carbs_percent,
          fat_percent: analysis.fat_percent,
          weight_grams: analysis.weight
        }).select('id').single()
        
        const mealId = mealData?.id
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editKeyboard = {
          inline_keyboard: [[
            { text: '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: `edit_meal_${mealId}` },
            { text: '‚úÖ –í–µ—Ä–Ω–æ', callback_data: 'confirm_meal' }
          ]]
        }
        
        await sendMessageWithInlineKeyboard(chatId, formatAnalysis(analysis) + '\n\nüí° –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ - –Ω–∞–∂–º–∏—Ç–µ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å"', editKeyboard)
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞
      if (update.message.voice) {
        await sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        const fileId = update.message.voice.file_id
        const fileUrl = await getFileUrl(fileId)
        const text = await transcribeVoice(fileUrl)
        
        if (text) {
          await sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${text}`)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          const isUserParams = (text.toLowerCase().includes('—Ä–æ—Å—Ç') && text.toLowerCase().includes('–≤–µ—Å')) ||
                              text.toLowerCase().includes('–ø–µ—Ä–µ—Å–æ–±–µ—Ä–µ–º') ||
                              text.toLowerCase().includes('–ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º') ||
                              text.toLowerCase().includes('–∫–∞–ª–æ—Ä–∞–∂') ||
                              text.toLowerCase().includes('–ø–∞—Ä–∞–º–µ—Ç—Ä—ã') ||
                              text.toLowerCase().includes('–∑–∞–ø–∏—Å–∞—Ç—å') ||
                              text.toLowerCase().includes('–æ–±–Ω–æ–≤–∏') ||
                              text.toLowerCase().includes('–∏–∑–º–µ–Ω–∏') ||
                              text.toLowerCase().includes('–∑–∞–Ω–æ–≤–æ') ||
                              (text.toLowerCase().includes('–ø–æ—Ö—É–¥–µ—Ç—å') && text.toLowerCase().includes('–∫–≥')) ||
                              (text.toLowerCase().includes('–ø–æ—Ö—É–¥–µ—Ç—å') && text.toLowerCase().includes('–≤–µ—Å')) ||
                              (text.match(/\d+\s*(—Å–º|–º|–º–µ—Ç—Ä)/i) && text.match(/\d+\s*–∫–≥/i))
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫—Ä–∏—Ç–∏–∫–∞/–æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ü–µ–ª–µ–π (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞)
          const isGoalDiscussion = !isUserParams && (
                                   text.toLowerCase().includes('–º–Ω–æ–≥–æ') ||
                                   text.toLowerCase().includes('–º–∞–ª–æ') ||
                                   text.toLowerCase().includes('–≤—ã—Å–æ–∫–∏–π') ||
                                   text.toLowerCase().includes('–Ω–∏–∑–∫–∏–π') ||
                                   text.toLowerCase().includes('–ø–µ—Ä–µ—Å–º–æ—Ç—Ä')
                                  ) && (
                                   text.toLowerCase().includes('–∫–∞–ª–æ—Ä–∏') ||
                                   text.toLowerCase().includes('–±–µ–ª–∫') ||
                                   text.toLowerCase().includes('—É–≥–ª–µ–≤–æ–¥') ||
                                   text.toLowerCase().includes('–∂–∏—Ä') ||
                                   text.toLowerCase().includes('–∫–±–∂—É')
                                  )
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≤–µ—Ç –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã
          const isAdviceRequest = !isUserParams && !isGoalDiscussion && (
                                 text.toLowerCase().includes('—á—Ç–æ') || 
                                 text.toLowerCase().includes('—Ö–æ—á—É') ||
                                 text.toLowerCase().includes('–º–æ–∂–Ω–æ') ||
                                 text.toLowerCase().includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É–π') ||
                                 text.toLowerCase().includes('—Å–æ–≤–µ—Ç') ||
                                 text.toLowerCase().includes('–ø–æ–º–æ–≥–∏') ||
                                 text.toLowerCase().includes('—á—Ç–æ-—Ç–æ') ||
                                 text.toLowerCase().includes('–Ω–∏—á–µ–≥–æ') ||
                                 text.toLowerCase().includes('–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π') ||
                                 text.toLowerCase().includes('—á—Ç–æ –±—ã') ||
                                 text.toLowerCase().includes('—á—Ç–æ –º–Ω–µ')
                               )
          
          if (isUserParams) {
            // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            await sendMessage(chatId, 'üìù –û–±–Ω–æ–≤–ª—è—é –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ü–µ–ª–∏...')
            const result = await updateUserParams(userId, text)
            await sendMessageWithKeyboard(chatId, result, getMainKeyboard())
          } else if (isGoalDiscussion) {
            // –≠—Ç–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ü–µ–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é —Ü–µ–ª–∏...')
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await addToContext(userId, 'user', text)
            
            const advice = await getSmartAdvice(userId, text)
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            await extractAndUpdateGoals(userId, advice)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await addToContext(userId, 'assistant', advice)
            
            await sendMessageWithKeyboard(chatId, advice, getMainKeyboard())
          } else if (isAdviceRequest) {
            // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≤–µ—Ç - –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...')
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await addToContext(userId, 'user', text)
            
            const advice = await getSmartAdvice(userId, text)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await addToContext(userId, 'assistant', advice)
            
            await sendMessageWithKeyboard(chatId, advice, getMainKeyboard())
          } else {
            // –≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            const analysis = await analyzeFoodText(text)
            await saveMeal(userId, analysis)
            await sendMessage(chatId, formatAnalysis(analysis))
            
            // –î–∞–µ–º —Å–æ–≤–µ—Ç –ø–æ—Å–ª–µ –µ–¥—ã
            const advice = await getAdviceAfterMeal(userId, analysis)
            if (advice) {
              await sendMessage(chatId, advice)
            }
          }
        } else {
          await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        }
        return success()
      }
    }
    
    return success()
  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
})

function success() {
  return new Response(JSON.stringify({ ok: true }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200
  })
}

async function sendMessage(chatId: number, text: string) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML' })
  })
}

async function sendMessageWithKeyboard(chatId: number, text: string, keyboard: any) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ 
      chat_id: chatId, 
      text, 
      parse_mode: 'HTML',
      reply_markup: keyboard
    })
  })
}

async function sendMessageWithInlineKeyboard(chatId: number, text: string, inlineKeyboard: any) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ 
      chat_id: chatId, 
      text,
      reply_markup: inlineKeyboard
    })
  })
}

function getMainKeyboard() {
  return {
    keyboard: [
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { text: 'ü•ò –ß—Ç–æ –ø–æ–µ—Å—Ç—å?' }
      ],
      [
        { text: '‚öôÔ∏è –ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
        { text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ' }
      ]
    ],
    resize_keyboard: true,
    persistent: true
  }
}

async function ensureUser(userId: number, username?: string) {
  const { data } = await supabase
    .from('users')
    .select('user_id')
    .eq('user_id', userId)
    .single()
  
  if (!data) {
    await supabase.from('users').insert({
      user_id: userId,
      username: username,
      calories_goal: 2000,
      protein_goal: 150,
      carbs_goal: 200,
      fat_goal: 70
    })
  }
}

async function analyzeFoodText(text: string) {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ö–ë–ñ–£ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã.

–í–ê–ñ–ù–û:
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤–µ—Å/–≥—Ä–∞–º–º–æ–≤–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ
- –ï—Å–ª–∏ –Ω–µ—Ç - –æ—Ü–µ–Ω–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Ä—Ü–∏—é
- –£—á–∏—Ç—ã–≤–∞–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–∂–∞—Ä–µ–Ω–æ–µ +–º–∞—Å–ª–æ, –≤–∞—Ä–µ–Ω–æ–µ –±–µ–∑ –º–∞—Å–ª–∞)
- –°—É–º–º–∏—Ä—É–π –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
- –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –¥–µ—Ç–∞–ª—è–º: "—Å –º–∞—Å–ª–æ–º", "–æ—Å—Ç—Ä—ã–π", "–∂–∞—Ä–µ–Ω—ã–π"
- –†–∞—Å—Å—á–∏—Ç–∞–π —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ë–ñ–£ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫–∞–ª–æ—Ä–∏–π

–ü–†–ò–ú–ï–†–´:
"—è–∏—á–Ω–∏—Ü–∞ –∏–∑ 2 —è–∏—Ü" ‚Üí 2 —è–π—Ü–∞ ~100–≥, –∂–∞—Ä–µ–Ω—ã–µ –Ω–∞ –º–∞—Å–ª–µ ~200 –∫–∫–∞–ª
"—Ç–∞—Ä–µ–ª–∫–∞ –±–æ—Ä—â–∞" ‚Üí ~300–≥, ~150 –∫–∫–∞–ª
"–≥—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏—Ü–µ–π" ‚Üí –≥—Ä–µ—á–∫–∞ 150–≥ + –∫—É—Ä–∏—Ü–∞ 100–≥ = ~350 –∫–∫–∞–ª

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤):
{"name": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "weight": —á–∏—Å–ª–æ, "protein_percent": —á–∏—Å–ª–æ, "carbs_percent": —á–∏—Å–ª–æ, "fat_percent": —á–∏—Å–ª–æ}`
          },
          { 
            role: 'user', 
            content: `–ß—Ç–æ —è —Å—ä–µ–ª –∏ –∫–∞–∫–æ–µ –ö–ë–ñ–£? "${text}"` 
          }
        ],
        max_tokens: 300,
        temperature: 0.5
      })
    })
    
    const data = await response.json()
    
    if (!data.choices || !data.choices[0]) {
      throw new Error('Invalid OpenAI response')
    }
    
    let content = data.choices[0].message.content
    
    // –£–±–∏—Ä–∞–µ–º markdown –µ—Å–ª–∏ –µ—Å—Ç—å
    content = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try {
      const parsed = JSON.parse(content)
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      return {
        name: parsed.name || '–ü—Ä–∏–µ–º –ø–∏—â–∏',
        calories: Math.round(parsed.calories || 0),
        protein: Math.round((parsed.protein || 0) * 10) / 10,
        carbs: Math.round((parsed.carbs || 0) * 10) / 10,
        fat: Math.round((parsed.fat || 0) * 10) / 10,
        weight: Math.round(parsed.weight || 100),
        protein_percent: Math.round((parsed.protein_percent || 0) * 10) / 10,
        carbs_percent: Math.round((parsed.carbs_percent || 0) * 10) / 10,
        fat_percent: Math.round((parsed.fat_percent || 0) * 10) / 10
      }
    } catch (jsonError) {
      // –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
      console.error('JSON parse error:', jsonError, 'Content:', content)
      return parseTextResponse(content)
    }
  } catch (error) {
    console.error('Analysis error:', error)
    return {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ',
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      weight: 100
    }
  }
}

function parseTextResponse(text: string) {
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const numbers = text.match(/\d+\.?\d*/g) || []
  const calories = parseInt(numbers[0] || '0') || 0
  const protein = parseFloat(numbers[1] || '0') || 0
  const carbs = parseFloat(numbers[2] || '0') || 0
  const fat = parseFloat(numbers[3] || '0') || 0
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
  const proteinCalories = protein * 4
  const carbsCalories = carbs * 4
  const fatCalories = fat * 9
  
  return {
    name: '–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞',
    calories: calories,
    protein: protein,
    carbs: carbs,
    fat: fat,
    weight: parseInt(numbers[4] || '100') || 100,
    protein_percent: calories > 0 ? Math.round((proteinCalories / calories) * 100 * 10) / 10 : 0,
    carbs_percent: calories > 0 ? Math.round((carbsCalories / calories) * 100 * 10) / 10 : 0,
    fat_percent: calories > 0 ? Math.round((fatCalories / calories) * 100 * 10) / 10 : 0
  }
}

async function analyzePhoto(fileUrl: string) {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ç–æ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –±–ª—é–¥–∞ –Ω–∞ –Ω–µ–º
2. –û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å/–æ–±—ä–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
3. –†–∞—Å—Å—á–∏—Ç–∞–π –æ–±—â–µ–µ –ö–ë–ñ–£ –¥–ª—è –í–°–ï–ô –ø–æ—Ä—Ü–∏–∏ –Ω–∞ —Ñ–æ—Ç–æ (–Ω–µ –Ω–∞ 100–≥!)
4. –†–∞—Å—Å—á–∏—Ç–∞–π —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ë–ñ–£ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫–∞–ª–æ—Ä–∏–π
5. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

–í–ê–ñ–ù–û:
- –£–∫–∞–∑—ã–≤–∞–π –†–ï–ê–õ–¨–ù–´–ô –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞—Ä–µ–ª–∫–∞ —Å—É–ø–∞ ~300–≥, –∫–æ—Ç–ª–µ—Ç–∞ ~100–≥)
- –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ - —Å—á–∏—Ç–∞–π –æ–±—â–µ–µ –ö–ë–ñ–£
- –£—á–∏—Ç—ã–≤–∞–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–∂–∞—Ä–µ–Ω–æ–µ, –≤–∞—Ä–µ–Ω–æ–µ, –∑–∞–ø–µ—á–µ–Ω–Ω–æ–µ)
- –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ —Å–æ—É—Å–∞–º, –º–∞—Å–ª—É, –¥–æ–±–∞–≤–∫–∞–º
- –†–∞—Å—Å—á–∏—Ç–∞–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£
- –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –ø—Ä–æ–¥—É–∫—Ç—ã! –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ä—ã–±—É - –ø–∏—à–∏ —Ä—ã–±—É, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å —è–≥–æ–¥—ã - –ø–∏—à–∏ —è–≥–æ–¥—ã

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –û–ü–ò–°–ê–ù–ò–Ø:
- "–¢—Ä–µ—Å–∫–∞ –∂–∞—Ä–µ–Ω–∞—è —Å —á–µ—Ä–Ω–∏–∫–æ–π –∏ —à–ø–∏–Ω–∞—Ç–æ–º" (–ù–ï "–ø–µ–ª—å–º–µ–Ω–∏")
- "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏" (–ù–ï –ø—Ä–æ—Å—Ç–æ "–º—è—Å–æ")
- "–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –æ—Ä–µ—Ö–∞–º–∏" (–ù–ï –ø—Ä–æ—Å—Ç–æ "–∫–∞—à–∞")

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ markdown):
{"name": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "weight": —á–∏—Å–ª–æ, "protein_percent": —á–∏—Å–ª–æ, "carbs_percent": —á–∏—Å–ª–æ, "fat_percent": —á–∏—Å–ª–æ}`
          },
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –µ–¥—É –¥–µ—Ç–∞–ª—å–Ω–æ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å –Ω–∞ —Ñ–æ—Ç–æ? –ù–∞–∑–æ–≤–∏ –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ. –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –≤–µ—Å–∏—Ç –≤—Å—è –ø–æ—Ä—Ü–∏—è? –ö–∞–∫–æ–µ –ö–ë–ñ–£ –¥–ª—è –≤—Å–µ–π –ø–æ—Ä—Ü–∏–∏?'
              },
              {
                type: 'image_url',
                image_url: { 
                  url: fileUrl,
                  detail: 'high'
                }
              }
            ]
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      })
    })
    
    const data = await response.json()
    
    if (!data.choices || !data.choices[0]) {
      throw new Error('Invalid OpenAI response')
    }
    
    let content = data.choices[0].message.content
    
    // –£–±–∏—Ä–∞–µ–º markdown –µ—Å–ª–∏ –µ—Å—Ç—å
    content = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
    
    try {
      const parsed = JSON.parse(content)
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å
      const name = parsed.name || '–ë–ª—é–¥–æ —Å —Ñ–æ—Ç–æ'
      const suspiciousNames = ['–ø–µ–ª—å–º–µ–Ω–∏', '–±–æ—Ä—â', '—Å—É–ø', '–∫–∞—à–∞', '–º—è—Å–æ', '—Ä—ã–±–∞']
      const hasSuspiciousName = suspiciousNames.some(suspicious => 
        name.toLowerCase().includes(suspicious) && name.split(' ').length <= 2
      )
      
      if (hasSuspiciousName) {
        console.log('Suspicious name detected, asking for clarification:', name)
        // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –æ–±—â–µ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
        parsed.name = name + ' (—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è)'
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      return {
        name: parsed.name,
        calories: Math.round(parsed.calories || 0),
        protein: Math.round((parsed.protein || 0) * 10) / 10,
        carbs: Math.round((parsed.carbs || 0) * 10) / 10,
        fat: Math.round((parsed.fat || 0) * 10) / 10,
        weight: Math.round(parsed.weight || 100),
        protein_percent: Math.round((parsed.protein_percent || 0) * 10) / 10,
        carbs_percent: Math.round((parsed.carbs_percent || 0) * 10) / 10,
        fat_percent: Math.round((parsed.fat_percent || 0) * 10) / 10
      }
    } catch (jsonError) {
      console.error('JSON parse error:', jsonError, 'Content:', content)
      return parseTextResponse(content)
    }
  } catch (error) {
    console.error('Photo analysis error:', error)
    return {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ —Å —Ñ–æ—Ç–æ',
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      weight: 100
    }
  }
}

async function getFileUrl(fileId: string) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
  const data = await response.json()
  return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
}

async function transcribeVoice(fileUrl: string) {
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
    const audioResponse = await fetch(fileUrl)
    const audioBlob = await audioResponse.blob()
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è Whisper API
    const formData = new FormData()
    formData.append('file', audioBlob, 'audio.ogg')
    formData.append('model', 'whisper-1')
    formData.append('language', 'ru')
    
    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: formData
    })
    
    const data = await response.json()
    return data.text || null
  } catch (error) {
    console.error('Transcription error:', error)
    return null
  }
}

async function saveMeal(userId: number, analysis: any) {
  await supabase.from('meals').insert({
    user_id: userId,
    meal_name: analysis.name,
    calories: analysis.calories,
    protein: analysis.protein,
    carbs: analysis.carbs,
    fat: analysis.fat,
    protein_percent: analysis.protein_percent,
    carbs_percent: analysis.carbs_percent,
    fat_percent: analysis.fat_percent,
    weight_grams: analysis.weight
  })
}

async function getDailyStats(userId: number) {
  const today = new Date().toISOString().split('T')[0]
  
  const { data: meals } = await supabase
    .from('meals')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', `${today}T00:00:00`)
    .lte('created_at', `${today}T23:59:59`)
  
  const { data: user } = await supabase
    .from('users')
    .select('*')
    .eq('user_id', userId)
    .single()
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Apple Watch
  const healthData = await getHealthData(userId)
  
  if (!meals || meals.length === 0) {
    let message = 'üìä –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ.'
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Apple Watch –¥–∞–∂–µ –µ—Å–ª–∏ –µ–¥—ã –Ω–µ—Ç
    if (healthData) {
      message += `\n\n‚åö –î–∞–Ω–Ω—ã–µ Apple Watch:`
      if (healthData.steps) message += `\nüëü –®–∞–≥–∏: ${healthData.steps.toLocaleString()}`
      if (healthData.sleep_hours) message += `\nüõå –°–æ–Ω: ${healthData.sleep_hours}—á`
      if (healthData.active_calories) message += `\nüî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${healthData.active_calories} –∫–∫–∞–ª`
      if (healthData.weight) message += `\n‚öñÔ∏è –í–µ—Å: ${healthData.weight} –∫–≥`
    }
    
    return message
  }
  
  const total = meals.reduce((acc, meal) => ({
    calories: acc.calories + meal.calories,
    protein: acc.protein + meal.protein,
    carbs: acc.carbs + meal.carbs,
    fat: acc.fat + meal.fat
  }), { calories: 0, protein: 0, carbs: 0, fat: 0 })
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
  const baseCalories = user?.calories_goal || 2000
  const adjustedCalories = calculateAdjustedCalories(baseCalories, healthData)
  
  let caloriesText = `üî• –ö–∞–ª–æ—Ä–∏–∏: ${total.calories} / ${baseCalories}`
  if (adjustedCalories !== baseCalories) {
    caloriesText += ` (+${adjustedCalories - baseCalories} –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)`
  }
  
  let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:

${caloriesText}
ü•© –ë–µ–ª–∫–∏: ${total.protein.toFixed(1)}–≥ / ${user?.protein_goal || 150}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${total.carbs.toFixed(1)}–≥ / ${user?.carbs_goal || 200}–≥
ü•ë –ñ–∏—Ä—ã: ${total.fat.toFixed(1)}–≥ / ${user?.fat_goal || 70}–≥

üìù –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: ${meals.length}`

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ö–ë–ñ–£
  const avgProteinPercent = meals.reduce((sum, meal) => sum + (meal.protein_percent || 0), 0) / meals.length
  const avgCarbsPercent = meals.reduce((sum, meal) => sum + (meal.carbs_percent || 0), 0) / meals.length
  const avgFatPercent = meals.reduce((sum, meal) => sum + (meal.fat_percent || 0), 0) / meals.length
  
  message += `\n\nüìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£ –∑–∞ –¥–µ–Ω—å:`
  message += `\nü•© –ë–µ–ª–∫–∏: ${avgProteinPercent.toFixed(1)}%`
  message += `\nüçû –£–≥–ª–µ–≤–æ–¥—ã: ${avgCarbsPercent.toFixed(1)}%`
  message += `\nü•ë –ñ–∏—Ä—ã: ${avgFatPercent.toFixed(1)}%`
  
  // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
  let balanceAdvice = ''
  if (avgProteinPercent < 20) {
    balanceAdvice += `\n‚ö†Ô∏è –ú–∞–ª–æ –±–µ–ª–∫–∞! –î–æ–±–∞–≤—å—Ç–µ –º—è—Å–æ, —Ä—ã–±—É, —Ç–≤–æ—Ä–æ–≥`
  }
  if (avgCarbsPercent > 60) {
    balanceAdvice += `\n‚ö†Ô∏è –ú–Ω–æ–≥–æ —É–≥–ª–µ–≤–æ–¥–æ–≤! –ë–æ–ª—å—à–µ –æ–≤–æ—â–µ–π`
  }
  if (avgFatPercent < 15) {
    balanceAdvice += `\n‚ö†Ô∏è –ú–∞–ª–æ –∂–∏—Ä–æ–≤! –û—Ä–µ—Ö–∏, –º–∞—Å–ª–æ, –∞–≤–æ–∫–∞–¥–æ`
  }
  
  if (balanceAdvice) {
    message += `\n\nüí° –°–æ–≤–µ—Ç—ã:${balanceAdvice}`
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Apple Watch
  if (healthData) {
    message += `\n\n‚åö –î–∞–Ω–Ω—ã–µ Apple Watch:`
    if (healthData.steps) {
      const emoji = healthData.steps >= 10000 ? '‚úÖ' : healthData.steps >= 5000 ? 'üëç' : 'üí™'
      message += `\n${emoji} –®–∞–≥–∏: ${healthData.steps.toLocaleString()}`
    }
    if (healthData.sleep_hours) {
      const emoji = healthData.sleep_hours >= 7 ? '‚úÖ' : healthData.sleep_hours >= 6 ? 'üò¥' : '‚ö†Ô∏è'
      message += `\n${emoji} –°–æ–Ω: ${healthData.sleep_hours}—á`
    }
    if (healthData.active_calories) {
      message += `\nüî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${healthData.active_calories} –∫–∫–∞–ª`
    }
    if (healthData.weight) {
      message += `\n‚öñÔ∏è –í–µ—Å: ${healthData.weight} –∫–≥`
    }
    
    message += `\n\nüí° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:\n/sync_weight ‚Ä¢ /sync_steps ‚Ä¢ /sync_sleep ‚Ä¢ /sync_calories`
  } else {
    message += `\n\n‚åö –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Apple Watch:\n/sync_weight 75.5 ‚Ä¢ /sync_steps 12000`
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ
  const waterRecommendation = calculateWaterRecommendation(user, healthData)
  if (waterRecommendation) {
    message += `\n\n${waterRecommendation}`
  }
  
  return message
}

function getGoalsMessage(userId: number) {
  return `üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏ –ø–æ –ö–ë–ñ–£:

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/setgoals - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏
/today - –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è`
}

function formatAnalysis(analysis: any) {
  let message = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫:

üçΩÔ∏è ${analysis.name}
üî• ${analysis.calories} –∫–∫–∞–ª
ü•© ${analysis.protein}–≥ –±–µ–ª–∫–∞
üçû ${analysis.carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
ü•ë ${analysis.fat}–≥ –∂–∏—Ä–æ–≤
‚öñÔ∏è –í–µ—Å: ${analysis.weight}–≥`

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ë–ñ–£
  if (analysis.protein_percent && analysis.carbs_percent && analysis.fat_percent) {
    message += `\n\nüìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£:`
    message += `\nü•© –ë–µ–ª–∫–∏: ${analysis.protein_percent}%`
    message += `\nüçû –£–≥–ª–µ–≤–æ–¥—ã: ${analysis.carbs_percent}%`
    message += `\nü•ë –ñ–∏—Ä—ã: ${analysis.fat_percent}%`
    
    // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ –±–ª—é–¥–∞
    let balanceAdvice = ''
    if (analysis.protein_percent < 15) {
      balanceAdvice += `\n‚ö†Ô∏è –ú–∞–ª–æ –±–µ–ª–∫–∞ –≤ —ç—Ç–æ–º –±–ª—é–¥–µ`
    } else if (analysis.protein_percent > 40) {
      balanceAdvice += `\nüí™ –û—Ç–ª–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞!`
    }
    
    if (analysis.carbs_percent > 70) {
      balanceAdvice += `\n‚ö†Ô∏è –ú–Ω–æ–≥–æ —É–≥–ª–µ–≤–æ–¥–æ–≤`
    }
    
    if (analysis.fat_percent < 10) {
      balanceAdvice += `\n‚ö†Ô∏è –ú–∞–ª–æ –∂–∏—Ä–æ–≤`
    } else if (analysis.fat_percent > 50) {
      balanceAdvice += `\n‚ö†Ô∏è –ú–Ω–æ–≥–æ –∂–∏—Ä–æ–≤`
    }
    
    if (balanceAdvice) {
      message += `\n\nüí° –ê–Ω–∞–ª–∏–∑:${balanceAdvice}`
    }
  }

  return message
}

function getHelpMessage() {
  return `üçé –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É:

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç: "–Ø –µ–ª –±–æ—Ä—â –∏ —Ö–ª–µ–±"
üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/goals - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£
/recipe - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç
/undo - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏

–í–µ—á–µ—Ä–æ–º –≤ 21:00 —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—é –æ—Ç—á–µ—Ç!`
}

async function undoLastMeal(userId: number) {
  try {
    const { data: lastMeal } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()
    
    if (!lastMeal) {
      return '‚ùå –ù–µ—Ç –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
    }
    
    await supabase
      .from('meals')
      .delete()
      .eq('id', lastMeal.id)
    
    return `‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${lastMeal.meal_name} (${lastMeal.calories} –∫–∫–∞–ª)`
  } catch (error) {
    console.error('Undo error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'
  }
}

async function getRecipeSuggestion(userId: number) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) {
      return '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start'
    }
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
      .lte('created_at', `${today}T23:59:59`)
    
    const total = meals?.reduce((acc, meal) => ({
      calories: acc.calories + meal.calories,
      protein: acc.protein + meal.protein,
      carbs: acc.carbs + meal.carbs,
      fat: acc.fat + meal.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    const prompt = `–ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ:
- –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ ${remaining.calories} –∫–∫–∞–ª (–º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ)
- –ë–µ–ª–∫–∞: ${remaining.protein.toFixed(1)}–≥
- –£–≥–ª–µ–≤–æ–¥–æ–≤: ${remaining.carbs.toFixed(1)}–≥
- –ñ–∏—Ä–æ–≤: ${remaining.fat.toFixed(1)}–≥

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üçΩÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
- —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: XXX –∫–∫–∞–ª, XX–≥/XX–≥/XX–≥

üíß –í–û–î–ê: ${Math.round(user.calories_goal * 0.4)}–º–ª –≤ –¥–µ–Ω—å (0.4–º–ª –Ω–∞ –∫–∫–∞–ª)`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –ø–æ–≤–∞—Ä. –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ—Å—Ç—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 500
      })
    })
    
    const data = await response.json()
    const recipe = data.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'
    
    return `ü•ò –†–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π:\n\n–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª\n\n${recipe}`
  } catch (error) {
    console.error('Recipe error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
  }
}

async function getAdviceAfterMeal(userId: number, meal: any) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) return ''
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
    
    const total = meals?.reduce((acc, m) => ({
      calories: acc.calories + m.calories,
      protein: acc.protein + m.protein,
      carbs: acc.carbs + m.carbs,
      fat: acc.fat + m.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    let advice = 'üí° –°–æ–≤–µ—Ç:\n'
    
    if (remaining.calories < 0) {
      advice += `‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –Ω–∞ ${Math.abs(remaining.calories)} –∫–∫–∞–ª. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è!`
    } else if (remaining.calories < 500) {
      advice += `‚úÖ –û—Å—Ç–∞–ª–æ—Å—å ${remaining.calories} –∫–∫–∞–ª –¥–æ —Ü–µ–ª–∏. –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!`
    } else {
      advice += `üìä –û—Å—Ç–∞–ª–æ—Å—å ${remaining.calories} –∫–∫–∞–ª. `
      
      if (remaining.protein > 30) {
        advice += `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–µ–ª–∫–∞ (${remaining.protein.toFixed(0)}–≥) - –¥–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∏—Ü—É, —Ç–≤–æ—Ä–æ–≥ –∏–ª–∏ —è–π—Ü–∞. `
      }
      if (remaining.carbs < 50 && remaining.protein < 20) {
        advice += `–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–≥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å —Å —É–≥–ª–µ–≤–æ–¥–∞–º–∏.`
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ
    advice += `\n\nüíß –í–û–î–ê: ${Math.round(user.calories_goal * 0.4)}–º–ª –≤ –¥–µ–Ω—å (0.4–º–ª –Ω–∞ –∫–∫–∞–ª)`
    
    return advice
  } catch (error) {
    console.error('Advice error:', error)
    return ''
  }
}

async function updateUserParams(userId: number, text: string) {
  try {
    const prompt = `–ò–∑–≤–ª–µ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞: "${text}"

–ù–∞–π–¥–∏:
- –†–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–º–µ—Ç—Ä –¥–µ–≤—è–Ω–æ—Å—Ç–æ —Ç—Ä–∏", "193 —Å–º", "—Å—Ç–æ –¥–µ–≤—è–Ω–æ—Å—Ç–æ —Ç—Ä–∏")
- –í–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å—Ç–æ –¥–µ—Å—è—Ç—å", "110 –∫–≥", "—Å—Ç–æ –¥–µ—Å—è—Ç—å –∫–∏–ª–æ–≥—Ä–∞–º–º")
- –¶–µ–ª—å (—Å–±—Ä–æ—Å–∏—Ç—å/–Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å)
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≥ –¥–ª—è —Å–±—Ä–æ—Å–∞/–Ω–∞–±–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ö–æ—á—É –≤–µ—Å –≥–¥–µ-—Ç–æ –¥–µ–≤—è–Ω–æ—Å—Ç–æ –≤–æ—Å–µ–º—å" = —Å–±—Ä–æ—Å–∏—Ç—å –¥–æ 98–∫–≥)
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–∞–ª, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å–ø–æ—Ä—Ç, —Å–∏–ª–æ–≤—ã–µ)
  * "high" - –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è 3+ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ "–¥–≤–∞-—Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"
  * "medium" - –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
  * "low" - –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ —Ä–µ–¥–∫–æ
- –í–æ–∑—Ä–∞—Å—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)

–í–ê–ñ–ù–û: –£—á–∏—Ç—ã–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å –∏ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞–º–∏!

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON:
{
  "height": —á–∏—Å–ª–æ_—Å–º,
  "weight": —á–∏—Å–ª–æ_–∫–≥,
  "goal": "lose" –∏–ª–∏ "gain",
  "target_weight": —á–∏—Å–ª–æ_–∫–≥,
  "activity": "high" –∏–ª–∏ "medium" –∏–ª–∏ "low",
  "age": —á–∏—Å–ª–æ_–ª–µ—Ç_–∏–ª–∏_null
}

–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, –ø–æ—Å—Ç–∞–≤—å null.`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: '–¢—ã –∏–∑–≤–ª–µ–∫–∞–µ—à—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤. –ü—Ä–æ—Å—Ç–æ —á–∏—Å—Ç—ã–π JSON –æ–±—ä–µ–∫—Ç.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 200
      })
    })
    
    const data = await response.json()
    const content = data.choices?.[0]?.message?.content
    
    if (!content) {
      console.error('Empty content from OpenAI')
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    }
    
    // –û—á–∏—â–∞–µ–º JSON –æ—Ç markdown –±–ª–æ–∫–æ–≤
    const cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
    
    console.log('Parsing params:', cleanContent)
    const params = JSON.parse(cleanContent)
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const goals = calculateNutritionGoals(params)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    await supabase
      .from('users')
      .update({
        height: params.height,
        weight: params.weight,
        goal: params.goal,
        target_weight: params.target_weight,
        activity: params.activity,
        calories_goal: goals.calories,
        protein_goal: goals.protein,
        carbs_goal: goals.carbs,
        fat_goal: goals.fat
      })
      .eq('user_id', userId)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ä–∞—Ü–∏–æ–Ω–∞
    const mealPlan = await generateMealPlan(params, goals)
    
    return `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Å—Ç–∞–≤–∏–ª –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!

üìã –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
üìè –†–æ—Å—Ç: ${params.height} —Å–º
‚öñÔ∏è –í–µ—Å: ${params.weight} –∫–≥
üéØ –¶–µ–ª—å: ${params.goal === 'lose' ? '–°–±—Ä–æ—Å–∏—Ç—å' : params.goal === 'gain' ? '–ù–∞–±—Ä–∞—Ç—å' : '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'} ${params.target_weight ? Math.abs(params.target_weight - params.weight) + ' –∫–≥' : '–≤–µ—Å'}
üèãÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${params.activity === 'high' ? '–í—ã—Å–æ–∫–∞—è (–∑–∞–ª 3-5 —Ä–∞–∑)' : params.activity === 'medium' ? '–°—Ä–µ–¥–Ω—è—è (1-2 —Ä–∞–∑–∞)' : '–ù–∏–∑–∫–∞—è'}

üìä –í–∞—à–∏ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å:
üî• –ö–∞–ª–æ—Ä–∏–∏: ${goals.calories}
ü•© –ë–µ–ª–∫–∏: ${goals.protein}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${goals.carbs}–≥
ü•ë –ñ–∏—Ä—ã: ${goals.fat}–≥

${mealPlan}

–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —á—Ç–æ –µ–¥–∏—Ç–µ, –∏ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º! üéØ`
  } catch (error) {
    console.error('Update params error:', error)
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
  }
}

async function generateMealPlan(params: any, goals: any) {
  try {
    const goalText = params.goal === 'lose' ? '–ø–æ—Ö—É–¥–µ–Ω–∏–µ' : params.goal === 'gain' ? '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã' : '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞'
    
    const prompt = `–°–æ—Å—Ç–∞–≤—å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –¥–µ–Ω—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞:
- –í–µ—Å: ${params.weight}–∫–≥
- –¶–µ–ª—å: ${goalText}
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${params.activity === 'high' ? '–≤—ã—Å–æ–∫–∞—è (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)' : '—Å—Ä–µ–¥–Ω—è—è'}
- –ö–∞–ª–æ—Ä–∏–∏: ${goals.calories}
- –ë–µ–ª–∫–∏: ${goals.protein}–≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${goals.carbs}–≥
- –ñ–∏—Ä—ã: ${goals.fat}–≥

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–ë–ï–ó markdown, —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç):

üçΩÔ∏è –ü–†–ò–ú–ï–†–ù–´–ô –ü–õ–ê–ù –†–ê–¶–ò–û–ù–ê:

üåÖ –ó–∞–≤—Ç—Ä–∞–∫ (7:00-9:00)
‚Ä¢ [–ø—Ä–æ—Å—Ç–æ–µ –±–ª—é–¥–æ]
‚Ä¢ –ö–ë–ñ–£: XXX –∫–∫–∞–ª, XX–±/XX—É/XX–∂

ü•ó –û–±–µ–¥ (13:00-14:00)
‚Ä¢ [–ø—Ä–æ—Å—Ç–æ–µ –±–ª—é–¥–æ]
‚Ä¢ –ö–ë–ñ–£: XXX –∫–∫–∞–ª, XX–±/XX—É/XX–∂

üçñ –£–∂–∏–Ω (19:00-20:00)
‚Ä¢ [–ø—Ä–æ—Å—Ç–æ–µ –±–ª—é–¥–æ]
‚Ä¢ –ö–ë–ñ–£: XXX –∫–∫–∞–ª, XX–±/XX—É/XX–∂

üí° –°–æ–≤–µ—Ç: [–∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é]`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–æ—Å—Ç—ã–µ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 500
      })
    })
    
    const data = await response.json()
    return data.choices?.[0]?.message?.content || ''
  } catch (error) {
    console.error('Meal plan error:', error)
    return `üçΩÔ∏è –ü–†–ò–ú–ï–†–ù–´–ô –ü–õ–ê–ù –†–ê–¶–ò–û–ù–ê:

üåÖ –ó–∞–≤—Ç—Ä–∞–∫: –û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏, —è–π—Ü–∞
ü•ó –û–±–µ–¥: –ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏
üçñ –£–∂–∏–Ω: –†—ã–±–∞ —Å —Å–∞–ª–∞—Ç–æ–º

–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–æ–º—É –ø–ª–∞–Ω—É!`
  }
}

function calculateNutritionGoals(params: any) {
  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (—Ñ–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞)
  let bmr = 10 * params.weight + 6.25 * params.height - 5 * 30 + 5 // –º—É–∂—á–∏–Ω–∞ 30 –ª–µ—Ç
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  let activityMultiplier = 1.2
  if (params.activity === 'high') activityMultiplier = 1.7
  else if (params.activity === 'medium') activityMultiplier = 1.5
  
  let calories = Math.round(bmr * activityMultiplier)
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ü–µ–ª—å
  if (params.goal === 'lose') {
    calories -= 500 // –¥–µ—Ñ–∏—Ü–∏—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
  } else if (params.goal === 'gain') {
    calories += 300 // –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞
  }
  
  // –ú–∞–∫—Ä–æ—Å—ã
  const protein = Math.round(params.weight * 2.2) // 2.2–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏—Ö—Å—è
  const carbs = Math.round(calories * 0.4 / 4) // 40% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
  const fat = Math.round(calories * 0.25 / 9) // 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
  
  return { calories, protein, carbs, fat }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
async function extractAndUpdateGoals(userId: number, advice: string) {
  try {
    // –ò—â–µ–º –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    const caloriesMatch = advice.match(/üî• –ö–∞–ª–æ—Ä–∏–∏:\s*(\d+)/i)
    const proteinMatch = advice.match(/ü•© –ë–µ–ª–∫–∏:\s*(\d+)/i)
    const carbsMatch = advice.match(/üçû –£–≥–ª–µ–≤–æ–¥—ã:\s*(\d+)/i)
    const fatMatch = advice.match(/ü•ë –ñ–∏—Ä—ã:\s*(\d+)/i)
    
    if (caloriesMatch || proteinMatch || carbsMatch || fatMatch) {
      const updates: any = {}
      
      if (caloriesMatch) updates.calories_goal = parseInt(caloriesMatch[1])
      if (proteinMatch) updates.protein_goal = parseInt(proteinMatch[1])
      if (carbsMatch) updates.carbs_goal = parseInt(carbsMatch[1])
      if (fatMatch) updates.fat_goal = parseInt(fatMatch[1])
      
      await supabase
        .from('users')
        .update(updates)
        .eq('user_id', userId)
      
      console.log(`Updated goals for user ${userId}:`, updates)
    }
  } catch (error) {
    console.error('Extract goals error:', error)
  }
}

async function getSmartAdvice(userId: number, question: string) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) {
      return '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start'
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    const context = await getContext(userId)
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
    
    const mealsList = meals?.map(m => `${m.meal_name} (${m.calories} –∫–∫–∞–ª, ${m.protein}–≥ –±–µ–ª–∫–∞)`).join(', ') || '–Ω–∏—á–µ–≥–æ'
    
    const total = meals?.reduce((acc, m) => ({
      calories: acc.calories + m.calories,
      protein: acc.protein + m.protein,
      carbs: acc.carbs + m.carbs,
      fat: acc.fat + m.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    const userInfo = user.height ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.height}—Å–º, ${user.weight}–∫–≥, —Ü–µ–ª—å ${user.goal === 'lose' ? '—Å–±—Ä–æ—Å–∏—Ç—å' : '–Ω–∞–±—Ä–∞—Ç—å'} –≤–µ—Å` : ''
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    const contextText = context.length > 0 ? 
      `\n\n–ö–û–ù–¢–ï–ö–°–¢ –†–ê–ó–ì–û–í–û–†–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è):\n${context.map(c => `${c.role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: ${c.content}`).join('\n')}` : ''
    
    const prompt = `–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –≤ Telegram. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "${question}"

${userInfo}

–°–µ–≥–æ–¥–Ω—è –æ–Ω —É–∂–µ –µ–ª: ${mealsList}
–°—ä–µ–¥–µ–Ω–æ: ${total.calories} –∫–∫–∞–ª, ${total.protein.toFixed(0)}–≥ –±–µ–ª–∫–∞, ${total.carbs.toFixed(0)}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, ${total.fat.toFixed(0)}–≥ –∂–∏—Ä–æ–≤

–¶–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å: ${user.calories_goal} –∫–∫–∞–ª, ${user.protein_goal}–≥ –±–µ–ª–∫–∞, ${user.carbs_goal}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, ${user.fat_goal}–≥ –∂–∏—Ä–æ–≤

–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª, ${remaining.protein.toFixed(0)}–≥ –±–µ–ª–∫–∞${contextText}

–í–ê–ñ–ù–û: 
- –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—Ä–∏—Ç–∏–∫—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–º–Ω–æ–≥–æ —É–≥–ª–µ–≤–æ–¥–æ–≤", "–≤—ã—Å–æ–∫–∏–π –∫–∞–ª–æ—Ä–∞–∂") - –ø—Ä–µ–¥–ª–æ–∂–∏ –ö–û–ù–ö–†–ï–¢–ù–´–ï —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram (–±–µ–∑ markdown)
- –ö–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—Ä–∏—Ç–∏–∫—É–µ—Ç —Ü–µ–ª–∏, –¥–∞–π –æ—Ç–≤–µ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

‚úÖ –í—ã –ø—Ä–∞–≤—ã! –î–∞–≤–∞–π—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ —Ü–µ–ª–∏:

üìä –ù–û–í–´–ï –¶–ï–õ–ò:
üî• –ö–∞–ª–æ—Ä–∏–∏: [–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ] (–±—ã–ª–æ ${user.calories_goal})
ü•© –ë–µ–ª–∫–∏: [–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]–≥ (–±—ã–ª–æ ${user.protein_goal}–≥)
üçû –£–≥–ª–µ–≤–æ–¥—ã: [–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]–≥ (–±—ã–ª–æ ${user.carbs_goal}–≥)
ü•ë –ñ–∏—Ä—ã: [–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]–≥ (–±—ã–ª–æ ${user.fat_goal}–≥)

üí° –ü–æ—á–µ–º—É —ç—Ç–∏ —Ü–µ–ª–∏ –ª—É—á—à–µ:
[–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]

üçΩÔ∏è –ü—Ä–∏–º–µ—Ä—ã –±–ª—é–¥ —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏:
‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫: [–ø—Ä–∏–º–µ—Ä]
‚Ä¢ –û–±–µ–¥: [–ø—Ä–∏–º–µ—Ä]
‚Ä¢ –£–∂–∏–Ω: [–ø—Ä–∏–º–µ—Ä]

–ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –¥–∞–π —Å–æ–≤–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –±–ª—é–¥.

üíß –í–û–î–ê: ${Math.round(user.calories_goal * 0.4)}–º–ª –≤ –¥–µ–Ω—å (0.4–º–ª –Ω–∞ –∫–∫–∞–ª)`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –î–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 600
      })
    })
    
    const data = await response.json()
    const advice = data.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç'
    
    const progressText = `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:
üî• –ö–∞–ª–æ—Ä–∏–∏: ${total.calories} –∏–∑ ${user.calories_goal}
ü•© –ë–µ–ª–∫–∏: ${total.protein.toFixed(0)}–≥ –∏–∑ ${user.protein_goal}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${total.carbs.toFixed(0)}–≥ –∏–∑ ${user.carbs_goal}–≥
ü•ë –ñ–∏—Ä—ã: ${total.fat.toFixed(0)}–≥ –∏–∑ ${user.fat_goal}–≥

–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª

---

${advice}`
    
    return progressText
  } catch (error) {
    console.error('Smart advice error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
  }
}

async function getUser(userId: number) {
  const { data } = await supabase
    .from('users')
    .select('*')
    .eq('user_id', userId)
    .single()
  return data
}

function getInitialSetupMessage() {
  return `üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –±–æ—Ç–∞-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–∏—Ç–∞–Ω–∏–∏. –ü–æ–º–æ–≥—É:
‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ö–ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –≥–æ–ª–æ—Å–∞
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ä–∞—Ü–∏–æ–Ω
‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏
‚úÖ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:

üìè –†–æ—Å—Ç (–≤ —Å–º)
‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)
üéØ –¶–µ–ª—å (—Å–±—Ä–æ—Å–∏—Ç—å/–Ω–∞–±—Ä–∞—Ç—å/–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å)
üìä –ù–∞ —Å–∫–æ–ª—å–∫–æ –∫–≥ (–µ—Å–ª–∏ —Ö—É–¥–µ–µ—Ç–µ/–Ω–∞–±–∏—Ä–∞–µ—Ç–µ)
üèãÔ∏è –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–ª 3-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—è, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-2 —Ä–∞–∑–∞, –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π)
üë§ –í–æ–∑—Ä–∞—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä:
"–ú–Ω–µ 30 –ª–µ—Ç, —Ä–æ—Å—Ç 180—Å–º, –≤–µ—à—É 85–∫–≥, —Ö–æ—á—É —Å–±—Ä–æ—Å–∏—Ç—å 10–∫–≥, —Ö–æ–∂—É –≤ –∑–∞–ª 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–æ—Å—Ç–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞—Ü–∏–æ–Ω–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤–∞—à–∏ —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£!

‚ö†Ô∏è –í–∞–∂–Ω–æ: –í—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è!
–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Ç–æ—á–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:`
}

function getUserParamsText(user: any) {
  const goalText = user.goal === 'lose' ? '–°–±—Ä–æ—Å–∏—Ç—å' : user.goal === 'gain' ? '–ù–∞–±—Ä–∞—Ç—å' : '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'
  const activityText = user.activity === 'high' ? '–í—ã—Å–æ–∫–∞—è (–∑–∞–ª)' : 
                      user.activity === 'medium' ? '–°—Ä–µ–¥–Ω—è—è' : '–ù–∏–∑–∫–∞—è'
  
  return `‚öôÔ∏è –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

üìè –†–æ—Å—Ç: ${user.height || '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º
‚öñÔ∏è –í–µ—Å: ${user.weight || '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
üéØ –¶–µ–ª—å: ${goalText} ${user.target_weight ? Math.abs(user.target_weight - user.weight) : ''} –∫–≥
üèãÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}

üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å:
üî• –ö–∞–ª–æ—Ä–∏–∏: ${user.calories_goal}
ü•© –ë–µ–ª–∫–∏: ${user.protein_goal}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${user.carbs_goal}–≥
ü•ë –ñ–∏—Ä—ã: ${user.fat_goal}–≥

üí° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

üéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π:
‚Ä¢ /calories 9000 - –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏
‚Ä¢ /setgoals 2500 –∫–∫–∞–ª, 150–≥ –±–µ–ª–∫–∞, 200–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, 70–≥ –∂–∏—Ä–æ–≤

‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è!
–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.`
}

function getWelcomeMessage() {
  return `üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –±–æ—Ç–∞-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!

üéØ –ß–¢–û –Ø –£–ú–ï–Æ:

üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–¥—É:
‚Ä¢ –¢–µ–∫—Å—Ç: "–Ø –µ–ª –≥—Ä–µ—á–∫—É —Å –∫—É—Ä–∏—Ü–µ–π"
‚Ä¢ –§–æ—Ç–æ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
‚Ä¢ –ì–æ–ª–æ—Å: –∑–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –µ–ª–∏
‚Üí –°—Ä–∞–∑—É –¥–∞—é –ö–ë–ñ–£ –∏ —Å–æ–≤–µ—Ç—ã

ü•ò –ü–æ–º–æ–≥–∞—é —Å –ø–∏—Ç–∞–Ω–∏–µ–º:
‚Ä¢ "–ß—Ç–æ –ø–æ–µ—Å—Ç—å?" ‚Üí –ø—Ä–µ–¥–ª–æ–∂—É 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é –æ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–∏/–Ω–µ–¥–æ–µ–¥–∞–Ω–∏–∏

üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å:
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å (üìä –∫–Ω–æ–ø–∫–∞)
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ 21:00
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏

‚åö –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Apple Watch:
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Å–∞, —à–∞–≥–æ–≤, —Å–Ω–∞
‚Ä¢ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –£—á–µ—Ç —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–æ—Å—Ç, –≤–µ—Å, —Ü–µ–ª—å)
‚Ä¢ –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤–∞—à—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–Ω–æ–ø–∫–∞ ‚öôÔ∏è

üí° –ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø:

1Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –æ–¥–∏–Ω —Ä–∞–∑:
"–Ø 180—Å–º, –≤–µ—à—É 80–∫–≥, —Ö–æ—á—É —Å–±—Ä–æ—Å–∏—Ç—å 10–∫–≥, —Ö–æ–∂—É –≤ –∑–∞–ª"

2Ô∏è‚É£ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –µ–¥—É –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º:
"–ü–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª –æ–≤—Å—è–Ω–∫–æ–π –∏ —è–π—Ü–∞–º–∏"
[—Ñ–æ—Ç–æ –µ–¥—ã]
[–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]

3Ô∏è‚É£ –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —Å–æ–≤–µ—Ç:
"–ß—Ç–æ –º–Ω–µ –ø–æ–µ—Å—Ç—å?"
"–ü–æ—Å–æ–≤–µ—Ç—É–π —Ä–µ—Ü–µ–ø—Ç"

4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

‚ö†Ô∏è –í–∞–∂–Ω–æ: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è!
–¢–æ—á–Ω—ã–π –ö–ë–ñ–£ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –≥—Ä–∞–º–º–æ–≤–æ–∫.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ! üöÄ`
}

// ‚åö –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Apple Watch / Apple Health

async function syncHealthData(userId: number, field: string, value: number) {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const { data: existing } = await supabase
      .from('health_data')
      .select('*')
      .eq('user_id', userId)
      .eq('date', today)
      .maybeSingle()
    
    if (existing) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('health_data')
        .update({ [field]: value })
        .eq('user_id', userId)
        .eq('date', today)
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('health_data')
        .insert({
          user_id: userId,
          date: today,
          [field]: value
        })
    }
  } catch (error) {
    console.error('Sync health data error:', error)
  }
}

async function getHealthData(userId: number) {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    const { data } = await supabase
      .from('health_data')
      .select('*')
      .eq('user_id', userId)
      .eq('date', today)
      .maybeSingle()
    
    return data
  } catch (error) {
    return null
  }
}

function calculateAdjustedCalories(baseCalories: number, healthData: any): number {
  let adjusted = baseCalories
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –≤—ã—Å–æ–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—à–∞–≥–∏)
  if (healthData?.steps && healthData.steps >= 15000) {
    adjusted += 300
  } else if (healthData?.steps && healthData.steps >= 12000) {
    adjusted += 200
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –Ω–µ–¥–æ—Å—ã–ø (—Å—Ç—Ä–µ—Å—Å –æ—Ä–≥–∞–Ω–∏–∑–º–∞)
  if (healthData?.sleep_hours && healthData.sleep_hours < 6) {
    adjusted += 200
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  if (healthData?.active_calories) {
    adjusted += healthData.active_calories
  }
  
  return adjusted
}

async function updateUserGoals(userId: number, goalsText: string) {
  try {
    // –ü–∞—Ä—Å–∏–º —Ü–µ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const caloriesMatch = goalsText.match(/(\d+)\s*(–∫–∫–∞–ª|–∫–∞–ª–æ—Ä–∏|–∫–∫–∞–ª\/–¥–µ–Ω—å)/i)
    const proteinMatch = goalsText.match(/(\d+)\s*(–≥\s*)?(–±–µ–ª–∫|–ø—Ä–æ—Ç–µ–∏–Ω)/i)
    const carbsMatch = goalsText.match(/(\d+)\s*(–≥\s*)?(—É–≥–ª–µ–≤–æ–¥|–∫–∞—Ä–±)/i)
    const fatMatch = goalsText.match(/(\d+)\s*(–≥\s*)?(–∂–∏—Ä)/i)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—á–∏
    const caloriesAltMatch = goalsText.match(/(\d+)\s*(–≤ –¥–µ–Ω—å|–Ω–∞ –¥–µ–Ω—å|–∫–∞–ª–æ—Ä–∏–π)/i)
    const proteinAltMatch = goalsText.match(/–±–µ–ª–∫[–∞-—è]*\s*(\d+)/i)
    const carbsAltMatch = goalsText.match(/—É–≥–ª–µ–≤–æ–¥[–∞-—è]*\s*(\d+)/i)
    const fatAltMatch = goalsText.match(/–∂–∏—Ä[–∞-—è]*\s*(\d+)/i)
    
    const calories = caloriesMatch ? parseInt(caloriesMatch[1]) : 
                    caloriesAltMatch ? parseInt(caloriesAltMatch[1]) : null
    const protein = proteinMatch ? parseInt(proteinMatch[1]) : 
                   proteinAltMatch ? parseInt(proteinAltMatch[1]) : null
    const carbs = carbsMatch ? parseInt(carbsMatch[1]) : 
                 carbsAltMatch ? parseInt(carbsAltMatch[1]) : null
    const fat = fatMatch ? parseInt(fatMatch[1]) : 
               fatAltMatch ? parseInt(fatAltMatch[1]) : null
    
    if (!calories && !protein && !carbs && !fat) {
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n"–•–æ—á—É 9000 –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å"\n"–£—Å—Ç–∞–Ω–æ–≤–∏ 150–≥ –±–µ–ª–∫–∞"\n"–ù–æ—Ä–º–∞ 2500 –∫–∫–∞–ª, 200–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"'
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
    const updateData: any = {}
    if (calories) updateData.calories_goal = calories
    if (protein) updateData.protein_goal = protein
    if (carbs) updateData.carbs_goal = carbs
    if (fat) updateData.fat_goal = fat
    
    await supabase
      .from('users')
      .update(updateData)
      .eq('user_id', userId)
    
    let message = '‚úÖ –¶–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n\n'
    if (calories) message += `üî• –ö–∞–ª–æ—Ä–∏–∏: ${calories}\n`
    if (protein) message += `ü•© –ë–µ–ª–∫–∏: ${protein}–≥\n`
    if (carbs) message += `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${carbs}–≥\n`
    if (fat) message += `ü•ë –ñ–∏—Ä—ã: ${fat}–≥\n`
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ë–ñ–£
    if (calories && !protein && !carbs && !fat) {
      const suggestedProtein = Math.round(calories * 0.25 / 4) // 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
      const suggestedCarbs = Math.round(calories * 0.45 / 4)  // 45% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
      const suggestedFat = Math.round(calories * 0.30 / 9)    // 30% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
      
      message += `\nüí° –ü—Ä–µ–¥–ª–∞–≥–∞—é –ë–ñ–£ –¥–ª—è ${calories} –∫–∫–∞–ª:\n`
      message += `ü•© –ë–µ–ª–∫–∏: ${suggestedProtein}–≥ (25%)\n`
      message += `üçû –£–≥–ª–µ–≤–æ–¥—ã: ${suggestedCarbs}–≥ (45%)\n`
      message += `ü•ë –ñ–∏—Ä—ã: ${suggestedFat}–≥ (30%)\n\n`
      message += `–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏? –ù–∞–ø–∏—à–∏—Ç–µ "–¥–∞" –∏–ª–∏ "—É—Å—Ç–∞–Ω–æ–≤–∏ –ë–ñ–£"\n\n`
      message += `–ò–ª–∏ —Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ –ª—é–±–∏—Ç–µ –µ—Å—Ç—å - —è —Å–æ—Å—Ç–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω! üçΩÔ∏è\n\n`
      message += `üíß –ò –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É! –†–µ–∫–æ–º–µ–Ω–¥—É—é ${Math.round(calories * 0.4)}–º–ª –≤ –¥–µ–Ω—å (0.4–º–ª –Ω–∞ –∫–∫–∞–ª)`
    }
    
    return message
  } catch (error) {
    console.error('Update goals error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–π'
  }
}

function calculateWaterRecommendation(user: any, healthData: any): string {
  if (!user) return ''
  
  // –ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞: 35–º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞
  const baseWater = Math.round((user.weight || 70) * 35)
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  let adjustments: string[] = []
  let totalWater = baseWater
  
  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (healthData?.steps && healthData.steps >= 15000) {
    totalWater += 500
    adjustments.push('+500–º–ª –∑–∞ –≤—ã—Å–æ–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
  } else if (healthData?.steps && healthData.steps >= 10000) {
    totalWater += 300
    adjustments.push('+300–º–ª –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
  }
  
  // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  if (healthData?.active_calories && healthData.active_calories >= 500) {
    totalWater += 400
    adjustments.push('+400–º–ª –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
  }
  
  // –ñ–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
  const currentHour = new Date().getHours()
  if (currentHour >= 10 && currentHour <= 18) {
    totalWater += 200
    adjustments.push('+200–º–ª –∑–∞ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è')
  }
  
  // –ù–µ–¥–æ—Å—ã–ø
  if (healthData?.sleep_hours && healthData.sleep_hours < 6) {
    totalWater += 300
    adjustments.push('+300–º–ª –∑–∞ –Ω–µ–¥–æ—Å—ã–ø')
  }
  
  let message = `üíß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–æ–¥–µ: ${totalWater}–º–ª`
  
  if (adjustments.length > 0) {
    message += `\n\nüìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:\n${adjustments.join('\n')}`
  }
  
  // –°–æ–≤–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–∏—Ç—å—è
  message += `\n\n‚è∞ –°—Ö–µ–º–∞ –ø–∏—Ç—å—è:\n`
  message += `‚Ä¢ –£—Ç—Ä–æ–º: ${Math.round(totalWater * 0.3)}–º–ª (30%)\n`
  message += `‚Ä¢ –î–Ω–µ–º: ${Math.round(totalWater * 0.4)}–º–ª (40%)\n`
  message += `‚Ä¢ –í–µ—á–µ—Ä–æ–º: ${Math.round(totalWater * 0.3)}–º–ª (30%)`
  
  return message
}

async function generatePersonalMealPlan(userId: number, preferences: string) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) return '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: `–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤–ª—è–µ—à—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¶–ï–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ö–∞–ª–æ—Ä–∏–∏: ${user.calories_goal}
- –ë–µ–ª–∫–∏: ${user.protein_goal}–≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${user.carbs_goal}–≥  
- –ñ–∏—Ä—ã: ${user.fat_goal}–≥
- –¶–µ–ª—å: ${user.goal === 'lose' ? '—Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å' : user.goal === 'gain' ? '–Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å' : '–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å'}

–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø: ${preferences}

–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –£–∫–∞–∂–∏ —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ –∏ –ö–ë–ñ–£ –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞.

–§–û–†–ú–ê–¢:
üåÖ –ó–ê–í–¢–†–ê–ö: [–Ω–∞–∑–≤–∞–Ω–∏–µ] - [–≥—Ä–∞–º–º–æ–≤–∫–∏] = [–ö–ë–ñ–£]
‚òÄÔ∏è –û–ë–ï–î: [–Ω–∞–∑–≤–∞–Ω–∏–µ] - [–≥—Ä–∞–º–º–æ–≤–∫–∏] = [–ö–ë–ñ–£]  
üåÜ –£–ñ–ò–ù: [–Ω–∞–∑–≤–∞–Ω–∏–µ] - [–≥—Ä–∞–º–º–æ–≤–∫–∏] = [–ö–ë–ñ–£]
üçé –ü–ï–†–ï–ö–£–°–´: [–Ω–∞–∑–≤–∞–Ω–∏–µ] - [–≥—Ä–∞–º–º–æ–≤–∫–∏] = [–ö–ë–ñ–£]

–ò–¢–û–ì–û: [–æ–±—â–µ–µ –ö–ë–ñ–£]

üíß –í–û–î–ê: ${Math.round(user.calories_goal * 0.4)}–º–ª –≤ –¥–µ–Ω—å (0.4–º–ª –Ω–∞ –∫–∫–∞–ª)

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown!`
          },
          {
            role: 'user',
            content: `–°–æ—Å—Ç–∞–≤—å –º–Ω–µ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –º–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${preferences}`
          }
        ],
        max_tokens: 800,
        temperature: 0.7
      })
    })
    
    const data = await response.json()
    return data.choices[0].message.content
  } catch (error) {
    console.error('Personal meal plan error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è'
  }
}
