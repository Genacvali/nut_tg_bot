// Telegram –±–æ—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ - LLM-driven –≤–µ—Ä—Å–∏—è
// –î–∏–∞–ª–æ–≥–æ–≤—ã–π AI —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ –≥–∏–±–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–ª–∞–Ω–∞

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { OpenAI } from 'https://esm.sh/openai@4'

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)
const openai = new OpenAI({ apiKey: OPENAI_API_KEY })

// FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
type UserState = 'none' | 'profile_age' | 'profile_sex' | 'profile_height' | 'profile_weight' | 
                 'profile_activity' | 'profile_goal' | 'profile_tz' | 'meal_input' | 'plan_discussion'

// System prompt –¥–ª—è LLM
const SYSTEM_PROMPT = `–¢—ã ‚Äî C.I.D., –Ω—É—Ç—Ä–∏-–∫–æ—É—á. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å **—Å—Ç—Ä–æ–≥–∏–π JSON** c –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

–ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç ¬´–æ—Å—Ç–∞–≤—å –∫–∞–ª–æ—Ä–∏–∏¬ª, —Å–æ—Ö—Ä–∞–Ω—è–π —Ü–µ–ª–µ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –º–∞–∫—Ä–æ—Å—ã
- –°–æ–±–ª—é–¥–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã: –±–µ–ª–æ–∫ ‚â•1.4 –≥/–∫–≥, –∂–∏—Ä ‚â•0.6 –≥/–∫–≥
- –î–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ‚àí25‚Ä¶+15% TDEE
- –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä 9000 –∫–∫–∞–ª), –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞–∑—É–º–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û JSON, –±–µ–∑ markdown):
{
  "intent": "adjust_macros | set_calories | ask_explain | accept_plan | unknown",
  "constraints": {
    "keep_calories": true | false,
    "target_calories": null | number
  },
  "protein": {"mode":"delta_g|delta_pct|target_g|none","value":number},
  "fat": {"mode":"delta_g|delta_pct|target_g|none","value":number},
  "carbs": {"mode":"delta_g|delta_pct|target_g|auto|none","value":number},
  "notes": "–∫—Ä–∞—Ç–∫–∏–π —Å–º—ã—Å–ª –ø–æ–∂–µ–ª–∞–Ω–∏—è"
}

–ü—Ä–∏–º–µ—Ä—ã:
1. "—Ö–æ—á—É –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –∏ –º–µ–Ω—å—à–µ —É–≥–ª–µ–π, –∫–∞–ª–æ—Ä–∏–∏ —Ç–µ –∂–µ"
{"intent":"adjust_macros","constraints":{"keep_calories":true,"target_calories":null},"protein":{"mode":"delta_g","value":20},"fat":{"mode":"none","value":0},"carbs":{"mode":"auto","value":0},"notes":"—É–≤–µ–ª–∏—á–∏—Ç—å –±–µ–ª–æ–∫, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –±–∞–ª–∞–Ω—Å —Å–Ω—è—Ç—å —Å —É–≥–ª–µ–≤–æ–¥–æ–≤"}

2. "—É–≥–ª–µ–π –º–Ω–æ–≥–æ ‚Äî –º–∏–Ω—É—Å 15%"
{"intent":"adjust_macros","constraints":{"keep_calories":false,"target_calories":null},"protein":{"mode":"none","value":0},"fat":{"mode":"none","value":0},"carbs":{"mode":"delta_pct","value":-15},"notes":"—Å–Ω–∏–∑–∏—Ç—å –¥–æ–ª—é —É–≥–ª–µ–≤–æ–¥–æ–≤"}

3. "–º–Ω–µ –Ω—É–∂–Ω–æ 9000 –∫–∞–ª–æ—Ä–∏–π"
{"intent":"set_calories","constraints":{"keep_calories":false,"target_calories":9000},"protein":{"mode":"none","value":0},"fat":{"mode":"none","value":0},"carbs":{"mode":"none","value":0},"notes":"–∑–∞–ø—Ä–æ—Å —Å–≤–µ—Ä—Ö–≤—ã—Å–æ–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"}`

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: { 'Access-Control-Allow-Origin': '*' }, status: 200 })
  }
  
  try {
    const update = await req.json()
    
    if (update.callback_query) {
      await handleCallbackQuery(update.callback_query)
      return success()
    }
    
    if (update.message) {
      const chatId = update.message.chat.id
      const userId = update.message.from.id
      const text = update.message.text
      const voice = update.message.voice
      const photo = update.message.photo
      
      if (photo) {
        await sendMessage(chatId, 'üì∑ –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é. –í–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.')
        return success()
      }
      
      if (text?.startsWith('/start')) {
        await handleStart(chatId, userId, update.message.from.username)
        return success()
      }
      
      if (text?.startsWith('/wipe')) {
        await handleWipe(chatId, userId)
        return success()
      }
      
      if (text?.startsWith('/debug')) {
        const user = await getUser(userId)
        const debugInfo = `üîç Debug Info:
User ID: ${userId}
Age: ${user?.age || 'null'}
Sex: ${user?.sex || 'null'}
Height: ${user?.height_cm || 'null'}
Weight: ${user?.weight_kg || 'null'}
Activity: ${user?.activity || 'null'}
Goal: ${user?.goal || 'null'}

Profile complete: ${!(!user?.age || !user?.sex || !user?.height_cm || !user?.weight_kg || !user?.activity || !user?.goal)}`
        await sendMessage(chatId, debugInfo)
        return success()
      }
      
      if (text?.startsWith('/clearkb')) {
        await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            text: '‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å /start',
            reply_markup: { remove_keyboard: true }
          })
        })
        return success()
      }
      
      if (voice) {
        await handleVoice(chatId, userId, voice)
        return success()
      }
        
        if (text) {
        await handleText(chatId, userId, text)
        return success()
      }
    }
    
    return success()
  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
})

function success() {
  return new Response(JSON.stringify({ ok: true }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200
  })
}

async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const body: any = { chat_id: chatId, text, parse_mode: 'HTML' }
  
  if (replyMarkup) {
    body.reply_markup = replyMarkup
  }
  
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  })
}

async function answerCallback(callbackId: string, text?: string) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ callback_query_id: callbackId, text })
  })
}

async function getUserState(userId: number): Promise<UserState> {
  const { data } = await supabase
    .from('state')
    .select('last_menu')
            .eq('user_id', userId)
    .maybeSingle()
  
  return (data?.last_menu as UserState) || 'none'
}

async function setUserState(userId: number, state: UserState) {
          await supabase
    .from('state')
    .upsert({ user_id: userId, last_menu: state }, { onConflict: 'user_id' })
}

async function getUser(userId: number) {
  const { data } = await supabase
    .from('users')
            .select('*')
    .eq('user_id', userId)
    .maybeSingle()
  
  return data
}

async function ensureUser(userId: number, username?: string) {
  const user = await getUser(userId)
  if (!user) {
    await supabase.from('users').insert({
      user_id: userId,
      username: username,
      calories_goal: 2000,
      protein_goal: 150,
      carbs_goal: 200,
      fat_goal: 70
    })
  }
}

function getMainMenuInline() {
  return {
    inline_keyboard: [
      [
        { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'menu_profile' },
        { text: 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£', callback_data: 'menu_calculate' }
      ],
      [
        { text: 'üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ', callback_data: 'menu_discussion' },
        { text: 'üìÖ –°–µ–≥–æ–¥–Ω—è', callback_data: 'menu_today' }
      ],
      [
        { text: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'menu_reminders' },
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'menu_help' }
      ]
    ]
  }
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async function handleStart(chatId: number, userId: number, username?: string) {
  await ensureUser(userId, username)
  
  const user = await getUser(userId)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
  const profileIncomplete = !user?.age || !user?.sex || !user?.height_cm || !user?.weight_kg || !user?.activity || !user?.goal
  
  if (profileIncomplete) {
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∞
    await setUserState(userId, 'none')
    
    const message = `ü§ñ <b>C.I.D. ‚Äî Care ¬∑ Insight ¬∑ Discipline</b>

–ü–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω, –≤–µ—Å—Ç–∏ —É—á—ë—Ç –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É.`
    
    await sendMessage(chatId, message, {
      inline_keyboard: [[{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile_edit' }]]
    })
    return // –í–ê–ñ–ù–û: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  }
  
  // –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (inline)
  await setUserState(userId, 'none')
  
  const message = `ü§ñ <b>C.I.D. ‚Äî Care ¬∑ Insight ¬∑ Discipline</b>

–ü–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω, –≤–µ—Å—Ç–∏ —É—á—ë—Ç –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã.`
  
  await sendMessage(chatId, message, getMainMenuInline())
}

async function handleWipe(chatId: number, userId: number) {
  await sendMessage(chatId, '‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?', {
    inline_keyboard: [
      [
        { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: 'wipe_confirm' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'menu_main' }
      ]
    ]
  })
}

async function handleCallbackQuery(query: any) {
  const chatId = query.message.chat.id
  const userId = query.from.id
  const data = query.data
  
  await answerCallback(query.id)
  
  switch (data) {
    case 'menu_main':
      await sendMessage(chatId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', getMainMenuInline())
      break
      
    case 'menu_profile':
      await handleProfileMenu(chatId, userId)
      break
      
    case 'menu_calculate':
      await handleCalculate(chatId, userId)
      break
      
    case 'menu_discussion':
      await startPlanDiscussion(chatId, userId)
      break
      
    case 'menu_today':
      await handleTodayMenu(chatId, userId)
      break
      
    case 'menu_reminders':
      await handleRemindersMenu(chatId, userId)
      break
      
    case 'menu_help':
      await handleHelp(chatId, userId)
      break
      
    case 'profile_edit':
      await startProfileWizard(chatId, userId)
      break
      
    case 'today_add_meal':
      await startMealInput(chatId, userId)
      break
      
    case 'today_summary':
      await showDaySummary(chatId, userId)
      break
      
    case 'accept_plan':
      await acceptPlan(chatId, userId)
      break
      
    case 'wipe_confirm':
      await wipeUserData(chatId, userId)
      break
      
    default:
      if (data.startsWith('set_')) {
        await handleProfileCallback(chatId, userId, data)
      } else if (data.startsWith('confirm_calories_')) {
        await handleCaloriesConfirm(chatId, userId, data)
          } else {
        await sendMessage(chatId, '–ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è', getMainMenuInline())
      }
  }
}

async function handleText(chatId: number, userId: number, text: string) {
  const state = await getUserState(userId)
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (state === 'plan_discussion') {
    await handlePlanDiscussion(chatId, userId, text)
  } else if (state === 'profile_age') {
    await handleProfileAge(chatId, userId, text)
  } else if (state === 'profile_height') {
    await handleProfileHeight(chatId, userId, text)
  } else if (state === 'profile_weight') {
    await handleProfileWeight(chatId, userId, text)
  } else if (state === 'profile_tz') {
    await handleProfileTz(chatId, userId, text)
  } else if (state === 'meal_input') {
    await handleMealInput(chatId, userId, text)
  } else {
    await sendMessage(chatId, '–ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è', getMainMenuInline())
  }
}

async function handleVoice(chatId: number, userId: number, voice: any) {
  await sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
  
  try {
    const fileId = voice.file_id
    const fileUrl = await getFileUrl(fileId)
    const transcribedText = await transcribeVoice(fileUrl)
    
    if (!transcribedText) {
      await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
      return
    }
    
    await sendMessage(chatId, `üó£Ô∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: "${transcribedText}"`)
    
    // –ì–æ–ª–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const state = await getUserState(userId)
    if (state === 'plan_discussion') {
      await handlePlanDiscussion(chatId, userId, transcribedText)
    } else {
      await handleText(chatId, userId, transcribedText)
    }
    
  } catch (error) {
    console.error('Voice error:', error)
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞')
  }
}

async function getFileUrl(fileId: string): Promise<string> {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
  const data = await response.json()
  return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
}

async function transcribeVoice(fileUrl: string): Promise<string | null> {
  try {
    const audioResponse = await fetch(fileUrl)
    const audioBlob = await audioResponse.blob()
    
    const formData = new FormData()
    formData.append('file', audioBlob, 'audio.ogg')
    formData.append('model', 'whisper-1')
    formData.append('language', 'ru')
    
    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${OPENAI_API_KEY}` },
      body: formData
    })
    
    const result = await response.json()
    return result.text || null
  } catch (error) {
    console.error('Transcription error:', error)
    return null
  }
}

// === –î–ò–ê–õ–û–ì –û –ü–õ–ê–ù–ï (LLM-DRIVEN) ===

async function startPlanDiscussion(chatId: number, userId: number) {
  const { data: plan } = await supabase
    .from('plans')
    .select('*')
    .eq('user_id', userId)
    .eq('is_active', true)
    .maybeSingle()
  
  if (!plan) {
    await sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø–ª–∞–Ω', {
      inline_keyboard: [[{ text: 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£', callback_data: 'menu_calculate' }]]
    })
    return
  }
  
  await setUserState(userId, 'plan_discussion')
  
  const message = `üí¨ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥–µ</b>

–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:
ü•© –ë–µ–ª–æ–∫: ${plan.p} –≥ ¬∑ ü•ë –ñ–∏—Ä—ã: ${plan.f} –≥ ¬∑ üçû –£–≥–ª–µ–≤–æ–¥—ã: ${plan.c} –≥
üìä –ö–∞–ª–æ—Ä–∏–∏: ${plan.kcal} –∫–∫–∞–ª

–°–∫–∞–∂–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
‚Ä¢ "—Ö–æ—á—É –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –∏ –º–µ–Ω—å—à–µ —É–≥–ª–µ–π, –∫–∞–ª–æ—Ä–∏–∏ –æ—Å—Ç–∞–≤—å"
‚Ä¢ "—É–≥–ª–µ–π –º–Ω–æ–≥–æ–≤–∞—Ç–æ, —Å—Ä–µ–∂—å –Ω–∞ 15%"
‚Ä¢ "–ø–æ—Å—Ç–∞–≤—å –±–µ–ª–æ–∫ 160 –≥"

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å üé§`
  
  await sendMessage(chatId, message, {
    inline_keyboard: [
      [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω', callback_data: 'accept_plan' }],
      [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' }]
    ]
  })
}

async function handlePlanDiscussion(chatId: number, userId: number, text: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getUser(userId)
    const { data: currentPlan } = await supabase
      .from('plans')
      .select('*')
      .eq('user_id', userId)
      .eq('is_active', true)
      .single()
    
    if (!currentPlan || !user) {
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
      return
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: SYSTEM_PROMPT },
        { 
          role: 'user', 
          content: `–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: ${currentPlan.kcal} –∫–∫–∞–ª, –ë${currentPlan.p}–≥ –ñ${currentPlan.f}–≥ –£${currentPlan.c}–≥. –í–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.weight_kg}–∫–≥. TDEE: ${calculateTDEE(user)} –∫–∫–∞–ª. –ó–∞–ø—Ä–æ—Å: "${text}"` 
        }
      ],
      temperature: 0.3,
      response_format: { type: 'json_object' }
    })
    
    const intentJson = completion.choices[0].message.content
    if (!intentJson) {
      throw new Error('Empty response from LLM')
    }
    
    const intent = JSON.parse(intentJson)
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await applyPlanChanges(chatId, userId, intent, currentPlan, user)
    
  } catch (error) {
    console.error('Plan discussion error:', error)
    await sendMessage(chatId, '–ù–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ:', {
      inline_keyboard: [
        [{ text: '–ë–æ–ª—å—à–µ –±–µ–ª–∫–∞', callback_data: 'menu_discussion' }],
        [{ text: '–ú–µ–Ω—å—à–µ —É–≥–ª–µ–≤–æ–¥–æ–≤', callback_data: 'menu_discussion' }],
        [{ text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' }]
      ]
    })
  }
}

async function applyPlanChanges(chatId: number, userId: number, intent: any, currentPlan: any, user: any) {
  const tdee = calculateTDEE(user)
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  if (intent.intent === 'set_calories' && intent.constraints.target_calories) {
    const targetCal = intent.constraints.target_calories
    const minCal = Math.round(tdee * 0.75)
    const maxCal = Math.round(tdee * 1.15)
    
    if (targetCal > maxCal || targetCal < minCal) {
      const suggestedCal = targetCal > maxCal ? maxCal : minCal
      await sendMessage(chatId, `‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å ${targetCal} –∫–∫–∞–ª –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä (–≤–∞—à TDEE ‚âà${tdee}).

–î–ª—è ${targetCal > maxCal ? '–º–∞—Å—Å–æ–Ω–∞–±–æ—Ä–∞' : '–ø–æ—Ö—É–¥–µ–Ω–∏—è'} —Ä–µ–∫–æ–º–µ–Ω–¥—É—é ${suggestedCal} –∫–∫–∞–ª.

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ${suggestedCal} –∫–∫–∞–ª?`, {
        inline_keyboard: [
          [{ text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å ${suggestedCal}`, callback_data: `confirm_calories_${suggestedCal}` }],
          [{ text: '‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ', callback_data: 'menu_discussion' }],
          [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'menu_main' }]
        ]
      })
      return
    }
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  let newP = currentPlan.p
  let newF = currentPlan.f
  let newC = currentPlan.c
  let newKcal = currentPlan.kcal
  
  // –ë–µ–ª–æ–∫
  if (intent.protein.mode === 'delta_g') {
    newP += intent.protein.value
  } else if (intent.protein.mode === 'delta_pct') {
    newP = Math.round(newP * (1 + intent.protein.value / 100))
  } else if (intent.protein.mode === 'target_g') {
    newP = intent.protein.value
  }
  
  // –ñ–∏—Ä—ã
  if (intent.fat.mode === 'delta_g') {
    newF += intent.fat.value
  } else if (intent.fat.mode === 'delta_pct') {
    newF = Math.round(newF * (1 + intent.fat.value / 100))
  } else if (intent.fat.mode === 'target_g') {
    newF = intent.fat.value
  }
  
  // –£–≥–ª–µ–≤–æ–¥—ã
  if (intent.carbs.mode === 'delta_g') {
    newC += intent.carbs.value
  } else if (intent.carbs.mode === 'delta_pct') {
    newC = Math.round(newC * (1 + intent.carbs.value / 100))
  } else if (intent.carbs.mode === 'target_g') {
    newC = intent.carbs.value
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º—É–º–æ–≤
  const minProtein = Math.round(user.weight_kg * 1.4)
  const minFat = Math.round(user.weight_kg * 0.6)
  
  let warnings: string[] = []
  if (newP < minProtein) {
    warnings.push(`–ë–µ–ª–æ–∫ –ø–æ–¥–Ω—è—Ç –¥–æ –º–∏–Ω–∏–º—É–º–∞ ${minProtein}–≥ (1.4 –≥/–∫–≥)`)
    newP = minProtein
  }
  if (newF < minFat) {
    warnings.push(`–ñ–∏—Ä—ã –ø–æ–¥–Ω—è—Ç—ã –¥–æ –º–∏–Ω–∏–º—É–º–∞ ${minFat}–≥ (0.6 –≥/–∫–≥)`)
    newF = minFat
  }
  
  // –ü–µ—Ä–µ—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π
  if (intent.constraints.keep_calories) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–æ—Ä–∏–∏, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≥–ª–µ–≤–æ–¥—ã
    const proteinCal = newP * 4
    const fatCal = newF * 9
    const carbsCal = currentPlan.kcal - proteinCal - fatCal
    newC = Math.round(carbsCal / 4)
    newKcal = currentPlan.kcal
  } else if (intent.carbs.mode === 'auto') {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤
    newKcal = Math.round((newP * 4) + (newF * 9) + (newC * 4))
  } else {
    newKcal = Math.round((newP * 4) + (newF * 9) + (newC * 4))
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
  await supabase.from('plans').update({ is_active: false }).eq('user_id', userId)
  await supabase.from('plans').insert({
    user_id: userId,
    kcal: newKcal,
    p: newP,
    f: newF,
    c: newC,
    source: 'manual',
    is_active: true,
    rules_json: intent
  })
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
  const deltaP = newP - currentPlan.p
  const deltaF = newF - currentPlan.f
  const deltaC = newC - currentPlan.c
  const deltaKcal = newKcal - currentPlan.kcal
  
  let explanation = intent.notes || '–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª—ë–Ω'
  if (intent.constraints.keep_calories) {
    explanation += `. –ö–∞–ª–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${newKcal} –∫–∫–∞–ª)`
  }
  
  let changesText: string[] = []
  if (deltaP !== 0) changesText.push(`–ë–µ–ª–æ–∫ ${deltaP > 0 ? '+' : ''}${deltaP}–≥`)
  if (deltaF !== 0) changesText.push(`–ñ–∏—Ä—ã ${deltaF > 0 ? '+' : ''}${deltaF}–≥`)
  if (deltaC !== 0) changesText.push(`–£–≥–ª–µ–≤–æ–¥—ã ${deltaC > 0 ? '+' : ''}${deltaC}–≥`)
  if (deltaKcal !== 0) changesText.push(`–ö–∞–ª–æ—Ä–∏–∏ ${deltaKcal > 0 ? '+' : ''}${deltaKcal}`)
  
  let message = `‚úÖ ${explanation}

${changesText.join(', ')}

<b>–ù–æ–≤—ã–π –ø–ª–∞–Ω:</b>
ü•© –ë ${newP}–≥ ¬∑ ü•ë –ñ ${newF}–≥ ¬∑ üçû –£ ${newC}–≥ ¬∑ üìä ${newKcal} –∫–∫–∞–ª`
  
  if (warnings.length > 0) {
    message += `\n\n‚ö†Ô∏è ${warnings.join('. ')}`
  }
  
  await setUserState(userId, 'none')
  await sendMessage(chatId, message, {
    inline_keyboard: [
      [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: 'menu_main' }],
      [{ text: 'üí¨ –ï—â—ë –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'menu_discussion' }]
    ]
  })
}

async function handleCaloriesConfirm(chatId: number, userId: number, data: string) {
  const calories = parseInt(data.replace('confirm_calories_', ''))
  
  const user = await getUser(userId)
  if (!user) return
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
  const proteinG = Math.round(user.weight_kg * 1.6)
  const fatG = Math.round(user.weight_kg * 0.8)
  const carbsG = Math.round((calories - (proteinG * 4) - (fatG * 9)) / 4)
  
  await supabase.from('plans').update({ is_active: false }).eq('user_id', userId)
  await supabase.from('plans').insert({
    user_id: userId,
    kcal: calories,
    p: proteinG,
    f: fatG,
    c: carbsG,
    source: 'manual',
    is_active: true
  })
  
  await sendMessage(chatId, `‚úÖ –ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª—ë–Ω

ü•© –ë ${proteinG}–≥ ¬∑ ü•ë –ñ ${fatG}–≥ ¬∑ üçû –£ ${carbsG}–≥ ¬∑ üìä ${calories} –∫–∫–∞–ª`, getMainMenuInline())
}

async function acceptPlan(chatId: number, userId: number) {
  await setUserState(userId, 'none')
  await sendMessage(chatId, '‚úÖ –ü–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç!', getMainMenuInline())
}

// === –ü–†–û–§–ò–õ–¨ ===

async function handleProfileMenu(chatId: number, userId: number) {
  const user = await getUser(userId)
  
  let profileText = 'üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n'
  
  if (user?.age) {
    profileText += `–í–æ–∑—Ä–∞—Å—Ç: ${user.age} –ª–µ—Ç\n`
    profileText += `–ü–æ–ª: ${user.sex === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}\n`
    profileText += `–†–æ—Å—Ç: ${user.height_cm} —Å–º\n`
    profileText += `–í–µ—Å: ${user.weight_kg} –∫–≥\n`
    profileText += `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${getActivityText(user.activity)}\n`
    profileText += `–¶–µ–ª—å: ${getGoalText(user.goal)}\n`
  } else {
    profileText += '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω'
  }
  
  await sendMessage(chatId, profileText, {
    inline_keyboard: [
      [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile_edit' }],
      [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' }]
    ]
  })
}

async function startProfileWizard(chatId: number, userId: number) {
  await setUserState(userId, 'profile_age')
  await sendMessage(chatId, 'üë§ –ù–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.\n\n–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30)')
}

async function handleProfileAge(chatId: number, userId: number, text: string) {
  const age = parseInt(text)
  if (isNaN(age) || age < 10 || age > 100) {
    await sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç)')
    return
  }
  
  await supabase.from('users').update({ age }).eq('user_id', userId)
  await setUserState(userId, 'profile_sex')
  
  await sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:', {
    inline_keyboard: [
      [{ text: '–ú—É–∂—Å–∫–æ–π', callback_data: 'set_sex_male' }],
      [{ text: '–ñ–µ–Ω—Å–∫–∏–π', callback_data: 'set_sex_female' }]
    ]
  })
}

async function handleProfileCallback(chatId: number, userId: number, data: string) {
  if (data === 'set_sex_male' || data === 'set_sex_female') {
    const sex = data === 'set_sex_male' ? 'male' : 'female'
    await supabase.from('users').update({ sex }).eq('user_id', userId)
    await setUserState(userId, 'profile_height')
    await sendMessage(chatId, '–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180)')
  } else if (data.startsWith('set_activity_')) {
    const activity = data.replace('set_activity_', '')
    await supabase.from('users').update({ activity }).eq('user_id', userId)
    await setUserState(userId, 'profile_goal')
    await sendMessage(chatId, '–í–∞—à–∞ —Ü–µ–ª—å?', {
      inline_keyboard: [
        [{ text: '–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å', callback_data: 'set_goal_fat_loss' }],
        [{ text: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å', callback_data: 'set_goal_maintain' }],
        [{ text: '–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å', callback_data: 'set_goal_gain' }]
      ]
    })
  } else if (data.startsWith('set_goal_')) {
    const goal = data.replace('set_goal_', '')
    await supabase.from('users').update({ goal }).eq('user_id', userId)
    await setUserState(userId, 'profile_tz')
    await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: Europe/Moscow)')
  }
}

async function handleProfileHeight(chatId: number, userId: number, text: string) {
  const height = parseFloat(text)
  if (isNaN(height) || height < 100 || height > 250) {
    await sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)')
    return
  }
  
  await supabase.from('users').update({ height_cm: height }).eq('user_id', userId)
  await setUserState(userId, 'profile_weight')
  await sendMessage(chatId, '–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5)')
}

async function handleProfileWeight(chatId: number, userId: number, text: string) {
  const weight = parseFloat(text)
  if (isNaN(weight) || weight < 30 || weight > 300) {
    await sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)')
    return
  }
  
  await supabase.from('users').update({ weight_kg: weight }).eq('user_id', userId)
  await setUserState(userId, 'profile_activity')
  
  await sendMessage(chatId, '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?', {
    inline_keyboard: [
      [{ text: '–°–∏–¥—è—á–∏–π', callback_data: 'set_activity_sedentary' }],
      [{ text: '–õ–µ–≥–∫–∏–π', callback_data: 'set_activity_light' }],
      [{ text: '–£–º–µ—Ä–µ–Ω–Ω—ã–π', callback_data: 'set_activity_moderate' }],
      [{ text: '–í—ã—Å–æ–∫–∏–π', callback_data: 'set_activity_high' }],
      [{ text: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π', callback_data: 'set_activity_very_high' }]
    ]
  })
}

async function handleProfileTz(chatId: number, userId: number, text: string) {
  await supabase.from('users').update({ tz: text }).eq('user_id', userId)
  await setUserState(userId, 'none')
  
  await sendMessage(chatId, '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.', {
    inline_keyboard: [
      [{ text: 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£', callback_data: 'menu_calculate' }]
    ]
  })
}

// === –†–ê–°–ß–Å–¢ –ö–ë–ñ–£ ===

function calculateTDEE(user: any): number {
  let bmr: number
  if (user.sex === 'male') {
    bmr = (10 * user.weight_kg) + (6.25 * user.height_cm) - (5 * user.age) + 5
  } else {
    bmr = (10 * user.weight_kg) + (6.25 * user.height_cm) - (5 * user.age) - 161
  }
  
  const palFactors: Record<string, number> = {
    sedentary: 1.2,
    light: 1.375,
    moderate: 1.55,
    high: 1.725,
    very_high: 1.9
  }
  
  return Math.round(bmr * palFactors[user.activity || 'sedentary'])
}

async function handleCalculate(chatId: number, userId: number) {
  const user = await getUser(userId)
  
  if (!user?.age || !user?.sex || !user?.height_cm || !user?.weight_kg || !user?.activity || !user?.goal) {
    await sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å', {
      inline_keyboard: [[{ text: '‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile_edit' }]]
    })
    return
  }
  
  const tdee = calculateTDEE(user)
  
  let targetKcal = tdee
  let goalAdjustment = '0%'
  if (user.goal === 'fat_loss') {
    targetKcal = Math.round(tdee * 0.85)
    goalAdjustment = '‚àí15%'
  } else if (user.goal === 'gain') {
    targetKcal = Math.round(tdee * 1.10)
    goalAdjustment = '+10%'
  }
  
  const proteinG = Math.round(user.weight_kg * 1.6)
  const fatG = Math.round(user.weight_kg * 0.8)
  const carbsG = Math.round((targetKcal - (proteinG * 4) - (fatG * 9)) / 4)
  
  await supabase.from('plans').update({ is_active: false }).eq('user_id', userId)
  await supabase.from('plans').insert({
    user_id: userId,
    kcal: targetKcal,
    p: proteinG,
    f: fatG,
    c: carbsG,
    source: 'auto',
    is_active: true
  })
  
  const message = `‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –Ø —Ä–∞—Å—Å—á–∏—Ç–∞–ª –ø–ª–∞–Ω –ø–æ —Ñ–æ—Ä–º—É–ª–µ Mifflin‚ÄìSt Jeor –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (PAL).</b>

TDEE: ${tdee} –∫–∫–∞–ª ‚Üí —Ü–µ–ª—å ${goalAdjustment} = ${targetKcal} –∫–∫–∞–ª
ü•© –ë–µ–ª–æ–∫: ${proteinG} –≥ ¬∑ ü•ë –ñ–∏—Ä—ã: ${fatG} –≥ ¬∑ üçû –£–≥–ª–µ–≤–æ–¥—ã: ${carbsG} –≥

<b>–ü–æ—á–µ–º—É —Ç–∞–∫:</b>
‚Ä¢ –ë–µ–ª–æ–∫ ~1.6 –≥/–∫–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à—Ü
‚Ä¢ –ñ–∏—Ä—ã ~0.8 –≥/–∫–≥ –¥–ª—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–∞
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã ‚Äî –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π

–•–æ—Ç–∏—Ç–µ –ø–æ–¥ —Å–µ–±—è? –°–∫–∞–∂–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:
‚Ä¢ "—Ö–æ—á—É –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –∏ –º–µ–Ω—å—à–µ —É–≥–ª–µ–π, –∫–∞–ª–æ—Ä–∏–∏ –æ—Å—Ç–∞–≤—å"
‚Ä¢ "—É–≥–ª–µ–π –º–Ω–æ–≥–æ–≤–∞—Ç–æ, —Å—Ä–µ–∂—å –Ω–∞ 15%"
‚Ä¢ "–ø–æ—Å—Ç–∞–≤—å –±–µ–ª–æ–∫ 160 –≥"`
  
  await sendMessage(chatId, message, {
    inline_keyboard: [
      [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: 'accept_plan' }],
      [{ text: 'üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ', callback_data: 'menu_discussion' }]
    ]
  })
}

// === –°–ï–ì–û–î–ù–Ø ===

async function handleTodayMenu(chatId: number, userId: number) {
  await sendMessage(chatId, 'üìÖ <b>–°–µ–≥–æ–¥–Ω—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    inline_keyboard: [
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º', callback_data: 'today_add_meal' }],
      [{ text: 'üìà –ò—Ç–æ–≥ –¥–Ω—è', callback_data: 'today_summary' }],
      [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' }]
    ]
  })
}

async function startMealInput(chatId: number, userId: number) {
  await setUserState(userId, 'meal_input')
  await sendMessage(chatId, 'üçΩÔ∏è –í–≤–µ–¥–∏ –∫–∫–∞–ª/–ë/–ñ/–£\n\n–ü—Ä–∏–º–µ—Ä: 620 –∫–∫–∞–ª, –ë45 –ñ15 –£70')
}

async function handleMealInput(chatId: number, userId: number, text: string) {
  const kcalMatch = text.match(/(\d+)\s*–∫?–∫–∞–ª/i)
  const proteinMatch = text.match(/[–±b]\s*(\d+)/i)
  const fatMatch = text.match(/[–∂f]\s*(\d+)/i)
  const carbsMatch = text.match(/[—Éc]\s*(\d+)/i)
  
  if (!kcalMatch) {
    await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–∏. –ü—Ä–∏–º–µ—Ä: 620 –∫–∫–∞–ª, –ë45 –ñ15 –£70')
    return
  }
  
  const kcal = parseInt(kcalMatch[1])
  const protein = proteinMatch ? parseInt(proteinMatch[1]) : 0
  const fat = fatMatch ? parseInt(fatMatch[1]) : 0
  const carbs = carbsMatch ? parseInt(carbsMatch[1]) : 0
  
  await supabase.from('meals').insert({
    user_id: userId,
    meal_name: text,
    kcal,
    protein,
    fat,
    carbs,
    ts: new Date().toISOString()
  })
  
    const today = new Date().toISOString().split('T')[0]
    const { data: existing } = await supabase
    .from('daily_totals')
      .select('*')
      .eq('user_id', userId)
      .eq('date', today)
      .maybeSingle()
    
    if (existing) {
    await supabase.from('daily_totals')
      .update({
        kcal: existing.kcal + kcal,
        p: existing.p + protein,
        f: existing.f + fat,
        c: existing.c + carbs
      })
        .eq('user_id', userId)
        .eq('date', today)
    } else {
    await supabase.from('daily_totals').insert({
          user_id: userId,
          date: today,
      kcal,
      p: protein,
      f: fat,
      c: carbs
    })
  }
  
  await setUserState(userId, 'none')
  await sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫

üî• ${kcal} –∫–∫–∞–ª
ü•© ${protein}–≥ –±–µ–ª–∫–∞ ¬∑ ü•ë ${fat}–≥ –∂–∏—Ä–æ–≤ ¬∑ üçû ${carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤`, getMainMenuInline())
}

async function showDaySummary(chatId: number, userId: number) {
    const today = new Date().toISOString().split('T')[0]
    
  const { data: totals } = await supabase
    .from('daily_totals')
      .select('*')
      .eq('user_id', userId)
      .eq('date', today)
      .maybeSingle()
    
  const { data: plan } = await supabase
    .from('plans')
    .select('*')
    .eq('user_id', userId)
    .eq('is_active', true)
    .maybeSingle()
  
  if (!totals || !plan) {
    await sendMessage(chatId, 'üìä –°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏', getMainMenuInline())
    return
  }
  
  const kcalProgress = Math.round((totals.kcal / plan.kcal) * 100)
  
  let advice = ''
  if (totals.p < plan.p - 20) {
    advice = '\n\nüí° –°–æ–≤–µ—Ç: –¥–æ–±–µ—Ä–∏ 10‚Äì15 –≥ –±–µ–ª–∫–∞ –≤–µ—á–µ—Ä–æ–º.'
  } else if (kcalProgress > 110) {
    advice = '\n\nüí° –°–æ–≤–µ—Ç: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º. –ó–∞–≤—Ç—Ä–∞ —É–º–µ–Ω—å—à–∏ –ø–æ—Ä—Ü–∏–∏.'
  } else if (Math.abs(kcalProgress - 100) < 10) {
    advice = '\n\nüí° –û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å!'
  }
  
  const message = `üìà <b>–ò—Ç–æ–≥ –¥–Ω—è ${today}</b>

–°–µ–≥–æ–¥–Ω—è: ${totals.kcal}/${plan.kcal} –∫–∫–∞–ª (${kcalProgress}%)
ü•© –ë ${totals.p}/${plan.p} ¬∑ ü•ë –ñ ${totals.f}/${plan.f} ¬∑ üçû –£ ${totals.c}/${plan.c}${advice}`
  
  await sendMessage(chatId, message, getMainMenuInline())
}

// === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===

async function handleRemindersMenu(chatId: number, userId: number) {
  await sendMessage(chatId, '‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', {
    inline_keyboard: [[{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu_main' }]]
  })
}

// === –ü–û–ú–û–©–¨ ===

async function handleHelp(chatId: number, userId: number) {
  const message = `‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –∑–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ ‚Äî –ø–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ ‚Äî –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ
‚Ä¢ –°–µ–≥–æ–¥–Ω—è ‚Äî –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏—ë–º—ã –∏ —Å–º–æ—Ç—Ä–∏ –∏—Ç–æ–≥–∏

<b>–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ "—Ö–æ—á—É –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –∏ –º–µ–Ω—å—à–µ —É–≥–ª–µ–π, –∫–∞–ª–æ—Ä–∏–∏ –æ—Å—Ç–∞–≤—å"
‚Ä¢ "—É–≥–ª–µ–π –º–Ω–æ–≥–æ–≤–∞—Ç–æ, —Å—Ä–µ–∂—å –Ω–∞ 15%"
‚Ä¢ "–ø–æ—Å—Ç–∞–≤—å –±–µ–ª–æ–∫ 160 –≥"
‚Ä¢ "–º–Ω–µ –Ω—É–∂–Ω–æ 3000 –∫–∞–ª–æ—Ä–∏–π"

<b>–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
–ò—Å–ø–æ–ª—å–∑—É–π –≥–æ–ª–æ—Å üé§ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ!

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/wipe ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ`
  
  await sendMessage(chatId, message, getMainMenuInline())
}

// === WIPE ===

async function wipeUserData(chatId: number, userId: number) {
  await supabase.from('meals').delete().eq('user_id', userId)
  await supabase.from('daily_totals').delete().eq('user_id', userId)
  await supabase.from('plans').delete().eq('user_id', userId)
  await supabase.from('preferences').delete().eq('user_id', userId)
  await supabase.from('state').delete().eq('user_id', userId)
  await supabase.from('reminders').delete().eq('user_id', userId)
  
  await supabase.from('users').update({
    age: null,
    sex: null,
    height_cm: null,
    weight_kg: null,
    activity: null,
    goal: null
  }).eq('user_id', userId)
  
  await sendMessage(chatId, '‚úÖ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?', {
    inline_keyboard: [[{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile_edit' }]]
  })
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===

function getActivityText(activity: string): string {
  const map: Record<string, string> = {
    sedentary: '–°–∏–¥—è—á–∏–π',
    light: '–õ–µ–≥–∫–∏–π',
    moderate: '–£–º–µ—Ä–µ–Ω–Ω—ã–π',
    high: '–í—ã—Å–æ–∫–∏–π',
    very_high: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'
  }
  return map[activity] || activity
}

function getGoalText(goal: string): string {
  const map: Record<string, string> = {
    fat_loss: '–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å',
    maintain: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å',
    gain: '–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å'
  }
  return map[goal] || goal
}