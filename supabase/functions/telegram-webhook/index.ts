import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders, status: 200 })
  }
  
  try {
    const update = await req.json()
    
    // –ü–æ–∫–∞ —É–±–∏—Ä–∞–µ–º callback_query –æ–±—Ä–∞–±–æ—Ç–∫—É - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º Reply Keyboard
    
    if (update.message) {
      const chatId = update.message.chat.id
      const userId = update.message.from.id
      const text = update.message.text
      const photo = update.message.photo
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text?.startsWith('/start')) {
        await ensureUser(userId, update.message.from.username)
        const user = await getUser(userId)
        
        if (!user || !user.height) {
          // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          await sendMessage(chatId, getInitialSetupMessage())
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
          await sendMessageWithKeyboard(chatId, getWelcomeMessage(), getMainKeyboard())
        }
        return success()
      }
      
      if (text?.startsWith('/menu') || text?.startsWith('/help')) {
        await sendMessageWithKeyboard(chatId, getHelpMessage(), getMainKeyboard())
        return success()
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
      if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' || text?.startsWith('/stats')) {
        const stats = await getDailyStats(userId)
        await sendMessageWithKeyboard(chatId, stats, getMainKeyboard())
        return success()
      }
      
      if (text === 'ü•ò –ß—Ç–æ –ø–æ–µ—Å—Ç—å?' || text?.startsWith('/recipe')) {
        await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...')
        const advice = await getSmartAdvice(userId, '—á—Ç–æ –º–Ω–µ –ø–æ–µ—Å—Ç—å —Å–µ–π—á–∞—Å?')
        await sendMessageWithKeyboard(chatId, advice, getMainKeyboard())
        return success()
      }
      
      if (text === '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ' || text?.startsWith('/undo')) {
        const result = await undoLastMeal(userId)
        await sendMessageWithKeyboard(chatId, result, getMainKeyboard())
        return success()
      }
      
      if (text === '‚öôÔ∏è –ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' || text?.startsWith('/params')) {
        const user = await getUser(userId)
        if (user) {
          const paramsText = getUserParamsText(user)
          await sendMessageWithKeyboard(chatId, paramsText, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start')
        }
        return success()
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Apple Watch / Apple Health
      if (text?.startsWith('/sync_weight ')) {
        const weight = parseFloat(text.split(' ')[1])
        if (weight && weight > 30 && weight < 300) {
          await syncHealthData(userId, 'weight', weight)
          await sendMessageWithKeyboard(chatId, `‚úÖ –í–µ—Å –∑–∞–ø–∏—Å–∞–Ω: ${weight} –∫–≥\n\n‚åö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Apple Shortcuts –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!`, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: /sync_weight 75.5')
        }
        return success()
      }

      if (text?.startsWith('/sync_steps ')) {
        const steps = parseInt(text.split(' ')[1])
        if (steps && steps > 0 && steps < 100000) {
          await syncHealthData(userId, 'steps', steps)
          let message = `‚úÖ –®–∞–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã: ${steps.toLocaleString()} üëü`
          
          // –ú–æ—Ç–∏–≤–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
          if (steps >= 15000) {
            message += `\n\nüî• –û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n–î–æ–±–∞–≤–∏–ª +300 –∫–∫–∞–ª –∫ –≤–∞—à–µ–π –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º–µ.`
          } else if (steps >= 10000) {
            message += `\n\nüëç –•–æ—Ä–æ—à–æ! –¶–µ–ª—å 10000 —à–∞–≥–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!`
          } else if (steps >= 5000) {
            message += `\n\nüí™ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –¥–∞–≤–∞–π—Ç–µ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ 10000!`
          }
          
          await sendMessageWithKeyboard(chatId, message, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: /sync_steps 12000')
        }
        return success()
      }

      if (text?.startsWith('/sync_sleep ')) {
        const sleep = parseFloat(text.split(' ')[1])
        if (sleep && sleep > 0 && sleep < 24) {
          await syncHealthData(userId, 'sleep_hours', sleep)
          let message = `‚úÖ –°–æ–Ω –∑–∞–ø–∏—Å–∞–Ω: ${sleep}—á üõå`
          
          // –°–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞
          if (sleep < 6) {
            message += `\n\n‚ö†Ô∏è –ú–∞–ª–æ —Å–Ω–∞! –û—Ä–≥–∞–Ω–∏–∑–º –≤ —Å—Ç—Ä–µ—Å—Å–µ.\n–î–æ–±–∞–≤–∏–ª +200 –∫–∫–∞–ª –∫ –Ω–æ—Ä–º–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`
          } else if (sleep >= 7 && sleep <= 9) {
            message += `\n\n‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã–π —Å–æ–Ω! –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!`
          } else if (sleep > 9) {
            message += `\n\nüò¥ –ú–Ω–æ–≥–æ —Å–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö?`
          }
          
          await sendMessageWithKeyboard(chatId, message, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Å—ã —Å–Ω–∞: /sync_sleep 7.5')
        }
        return success()
      }

      if (text?.startsWith('/sync_calories ')) {
        const calories = parseInt(text.split(' ')[1])
        if (calories && calories > 0 && calories < 5000) {
          await syncHealthData(userId, 'active_calories', calories)
          let message = `‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞: ${calories} –∫–∫–∞–ª üî•`
          
          if (calories >= 500) {
            message += `\n\nüí™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!\n–î–æ–±–∞–≤–∏–ª ${calories} –∫–∫–∞–ª –∫ –≤–∞—à–µ–π –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º–µ.`
          } else if (calories >= 300) {
            message += `\n\nüëç –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`
          }
          
          await sendMessageWithKeyboard(chatId, message, getMainKeyboard())
        } else {
          await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: /sync_calories 450')
        }
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (text && !text.startsWith('/')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ü–µ–ª—å
        const isUserParams = text.toLowerCase().includes('—Å–º') || 
                            text.toLowerCase().includes('–∫–≥') ||
                            text.toLowerCase().includes('–≤–µ—à—É') ||
                            text.toLowerCase().includes('—Ä–æ—Å—Ç') ||
                            text.toLowerCase().includes('—Å–±—Ä–æ—Å–∏—Ç—å') ||
                            text.toLowerCase().includes('–Ω–∞–±—Ä–∞—Ç—å') ||
                            text.toLowerCase().includes('–∑–∞–ª') ||
                            text.toLowerCase().includes('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
        
        if (isUserParams) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await sendMessage(chatId, 'üìù –û–±–Ω–æ–≤–ª—è—é –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ü–µ–ª–∏...')
          const result = await updateUserParams(userId, text)
          await sendMessageWithKeyboard(chatId, result, getMainKeyboard())
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ç
          const isQuestion = text.toLowerCase().includes('—á—Ç–æ') || 
                            text.toLowerCase().includes('–ø–æ—Å–æ–≤–µ—Ç—É–π') ||
                            text.toLowerCase().includes('–ø—Ä–µ–¥–ª–æ–∂–∏') ||
                            text.toLowerCase().includes('?')
          
          if (isQuestion) {
            // –î–∞–µ–º —Å–æ–≤–µ—Ç –∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç
            await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...')
            const advice = await getSmartAdvice(userId, text)
            await sendMessageWithKeyboard(chatId, advice, getMainKeyboard())
          } else {
            // –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã
            await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
            const analysis = await analyzeFoodText(text)
            await saveMeal(userId, analysis)
            
            // –î–∞–µ–º –∞–Ω–∞–ª–∏–∑ + —Å–æ–≤–µ—Ç
            const advice = await getAdviceAfterMeal(userId, analysis)
            await sendMessageWithKeyboard(chatId, formatAnalysis(analysis) + '\n\n' + advice, getMainKeyboard())
          }
        }
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ
      if (photo && photo.length > 0) {
        await sendMessage(chatId, 'üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...')
        const fileId = photo[photo.length - 1].file_id
        const fileUrl = await getFileUrl(fileId)
        const analysis = await analyzePhoto(fileUrl)
        await saveMeal(userId, analysis)
        await sendMessage(chatId, formatAnalysis(analysis))
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞
      if (update.message.voice) {
        await sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        const fileId = update.message.voice.file_id
        const fileUrl = await getFileUrl(fileId)
        const text = await transcribeVoice(fileUrl)
        
        if (text) {
          await sendMessage(chatId, `üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${text}`)
          const analysis = await analyzeFoodText(text)
          await saveMeal(userId, analysis)
          await sendMessage(chatId, formatAnalysis(analysis))
        } else {
          await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        }
        return success()
      }
    }
    
    return success()
  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
})

function success() {
  return new Response(JSON.stringify({ ok: true }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200
  })
}

async function sendMessage(chatId: number, text: string) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML' })
  })
}

async function sendMessageWithKeyboard(chatId: number, text: string, keyboard: any) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ 
      chat_id: chatId, 
      text, 
      parse_mode: 'HTML',
      reply_markup: keyboard
    })
  })
}

function getMainKeyboard() {
  return {
    keyboard: [
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { text: 'ü•ò –ß—Ç–æ –ø–æ–µ—Å—Ç—å?' }
      ],
      [
        { text: '‚öôÔ∏è –ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
        { text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ' }
      ]
    ],
    resize_keyboard: true,
    persistent: true
  }
}

async function ensureUser(userId: number, username?: string) {
  const { data } = await supabase
    .from('users')
    .select('user_id')
    .eq('user_id', userId)
    .single()
  
  if (!data) {
    await supabase.from('users').insert({
      user_id: userId,
      username: username,
      calories_goal: 2000,
      protein_goal: 150,
      carbs_goal: 200,
      fat_goal: 70
    })
  }
}

async function analyzeFoodText(text: string) {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π –ö–ë–ñ–£. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "weight": —á–∏—Å–ª–æ}'
          },
          { role: 'user', content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã: ${text}` }
        ],
        max_tokens: 200
      })
    })
    
    const data = await response.json()
    
    if (!data.choices || !data.choices[0]) {
      throw new Error('Invalid OpenAI response')
    }
    
    const content = data.choices[0].message.content
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try {
      return JSON.parse(content)
    } catch (jsonError) {
      // –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
      console.error('JSON parse error:', jsonError)
      return parseTextResponse(content)
    }
  } catch (error) {
    console.error('Analysis error:', error)
    return {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ',
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      weight: 100
    }
  }
}

function parseTextResponse(text: string) {
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const numbers = text.match(/\d+\.?\d*/g) || []
  return {
    name: '–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞',
    calories: parseInt(numbers[0] || '0') || 0,
    protein: parseFloat(numbers[1] || '0') || 0,
    carbs: parseFloat(numbers[2] || '0') || 0,
    fat: parseFloat(numbers[3] || '0') || 0,
    weight: parseInt(numbers[4] || '100') || 100
  }
}

async function analyzePhoto(fileUrl: string) {
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –µ–¥—ã. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ö–ë–ñ–£ –Ω–∞ 100–≥. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "weight": —á–∏—Å–ª–æ}'
              },
              {
                type: 'image_url',
                image_url: { url: fileUrl }
              }
            ]
          }
        ],
        max_tokens: 300
      })
    })
    
    const data = await response.json()
    
    if (!data.choices || !data.choices[0]) {
      throw new Error('Invalid OpenAI response')
    }
    
    const content = data.choices[0].message.content
    
    try {
      return JSON.parse(content)
    } catch (jsonError) {
      console.error('JSON parse error:', jsonError)
      return parseTextResponse(content)
    }
  } catch (error) {
    console.error('Photo analysis error:', error)
    return {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ —Å —Ñ–æ—Ç–æ',
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      weight: 100
    }
  }
}

async function getFileUrl(fileId: string) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
  const data = await response.json()
  return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
}

async function transcribeVoice(fileUrl: string) {
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
    const audioResponse = await fetch(fileUrl)
    const audioBlob = await audioResponse.blob()
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è Whisper API
    const formData = new FormData()
    formData.append('file', audioBlob, 'audio.ogg')
    formData.append('model', 'whisper-1')
    formData.append('language', 'ru')
    
    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: formData
    })
    
    const data = await response.json()
    return data.text || null
  } catch (error) {
    console.error('Transcription error:', error)
    return null
  }
}

async function saveMeal(userId: number, analysis: any) {
  await supabase.from('meals').insert({
    user_id: userId,
    meal_name: analysis.name,
    calories: analysis.calories,
    protein: analysis.protein,
    carbs: analysis.carbs,
    fat: analysis.fat
  })
}

async function getDailyStats(userId: number) {
  const today = new Date().toISOString().split('T')[0]
  
  const { data: meals } = await supabase
    .from('meals')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', `${today}T00:00:00`)
    .lte('created_at', `${today}T23:59:59`)
  
  const { data: user } = await supabase
    .from('users')
    .select('*')
    .eq('user_id', userId)
    .single()
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Apple Watch
  const healthData = await getHealthData(userId)
  
  if (!meals || meals.length === 0) {
    let message = 'üìä –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ.'
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Apple Watch –¥–∞–∂–µ –µ—Å–ª–∏ –µ–¥—ã –Ω–µ—Ç
    if (healthData) {
      message += `\n\n‚åö –î–∞–Ω–Ω—ã–µ Apple Watch:`
      if (healthData.steps) message += `\nüëü –®–∞–≥–∏: ${healthData.steps.toLocaleString()}`
      if (healthData.sleep_hours) message += `\nüõå –°–æ–Ω: ${healthData.sleep_hours}—á`
      if (healthData.active_calories) message += `\nüî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${healthData.active_calories} –∫–∫–∞–ª`
      if (healthData.weight) message += `\n‚öñÔ∏è –í–µ—Å: ${healthData.weight} –∫–≥`
    }
    
    return message
  }
  
  const total = meals.reduce((acc, meal) => ({
    calories: acc.calories + meal.calories,
    protein: acc.protein + meal.protein,
    carbs: acc.carbs + meal.carbs,
    fat: acc.fat + meal.fat
  }), { calories: 0, protein: 0, carbs: 0, fat: 0 })
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
  const baseCalories = user?.calories_goal || 2000
  const adjustedCalories = calculateAdjustedCalories(baseCalories, healthData)
  
  let caloriesText = `üî• –ö–∞–ª–æ—Ä–∏–∏: ${total.calories} / ${baseCalories}`
  if (adjustedCalories !== baseCalories) {
    caloriesText += ` (+${adjustedCalories - baseCalories} –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)`
  }
  
  let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:

${caloriesText}
ü•© –ë–µ–ª–∫–∏: ${total.protein.toFixed(1)}–≥ / ${user?.protein_goal || 150}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${total.carbs.toFixed(1)}–≥ / ${user?.carbs_goal || 200}–≥
ü•ë –ñ–∏—Ä—ã: ${total.fat.toFixed(1)}–≥ / ${user?.fat_goal || 70}–≥

üìù –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: ${meals.length}`

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Apple Watch
  if (healthData) {
    message += `\n\n‚åö –î–∞–Ω–Ω—ã–µ Apple Watch:`
    if (healthData.steps) {
      const emoji = healthData.steps >= 10000 ? '‚úÖ' : healthData.steps >= 5000 ? 'üëç' : 'üí™'
      message += `\n${emoji} –®–∞–≥–∏: ${healthData.steps.toLocaleString()}`
    }
    if (healthData.sleep_hours) {
      const emoji = healthData.sleep_hours >= 7 ? '‚úÖ' : healthData.sleep_hours >= 6 ? 'üò¥' : '‚ö†Ô∏è'
      message += `\n${emoji} –°–æ–Ω: ${healthData.sleep_hours}—á`
    }
    if (healthData.active_calories) {
      message += `\nüî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${healthData.active_calories} –∫–∫–∞–ª`
    }
    if (healthData.weight) {
      message += `\n‚öñÔ∏è –í–µ—Å: ${healthData.weight} –∫–≥`
    }
    
    message += `\n\nüí° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:\n/sync_weight ‚Ä¢ /sync_steps ‚Ä¢ /sync_sleep ‚Ä¢ /sync_calories`
  } else {
    message += `\n\n‚åö –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Apple Watch:\n/sync_weight 75.5 ‚Ä¢ /sync_steps 12000`
  }
  
  return message
}

function getGoalsMessage(userId: number) {
  return `üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏ –ø–æ –ö–ë–ñ–£:

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/setgoals - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏
/today - –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è`
}

function formatAnalysis(analysis: any) {
  return `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫:

üçΩÔ∏è ${analysis.name}
üî• ${analysis.calories} –∫–∫–∞–ª
ü•© ${analysis.protein}–≥ –±–µ–ª–∫–∞
üçû ${analysis.carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
ü•ë ${analysis.fat}–≥ –∂–∏—Ä–æ–≤`
}

function getHelpMessage() {
  return `üçé –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É:

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç: "–Ø –µ–ª –±–æ—Ä—â –∏ —Ö–ª–µ–±"
üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/goals - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£
/recipe - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç
/undo - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏

–í–µ—á–µ—Ä–æ–º –≤ 21:00 —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—é –æ—Ç—á–µ—Ç!`
}

async function undoLastMeal(userId: number) {
  try {
    const { data: lastMeal } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()
    
    if (!lastMeal) {
      return '‚ùå –ù–µ—Ç –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
    }
    
    await supabase
      .from('meals')
      .delete()
      .eq('id', lastMeal.id)
    
    return `‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${lastMeal.meal_name} (${lastMeal.calories} –∫–∫–∞–ª)`
  } catch (error) {
    console.error('Undo error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'
  }
}

async function getRecipeSuggestion(userId: number) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) {
      return '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start'
    }
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
      .lte('created_at', `${today}T23:59:59`)
    
    const total = meals?.reduce((acc, meal) => ({
      calories: acc.calories + meal.calories,
      protein: acc.protein + meal.protein,
      carbs: acc.carbs + meal.carbs,
      fat: acc.fat + meal.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    const prompt = `–ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ:
- –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ ${remaining.calories} –∫–∫–∞–ª (–º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ)
- –ë–µ–ª–∫–∞: ${remaining.protein.toFixed(1)}–≥
- –£–≥–ª–µ–≤–æ–¥–æ–≤: ${remaining.carbs.toFixed(1)}–≥
- –ñ–∏—Ä–æ–≤: ${remaining.fat.toFixed(1)}–≥

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üçΩÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
- —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: XXX –∫–∫–∞–ª, XX–≥/XX–≥/XX–≥`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –ø–æ–≤–∞—Ä. –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ—Å—Ç—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 500
      })
    })
    
    const data = await response.json()
    const recipe = data.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'
    
    return `ü•ò –†–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π:\n\n–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª\n\n${recipe}`
  } catch (error) {
    console.error('Recipe error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
  }
}

async function getAdviceAfterMeal(userId: number, meal: any) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) return ''
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
    
    const total = meals?.reduce((acc, m) => ({
      calories: acc.calories + m.calories,
      protein: acc.protein + m.protein,
      carbs: acc.carbs + m.carbs,
      fat: acc.fat + m.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    let advice = 'üí° –°–æ–≤–µ—Ç:\n'
    
    if (remaining.calories < 0) {
      advice += `‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –Ω–∞ ${Math.abs(remaining.calories)} –∫–∫–∞–ª. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è!`
    } else if (remaining.calories < 500) {
      advice += `‚úÖ –û—Å—Ç–∞–ª–æ—Å—å ${remaining.calories} –∫–∫–∞–ª –¥–æ —Ü–µ–ª–∏. –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!`
    } else {
      advice += `üìä –û—Å—Ç–∞–ª–æ—Å—å ${remaining.calories} –∫–∫–∞–ª. `
      
      if (remaining.protein > 30) {
        advice += `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–µ–ª–∫–∞ (${remaining.protein.toFixed(0)}–≥) - –¥–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∏—Ü—É, —Ç–≤–æ—Ä–æ–≥ –∏–ª–∏ —è–π—Ü–∞. `
      }
      if (remaining.carbs < 50 && remaining.protein < 20) {
        advice += `–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–≥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å —Å —É–≥–ª–µ–≤–æ–¥–∞–º–∏.`
      }
    }
    
    return advice
  } catch (error) {
    console.error('Advice error:', error)
    return ''
  }
}

async function updateUserParams(userId: number, text: string) {
  try {
    const prompt = `–ò–∑–≤–ª–µ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞: "${text}"

–ù–∞–π–¥–∏:
- –†–æ—Å—Ç –≤ —Å–º
- –í–µ—Å –≤ –∫–≥  
- –¶–µ–ª—å (—Å–±—Ä–æ—Å–∏—Ç—å/–Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å)
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≥ –¥–ª—è —Å–±—Ä–æ—Å–∞/–Ω–∞–±–æ—Ä–∞
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–∞–ª, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å–ø–æ—Ä—Ç)
- –í–æ–∑—Ä–∞—Å—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON:
{
  "height": —á–∏—Å–ª–æ_—Å–º,
  "weight": —á–∏—Å–ª–æ_–∫–≥,
  "goal": "lose" –∏–ª–∏ "gain",
  "target_weight": —á–∏—Å–ª–æ_–∫–≥,
  "activity": "high" –∏–ª–∏ "medium" –∏–ª–∏ "low",
  "age": —á–∏—Å–ª–æ_–ª–µ—Ç_–∏–ª–∏_null
}

–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, –ø–æ—Å—Ç–∞–≤—å null.`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã –∏–∑–≤–ª–µ–∫–∞–µ—à—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 200
      })
    })
    
    const data = await response.json()
    const content = data.choices?.[0]?.message?.content
    const params = JSON.parse(content)
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const goals = calculateNutritionGoals(params)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    await supabase
      .from('users')
      .update({
        height: params.height,
        weight: params.weight,
        goal: params.goal,
        target_weight: params.target_weight,
        activity: params.activity,
        calories_goal: goals.calories,
        protein_goal: goals.protein,
        carbs_goal: goals.carbs,
        fat_goal: goals.fat
      })
      .eq('user_id', userId)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ä–∞—Ü–∏–æ–Ω–∞
    const mealPlan = await generateMealPlan(params, goals)
    
    return `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Å—Ç–∞–≤–∏–ª –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!

üìã –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
üìè –†–æ—Å—Ç: ${params.height} —Å–º
‚öñÔ∏è –í–µ—Å: ${params.weight} –∫–≥
üéØ –¶–µ–ª—å: ${params.goal === 'lose' ? '–°–±—Ä–æ—Å–∏—Ç—å' : params.goal === 'gain' ? '–ù–∞–±—Ä–∞—Ç—å' : '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'} ${params.target_weight ? Math.abs(params.target_weight - params.weight) + ' –∫–≥' : '–≤–µ—Å'}
üèãÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${params.activity === 'high' ? '–í—ã—Å–æ–∫–∞—è (–∑–∞–ª 3-5 —Ä–∞–∑)' : params.activity === 'medium' ? '–°—Ä–µ–¥–Ω—è—è (1-2 —Ä–∞–∑–∞)' : '–ù–∏–∑–∫–∞—è'}

üìä –í–∞—à–∏ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å:
üî• –ö–∞–ª–æ—Ä–∏–∏: ${goals.calories}
ü•© –ë–µ–ª–∫–∏: ${goals.protein}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${goals.carbs}–≥
ü•ë –ñ–∏—Ä—ã: ${goals.fat}–≥

${mealPlan}

–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —á—Ç–æ –µ–¥–∏—Ç–µ, –∏ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º! üéØ`
  } catch (error) {
    console.error('Update params error:', error)
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
  }
}

async function generateMealPlan(params: any, goals: any) {
  try {
    const goalText = params.goal === 'lose' ? '–ø–æ—Ö—É–¥–µ–Ω–∏–µ' : params.goal === 'gain' ? '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã' : '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞'
    
    const prompt = `–°–æ—Å—Ç–∞–≤—å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –¥–µ–Ω—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞:
- –í–µ—Å: ${params.weight}–∫–≥
- –¶–µ–ª—å: ${goalText}
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${params.activity === 'high' ? '–≤—ã—Å–æ–∫–∞—è (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)' : '—Å—Ä–µ–¥–Ω—è—è'}
- –ö–∞–ª–æ—Ä–∏–∏: ${goals.calories}
- –ë–µ–ª–∫–∏: ${goals.protein}–≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${goals.carbs}–≥
- –ñ–∏—Ä—ã: ${goals.fat}–≥

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–ë–ï–ó markdown, —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç):

üçΩÔ∏è –ü–†–ò–ú–ï–†–ù–´–ô –ü–õ–ê–ù –†–ê–¶–ò–û–ù–ê:

üåÖ –ó–∞–≤—Ç—Ä–∞–∫ (7:00-9:00)
‚Ä¢ [–ø—Ä–æ—Å—Ç–æ–µ –±–ª—é–¥–æ]
‚Ä¢ –ö–ë–ñ–£: XXX –∫–∫–∞–ª, XX–±/XX—É/XX–∂

ü•ó –û–±–µ–¥ (13:00-14:00)
‚Ä¢ [–ø—Ä–æ—Å—Ç–æ–µ –±–ª—é–¥–æ]
‚Ä¢ –ö–ë–ñ–£: XXX –∫–∫–∞–ª, XX–±/XX—É/XX–∂

üçñ –£–∂–∏–Ω (19:00-20:00)
‚Ä¢ [–ø—Ä–æ—Å—Ç–æ–µ –±–ª—é–¥–æ]
‚Ä¢ –ö–ë–ñ–£: XXX –∫–∫–∞–ª, XX–±/XX—É/XX–∂

üí° –°–æ–≤–µ—Ç: [–∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é]`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–æ—Å—Ç—ã–µ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 500
      })
    })
    
    const data = await response.json()
    return data.choices?.[0]?.message?.content || ''
  } catch (error) {
    console.error('Meal plan error:', error)
    return `üçΩÔ∏è –ü–†–ò–ú–ï–†–ù–´–ô –ü–õ–ê–ù –†–ê–¶–ò–û–ù–ê:

üåÖ –ó–∞–≤—Ç—Ä–∞–∫: –û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏, —è–π—Ü–∞
ü•ó –û–±–µ–¥: –ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏
üçñ –£–∂–∏–Ω: –†—ã–±–∞ —Å —Å–∞–ª–∞—Ç–æ–º

–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–æ–º—É –ø–ª–∞–Ω—É!`
  }
}

function calculateNutritionGoals(params: any) {
  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (—Ñ–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞)
  let bmr = 10 * params.weight + 6.25 * params.height - 5 * 30 + 5 // –º—É–∂—á–∏–Ω–∞ 30 –ª–µ—Ç
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  let activityMultiplier = 1.2
  if (params.activity === 'high') activityMultiplier = 1.7
  else if (params.activity === 'medium') activityMultiplier = 1.5
  
  let calories = Math.round(bmr * activityMultiplier)
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ü–µ–ª—å
  if (params.goal === 'lose') {
    calories -= 500 // –¥–µ—Ñ–∏—Ü–∏—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
  } else if (params.goal === 'gain') {
    calories += 300 // –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞
  }
  
  // –ú–∞–∫—Ä–æ—Å—ã
  const protein = Math.round(params.weight * 2.2) // 2.2–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏—Ö—Å—è
  const carbs = Math.round(calories * 0.4 / 4) // 40% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
  const fat = Math.round(calories * 0.25 / 9) // 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
  
  return { calories, protein, carbs, fat }
}

async function getSmartAdvice(userId: number, question: string) {
  try {
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', userId)
      .single()
    
    if (!user) {
      return '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start'
    }
    
    const today = new Date().toISOString().split('T')[0]
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
    
    const mealsList = meals?.map(m => `${m.meal_name} (${m.calories} –∫–∫–∞–ª, ${m.protein}–≥ –±–µ–ª–∫–∞)`).join(', ') || '–Ω–∏—á–µ–≥–æ'
    
    const total = meals?.reduce((acc, m) => ({
      calories: acc.calories + m.calories,
      protein: acc.protein + m.protein,
      carbs: acc.carbs + m.carbs,
      fat: acc.fat + m.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 }) || { calories: 0, protein: 0, carbs: 0, fat: 0 }
    
    const remaining = {
      calories: user.calories_goal - total.calories,
      protein: user.protein_goal - total.protein,
      carbs: user.carbs_goal - total.carbs,
      fat: user.fat_goal - total.fat
    }
    
    const userInfo = user.height ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.height}—Å–º, ${user.weight}–∫–≥, —Ü–µ–ª—å ${user.goal === 'lose' ? '—Å–±—Ä–æ—Å–∏—Ç—å' : '–Ω–∞–±—Ä–∞—Ç—å'} –≤–µ—Å` : ''
    
    const prompt = `–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –≤ Telegram. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "${question}"

${userInfo}

–°–µ–≥–æ–¥–Ω—è –æ–Ω —É–∂–µ –µ–ª: ${mealsList}
–°—ä–µ–¥–µ–Ω–æ: ${total.calories} –∫–∫–∞–ª, ${total.protein.toFixed(0)}–≥ –±–µ–ª–∫–∞, ${total.carbs.toFixed(0)}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, ${total.fat.toFixed(0)}–≥ –∂–∏—Ä–æ–≤

–¶–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å: ${user.calories_goal} –∫–∫–∞–ª, ${user.protein_goal}–≥ –±–µ–ª–∫–∞, ${user.carbs_goal}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, ${user.fat_goal}–≥ –∂–∏—Ä–æ–≤

–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª, ${remaining.protein.toFixed(0)}–≥ –±–µ–ª–∫–∞

–í–ê–ñ–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram!
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown (* _ -)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π** –∏–ª–∏ *–∫—É—Ä—Å–∏–≤*
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
- –ö–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã

–î–∞–π —Å–æ–≤–µ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

üìã –ê–Ω–∞–ª–∏–∑:
[–∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —á—Ç–æ –æ–Ω –µ–ª –∏ —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç]

üçΩÔ∏è –í–∞—Ä–∏–∞–Ω—Ç 1: [–Ω–∞–∑–≤–∞–Ω–∏–µ]
‚Ä¢ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π]
‚Ä¢ –ö–ë–ñ–£: 300 –∫–∫–∞–ª, 20–±/30—É/10–∂
‚Ä¢ [–ø–æ—á–µ–º—É —ç—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç]

üçΩÔ∏è –í–∞—Ä–∏–∞–Ω—Ç 2: [–Ω–∞–∑–≤–∞–Ω–∏–µ]
‚Ä¢ [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π]
‚Ä¢ –ö–ë–ñ–£: 250 –∫–∫–∞–ª, 15–±/25—É/12–∂
‚Ä¢ [–ø–æ—á–µ–º—É —ç—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç]

üí° –ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:
[—á—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ —Å–µ–π—á–∞—Å]`
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –î–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 600
      })
    })
    
    const data = await response.json()
    const advice = data.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç'
    
    const progressText = `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:
üî• –ö–∞–ª–æ—Ä–∏–∏: ${total.calories} –∏–∑ ${user.calories_goal}
ü•© –ë–µ–ª–∫–∏: ${total.protein.toFixed(0)}–≥ –∏–∑ ${user.protein_goal}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${total.carbs.toFixed(0)}–≥ –∏–∑ ${user.carbs_goal}–≥
ü•ë –ñ–∏—Ä—ã: ${total.fat.toFixed(0)}–≥ –∏–∑ ${user.fat_goal}–≥

–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: ${remaining.calories} –∫–∫–∞–ª

---

${advice}`
    
    return progressText
  } catch (error) {
    console.error('Smart advice error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
  }
}

async function getUser(userId: number) {
  const { data } = await supabase
    .from('users')
    .select('*')
    .eq('user_id', userId)
    .single()
  return data
}

function getInitialSetupMessage() {
  return `üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –±–æ—Ç–∞-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–∏—Ç–∞–Ω–∏–∏. –ü–æ–º–æ–≥—É:
‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ö–ë–ñ–£ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ –∏ –≥–æ–ª–æ—Å–∞
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ä–∞—Ü–∏–æ–Ω
‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏
‚úÖ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:

üìè –†–æ—Å—Ç (–≤ —Å–º)
‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)
üéØ –¶–µ–ª—å (—Å–±—Ä–æ—Å–∏—Ç—å/–Ω–∞–±—Ä–∞—Ç—å/–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å)
üìä –ù–∞ —Å–∫–æ–ª—å–∫–æ –∫–≥ (–µ—Å–ª–∏ —Ö—É–¥–µ–µ—Ç–µ/–Ω–∞–±–∏—Ä–∞–µ—Ç–µ)
üèãÔ∏è –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–ª 3-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—è, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-2 —Ä–∞–∑–∞, –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π)
üë§ –í–æ–∑—Ä–∞—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä:
"–ú–Ω–µ 30 –ª–µ—Ç, —Ä–æ—Å—Ç 180—Å–º, –≤–µ—à—É 85–∫–≥, —Ö–æ—á—É —Å–±—Ä–æ—Å–∏—Ç—å 10–∫–≥, —Ö–æ–∂—É –≤ –∑–∞–ª 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–æ—Å—Ç–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞—Ü–∏–æ–Ω–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤–∞—à–∏ —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£!

‚ö†Ô∏è –í–∞–∂–Ω–æ: –í—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è!
–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Ç–æ—á–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:`
}

function getUserParamsText(user: any) {
  const goalText = user.goal === 'lose' ? '–°–±—Ä–æ—Å–∏—Ç—å' : user.goal === 'gain' ? '–ù–∞–±—Ä–∞—Ç—å' : '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'
  const activityText = user.activity === 'high' ? '–í—ã—Å–æ–∫–∞—è (–∑–∞–ª)' : 
                      user.activity === 'medium' ? '–°—Ä–µ–¥–Ω—è—è' : '–ù–∏–∑–∫–∞—è'
  
  return `‚öôÔ∏è –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

üìè –†–æ—Å—Ç: ${user.height || '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º
‚öñÔ∏è –í–µ—Å: ${user.weight || '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
üéØ –¶–µ–ª—å: ${goalText} ${user.target_weight ? Math.abs(user.target_weight - user.weight) : ''} –∫–≥
üèãÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}

üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å:
üî• –ö–∞–ª–æ—Ä–∏–∏: ${user.calories_goal}
ü•© –ë–µ–ª–∫–∏: ${user.protein_goal}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${user.carbs_goal}–≥
ü•ë –ñ–∏—Ä—ã: ${user.fat_goal}–≥

üí° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è!
–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.`
}

function getWelcomeMessage() {
  return `üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –±–æ—Ç–∞-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!

üéØ –ß–¢–û –Ø –£–ú–ï–Æ:

üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–¥—É:
‚Ä¢ –¢–µ–∫—Å—Ç: "–Ø –µ–ª –≥—Ä–µ—á–∫—É —Å –∫—É—Ä–∏—Ü–µ–π"
‚Ä¢ –§–æ—Ç–æ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
‚Ä¢ –ì–æ–ª–æ—Å: –∑–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –µ–ª–∏
‚Üí –°—Ä–∞–∑—É –¥–∞—é –ö–ë–ñ–£ –∏ —Å–æ–≤–µ—Ç—ã

ü•ò –ü–æ–º–æ–≥–∞—é —Å –ø–∏—Ç–∞–Ω–∏–µ–º:
‚Ä¢ "–ß—Ç–æ –ø–æ–µ—Å—Ç—å?" ‚Üí –ø—Ä–µ–¥–ª–æ–∂—É 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é –æ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–∏/–Ω–µ–¥–æ–µ–¥–∞–Ω–∏–∏

üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å:
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å (üìä –∫–Ω–æ–ø–∫–∞)
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ 21:00
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏

‚åö –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Apple Watch:
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Å–∞, —à–∞–≥–æ–≤, —Å–Ω–∞
‚Ä¢ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –£—á–µ—Ç —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–æ—Å—Ç, –≤–µ—Å, —Ü–µ–ª—å)
‚Ä¢ –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤–∞—à—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–Ω–æ–ø–∫–∞ ‚öôÔ∏è

üí° –ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø:

1Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –æ–¥–∏–Ω —Ä–∞–∑:
"–Ø 180—Å–º, –≤–µ—à—É 80–∫–≥, —Ö–æ—á—É —Å–±—Ä–æ—Å–∏—Ç—å 10–∫–≥, —Ö–æ–∂—É –≤ –∑–∞–ª"

2Ô∏è‚É£ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –µ–¥—É –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º:
"–ü–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª –æ–≤—Å—è–Ω–∫–æ–π –∏ —è–π—Ü–∞–º–∏"
[—Ñ–æ—Ç–æ –µ–¥—ã]
[–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]

3Ô∏è‚É£ –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —Å–æ–≤–µ—Ç:
"–ß—Ç–æ –º–Ω–µ –ø–æ–µ—Å—Ç—å?"
"–ü–æ—Å–æ–≤–µ—Ç—É–π —Ä–µ—Ü–µ–ø—Ç"

4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

‚ö†Ô∏è –í–∞–∂–Ω–æ: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è!
–¢–æ—á–Ω—ã–π –ö–ë–ñ–£ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –≥—Ä–∞–º–º–æ–≤–æ–∫.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ! üöÄ`
}

// ‚åö –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Apple Watch / Apple Health

async function syncHealthData(userId: number, field: string, value: number) {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const { data: existing } = await supabase
      .from('health_data')
      .select('*')
      .eq('user_id', userId)
      .eq('date', today)
      .maybeSingle()
    
    if (existing) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('health_data')
        .update({ [field]: value })
        .eq('user_id', userId)
        .eq('date', today)
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('health_data')
        .insert({
          user_id: userId,
          date: today,
          [field]: value
        })
    }
  } catch (error) {
    console.error('Sync health data error:', error)
  }
}

async function getHealthData(userId: number) {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    const { data } = await supabase
      .from('health_data')
      .select('*')
      .eq('user_id', userId)
      .eq('date', today)
      .maybeSingle()
    
    return data
  } catch (error) {
    return null
  }
}

function calculateAdjustedCalories(baseCalories: number, healthData: any): number {
  let adjusted = baseCalories
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –≤—ã—Å–æ–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—à–∞–≥–∏)
  if (healthData?.steps && healthData.steps >= 15000) {
    adjusted += 300
  } else if (healthData?.steps && healthData.steps >= 12000) {
    adjusted += 200
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –Ω–µ–¥–æ—Å—ã–ø (—Å—Ç—Ä–µ—Å—Å –æ—Ä–≥–∞–Ω–∏–∑–º–∞)
  if (healthData?.sleep_hours && healthData.sleep_hours < 6) {
    adjusted += 200
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  if (healthData?.active_calories) {
    adjusted += healthData.active_calories
  }
  
  return adjusted
}
