import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders, status: 200 })
  }
  
  try {
    const update = await req.json()
    
    if (update.message) {
      const chatId = update.message.chat.id
      const userId = update.message.from.id
      const text = update.message.text
      const photo = update.message.photo
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text?.startsWith('/start')) {
        await sendMessage(chatId, getWelcomeMessage())
        await ensureUser(userId, update.message.from.username)
        return success()
      }
      
      if (text?.startsWith('/help')) {
        await sendMessage(chatId, getHelpMessage())
        return success()
      }
      
      if (text?.startsWith('/stats')) {
        const stats = await getDailyStats(userId)
        await sendMessage(chatId, stats)
        return success()
      }
      
      if (text?.startsWith('/goals')) {
        await sendMessage(chatId, getGoalsMessage(userId))
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (text && !text.startsWith('/')) {
        await sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        const analysis = await analyzeFoodText(text)
        await saveMeal(userId, analysis)
        await sendMessage(chatId, formatAnalysis(analysis))
        return success()
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ
      if (photo && photo.length > 0) {
        await sendMessage(chatId, 'üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –µ–¥—ã...')
        const fileId = photo[photo.length - 1].file_id
        const fileUrl = await getFileUrl(fileId)
        const analysis = await analyzePhoto(fileUrl)
        await saveMeal(userId, analysis)
        await sendMessage(chatId, formatAnalysis(analysis))
        return success()
      }
    }
    
    return success()
  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
})

function success() {
  return new Response(JSON.stringify({ ok: true }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200
  })
}

async function sendMessage(chatId: number, text: string) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML' })
  })
}

async function ensureUser(userId: number, username?: string) {
  const { data } = await supabase
    .from('users')
    .select('user_id')
    .eq('user_id', userId)
    .single()
  
  if (!data) {
    await supabase.from('users').insert({
      user_id: userId,
      username: username,
      calories_goal: 2000,
      protein_goal: 150,
      carbs_goal: 200,
      fat_goal: 70
    })
  }
}

async function analyzeFoodText(text: string) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: '–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π –ö–ë–ñ–£. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "weight": —á–∏—Å–ª–æ}'
        },
        { role: 'user', content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã: ${text}` }
      ],
      max_tokens: 200
    })
  })
  
  const data = await response.json()
  const content = data.choices[0].message.content
  return JSON.parse(content)
}

async function analyzePhoto(fileUrl: string) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –µ–¥—ã. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ö–ë–ñ–£ –Ω–∞ 100–≥. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "calories": —á–∏—Å–ª–æ, "protein": —á–∏—Å–ª–æ, "carbs": —á–∏—Å–ª–æ, "fat": —á–∏—Å–ª–æ, "weight": —á–∏—Å–ª–æ}'
            },
            {
              type: 'image_url',
              image_url: { url: fileUrl }
            }
          ]
        }
      ],
      max_tokens: 300
    })
  })
  
  const data = await response.json()
  const content = data.choices[0].message.content
  return JSON.parse(content)
}

async function getFileUrl(fileId: string) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
  const data = await response.json()
  return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
}

async function saveMeal(userId: number, analysis: any) {
  await supabase.from('meals').insert({
    user_id: userId,
    meal_name: analysis.name,
    calories: analysis.calories,
    protein: analysis.protein,
    carbs: analysis.carbs,
    fat: analysis.fat
  })
}

async function getDailyStats(userId: number) {
  const today = new Date().toISOString().split('T')[0]
  
  const { data: meals } = await supabase
    .from('meals')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', `${today}T00:00:00`)
    .lte('created_at', `${today}T23:59:59`)
  
  if (!meals || meals.length === 0) {
    return 'üìä –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ.'
  }
  
  const { data: user } = await supabase
    .from('users')
    .select('*')
    .eq('user_id', userId)
    .single()
  
  const total = meals.reduce((acc, meal) => ({
    calories: acc.calories + meal.calories,
    protein: acc.protein + meal.protein,
    carbs: acc.carbs + meal.carbs,
    fat: acc.fat + meal.fat
  }), { calories: 0, protein: 0, carbs: 0, fat: 0 })
  
  return `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:

üî• –ö–∞–ª–æ—Ä–∏–∏: ${total.calories} / ${user?.calories_goal || 2000}
ü•© –ë–µ–ª–∫–∏: ${total.protein.toFixed(1)}–≥ / ${user?.protein_goal || 150}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${total.carbs.toFixed(1)}–≥ / ${user?.carbs_goal || 200}–≥
ü•ë –ñ–∏—Ä—ã: ${total.fat.toFixed(1)}–≥ / ${user?.fat_goal || 70}–≥

üìù –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: ${meals.length}`
}

function getGoalsMessage(userId: number) {
  return `üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏ –ø–æ –ö–ë–ñ–£:

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/setgoals - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏
/today - –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è`
}

function formatAnalysis(analysis: any) {
  return `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫:

üçΩÔ∏è ${analysis.name}
üî• ${analysis.calories} –∫–∫–∞–ª
ü•© ${analysis.protein}–≥ –±–µ–ª–∫–∞
üçû ${analysis.carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
ü•ë ${analysis.fat}–≥ –∂–∏—Ä–æ–≤`
}

function getWelcomeMessage() {
  return `üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –ö–ë–ñ–£. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
üìù –¢–µ–∫—Å—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—ã –µ–ª–∏
üì∑ –§–æ—Ç–æ –µ–¥—ã
üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–í–µ—á–µ—Ä–æ–º —è –ø—Ä–∏—à–ª—é –æ—Ç—á–µ—Ç –ø–æ –¥–Ω—é!`
}

function getHelpMessage() {
  return `üçé –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É:

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç: "–Ø –µ–ª –±–æ—Ä—â –∏ —Ö–ª–µ–±"
üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/goals - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£

–í–µ—á–µ—Ä–æ–º –≤ 21:00 —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—é –æ—Ç—á–µ—Ç!`
}
