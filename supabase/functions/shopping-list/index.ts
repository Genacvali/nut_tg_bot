// Shopping List - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'

const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 */
async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const payload: any = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  }

  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }

  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })

    const result = await response.json()

    if (!response.ok) {
      console.error('Telegram API error:', result)
      if (result.description?.includes("can't parse entities")) {
        payload.parse_mode = undefined
        await fetch(`${TELEGRAM_API}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        })
      }
    }

    return result
  } catch (error) {
    console.error('Error sending message:', error)
    throw error
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI
 */
async function generateShoppingList(userContext: any, days: number = 7): Promise<string> {
  const profile = userContext.profile
  const plan = userContext.plan

  const prompt = `–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫. –°–æ–∑–¥–∞–π –ü–†–ê–ö–¢–ò–ß–ù–´–ô —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ ${days} –¥–Ω–µ–π.

**–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:**
- –¶–µ–ª—å: ${profile.goal === 'lose' ? '–ø–æ—Ö—É–¥–µ–Ω–∏–µ' : profile.goal === 'gain' ? '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã' : '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞'}
- –ü–æ–ª: ${profile.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}
- –í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç
- –í–µ—Å: ${profile.current_weight} –∫–≥
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${profile.activity_level}

**–ü–õ–ê–ù –ö–ë–ñ–£ –ù–ê –î–ï–ù–¨:**
- –ö–∞–ª–æ—Ä–∏–∏: ${plan.calories} –∫–∫–∞–ª
- –ë–µ–ª–æ–∫: ${plan.protein}–≥
- –ñ–∏—Ä—ã: ${plan.fats}–≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${plan.carbs}–≥

**–ó–ê–î–ê–ù–ò–ï:**
–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏ –Ω–∞ ${days} –¥–Ω–µ–π.

**–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:**
1. –£—á–∏—Ç—ã–≤–∞–π —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Ö—É–¥–µ–Ω–∏–µ/–Ω–∞–±–æ—Ä/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ)
2. –í–∫–ª—é—á–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è
3. –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥—Ä–∞–º–º–æ–≤–∫–∏/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
4. –ì—Ä—É–ø–ø–∏—Ä—É–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
5. –ë–µ–ª–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –¥–ª—è —Ü–µ–ª–∏
6. –î–æ–±–∞–≤—å –±–∞–∑–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–≥–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**

ü•© **–ë–µ–ª–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 2 –∫–≥
‚Ä¢ –Ø–π—Ü–∞ - 20 —à—Ç
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 1 –∫–≥
‚Ä¢ (–∏ —Ç.–¥.)

üåæ **–ö—Ä—É–ø—ã –∏ –∑–ª–∞–∫–∏:**
‚Ä¢ –†–∏—Å –±—É—Ä—ã–π - 500–≥
‚Ä¢ –û–≤—Å—è–Ω–∫–∞ - 500–≥
‚Ä¢ (–∏ —Ç.–¥.)

ü•¶ **–û–≤–æ—â–∏:**
‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 500–≥
‚Ä¢ –û–≥—É—Ä—Ü—ã - 1 –∫–≥
‚Ä¢ (–∏ —Ç.–¥.)

üçé **–§—Ä—É–∫—Ç—ã:**
‚Ä¢ –ë–∞–Ω–∞–Ω—ã - 7 —à—Ç
‚Ä¢ –Ø–±–ª–æ–∫–∏ - 1 –∫–≥
‚Ä¢ (–∏ —Ç.–¥.)

ü•õ **–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**
‚Ä¢ –ú–æ–ª–æ–∫–æ 2.5% - 2–ª
‚Ä¢ –ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π - 500–≥
‚Ä¢ (–∏ —Ç.–¥.)

ü•ú **–û—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞:**
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 200–≥
‚Ä¢ (–∏ —Ç.–¥.)

üßÇ **–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–æ—á–µ–µ:**
‚Ä¢ –°–æ–ª—å, –ø–µ—Ä–µ—Ü
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 200–º–ª
‚Ä¢ (–∏ —Ç.–¥.)

**–°–¢–ò–õ–¨:**
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ ${days} –¥–Ω–µ–π
- –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
- –£—á–∏—Ç—ã–≤–∞–π —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è ${days} –¥–Ω–µ–π`

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - AI –¥–∏–µ—Ç–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤–ª—è–µ—à—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.7
      })
    })

    const data = await response.json()
    return data.choices[0].message.content.trim()
  } catch (error) {
    console.error('Error generating shopping list:', error)
    throw error
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ (fallback –±–µ–∑ AI)
 */
function generateBasicShoppingList(plan: any, days: number = 7): string {
  const dailyProtein = plan.protein
  const dailyCarbs = plan.carbs
  const dailyFats = plan.fats

  // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã
  const chickenBreast = Math.round((dailyProtein * 0.4 * days) / 0.23) // 23% –±–µ–ª–∫–∞ –≤ –∫—É—Ä–∏—Ü–µ
  const eggs = Math.ceil((dailyProtein * 0.2 * days) / 6) // ~6–≥ –±–µ–ª–∫–∞ –Ω–∞ —è–π—Ü–æ
  const cottage = Math.round((dailyProtein * 0.2 * days) / 0.16) // 16% –±–µ–ª–∫–∞ –≤ —Ç–≤–æ—Ä–æ–≥–µ

  const rice = Math.round((dailyCarbs * 0.3 * days) / 0.28) // 28% —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ —Ä–∏—Å–µ
  const oats = Math.round((dailyCarbs * 0.2 * days) / 0.66) // 66% —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –æ–≤—Å—è–Ω–∫–µ
  const bread = Math.round((dailyCarbs * 0.15 * days) / 0.49) // 49% —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ —Ö–ª–µ–±–µ

  const nuts = Math.round((dailyFats * 0.2 * days) / 0.49) // 49% –∂–∏—Ä–æ–≤ –≤ –æ—Ä–µ—Ö–∞—Ö
  const oil = Math.round((dailyFats * 0.2 * days) / 0.99) // 99% –∂–∏—Ä–æ–≤ –≤ –º–∞—Å–ª–µ

  const vegetables = Math.round(300 * days) // 300–≥ –æ–≤–æ—â–µ–π –≤ –¥–µ–Ω—å
  const fruits = Math.round(200 * days) // 200–≥ —Ñ—Ä—É–∫—Ç–æ–≤ –≤ –¥–µ–Ω—å

  return `üõí **–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ ${days} –¥–Ω–µ–π**

ü•© **–ë–µ–ª–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - ${Math.round(chickenBreast / 1000)}–∫–≥ (${chickenBreast}–≥)
‚Ä¢ –Ø–π—Ü–∞ - ${eggs} —à—Ç
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - ${Math.round(cottage / 1000)}–∫–≥

üåæ **–ö—Ä—É–ø—ã –∏ –∑–ª–∞–∫–∏:**
‚Ä¢ –†–∏—Å - ${Math.round(rice / 100) * 100}–≥
‚Ä¢ –û–≤—Å—è–Ω–∫–∞ - ${Math.round(oats / 100) * 100}–≥
‚Ä¢ –•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π - ${Math.round(bread / 100) * 100}–≥

ü•¶ **–û–≤–æ—â–∏ (${Math.round(vegetables / 1000)}–∫–≥):**
‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 500–≥
‚Ä¢ –û–≥—É—Ä—Ü—ã - 500–≥
‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã - 500–≥
‚Ä¢ –ü–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π - 300–≥
‚Ä¢ –õ–∏—Å—Ç–æ–≤–æ–π —Å–∞–ª–∞—Ç - 200–≥

üçé **–§—Ä—É–∫—Ç—ã (${Math.round(fruits / 1000)}–∫–≥):**
‚Ä¢ –ë–∞–Ω–∞–Ω—ã - ${Math.ceil(days / 2)} —à—Ç
‚Ä¢ –Ø–±–ª–æ–∫–∏ - ${Math.ceil(days / 2)} —à—Ç
‚Ä¢ –Ø–≥–æ–¥—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ - 300–≥

ü•ú **–ñ–∏—Ä—ã:**
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å/–æ—Ä–µ—Ö–∏ - ${Math.round(nuts)}–≥
‚Ä¢ –ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ - ${Math.round(oil)}–º–ª
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - ${Math.ceil(days / 3)} —à—Ç

ü•õ **–ú–æ–ª–æ—á–Ω—ã–µ:**
‚Ä¢ –ú–æ–ª–æ–∫–æ 2.5% - ${Math.round((days * 200) / 1000)}–ª
‚Ä¢ –ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π - 500–≥

üßÇ **–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–æ—á–µ–µ:**
‚Ä¢ –°–æ–ª—å, –ø–µ—Ä–µ—Ü, —Å–ø–µ—Ü–∏–∏
‚Ä¢ –ß–µ—Å–Ω–æ–∫, –ª—É–∫

üí° –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞ –ö–ë–ñ–£. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–æ—Ä—Ü–∏–∏ –ø–æ —Å–≤–æ–µ–º—É –≤–∫—É—Å—É!`
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
serve(async (req) => {
  try {
    const { userId, chatId, days } = await req.json()

    if (!userId || !chatId) {
      return new Response(
        JSON.stringify({ error: 'Missing userId or chatId' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      )
    }

    const daysCount = days || 7

    console.log(`üõí Generating shopping list for user ${userId}, days: ${daysCount}`)

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: context } = await supabase
      .rpc('get_user_full_context_by_id', { p_user_id: userId })

    if (!context || !context.profile || !context.plan) {
      await sendMessage(
        chatId,
        '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è.\n\n–ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start'
      )
      return new Response(
        JSON.stringify({ success: false, error: 'Profile not found' }),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    }

    await sendMessage(chatId, `‚è≥ –°–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ ${daysCount} –¥–Ω–µ–π...`)

    let shoppingList: string

    try {
      // –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å AI
      shoppingList = await generateShoppingList(context, daysCount)
    } catch (error) {
      console.error('Error generating AI shopping list, using fallback:', error)
      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
      shoppingList = generateBasicShoppingList(context.plan, daysCount)
    }

    const header = `üõí **–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫**\nüìÖ –ù–∞ ${daysCount} –¥–Ω–µ–π\n\n`
    const footer = `\n\nüí° **–°–æ–≤–µ—Ç—ã:**\n` +
      `‚Ä¢ –•—Ä–∞–Ω–∏ –∫—Ä—É–ø—ã –≤ —Å—É—Ö–æ–º –º–µ—Å—Ç–µ\n` +
      `‚Ä¢ –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã - –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ\n` +
      `‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - –æ—Ç–ª–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å–≤–µ–∂–∏–º\n` +
      `‚Ä¢ –ì–æ—Ç–æ–≤—å –∫—É—Ä–∏—Ü—É –ø–æ—Ä—Ü–∏—è–º–∏ –∏ —Ö—Ä–∞–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö`

    const fullMessage = header + shoppingList + footer

    await sendMessage(chatId, fullMessage, {
      inline_keyboard: [
        [
          { text: "üìÖ –ù–∞ 3 –¥–Ω—è", callback_data: "shopping_list_3" },
          { text: "üìÖ –ù–∞ 7 –¥–Ω–µ–π", callback_data: "shopping_list_7" }
        ],
        [{ text: "üìÖ –ù–∞ 14 –¥–Ω–µ–π", callback_data: "shopping_list_14" }],
        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
      ]
    })

    return new Response(
      JSON.stringify({ success: true }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 200
      }
    )

  } catch (error) {
    console.error('Shopping list error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})
