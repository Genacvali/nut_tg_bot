/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π
 * C.I.D. Bot - Subscription System
 */

export interface SubscriptionPlan {
  id: number
  name: string
  duration_days: number
  price_amount: number
  price_currency: string
  features: any
}

export interface UserSubscription {
  id: number
  user_id: number
  plan_id: number | null
  status: 'trial' | 'active' | 'expired' | 'cancelled'
  started_at: string
  expires_at: string
  is_trial: boolean
  days_remaining?: number
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function checkSubscription(
  supabase: any,
  userId: number
): Promise<{ hasAccess: boolean; subscription: UserSubscription | null; needsPayment: boolean }> {
  const { data, error } = await supabase
    .rpc('check_subscription_status', { p_user_id: userId })
    .single()

  if (error || !data) {
    // –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç—Ä–∏–∞–ª
    const { data: existingTrial } = await supabase
      .from('user_subscriptions')
      .select('*')
      .eq('user_id', userId)
      .eq('is_trial', true)
      .single()

    if (!existingTrial) {
      // –¢—Ä–∏–∞–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω - —Å–æ–∑–¥–∞–µ–º
      return {
        hasAccess: false,
        subscription: null,
        needsPayment: false // –ù—É–∂–µ–Ω —Ç—Ä–∏–∞–ª, –∞ –Ω–µ –æ–ø–ª–∞—Ç–∞
      }
    }

    // –¢—Ä–∏–∞–ª –±—ã–ª - –Ω—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞
    return {
      hasAccess: false,
      subscription: null,
      needsPayment: true
    }
  }

  return {
    hasAccess: data.has_active_subscription,
    subscription: data,
    needsPayment: !data.has_active_subscription
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function createTrialSubscription(
  supabase: any,
  userId: number
): Promise<UserSubscription> {
  const expiresAt = new Date()
  expiresAt.setDate(expiresAt.getDate() + 7) // 7 –¥–Ω–µ–π —Ç—Ä–∏–∞–ª–∞

  const { data, error } = await supabase
    .from('user_subscriptions')
    .insert({
      user_id: userId,
      plan_id: null,
      status: 'trial',
      is_trial: true,
      expires_at: expiresAt.toISOString()
    })
    .select()
    .single()

  if (error) throw error
  return data
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function getSubscriptionPlans(supabase: any): Promise<SubscriptionPlan[]> {
  const { data, error } = await supabase
    .from('subscription_plans')
    .select('*')
    .eq('is_active', true)
    .neq('name', 'trial')
    .order('duration_days', { ascending: true })

  if (error) throw error
  return data || []
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
 */
export function formatSubscriptionMessage(subscription: UserSubscription | null): string {
  if (!subscription) {
    return `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω!**

–ü–æ–ª—É—á–∏ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.

–ü–æ—Å–ª–µ —Ç—Ä–∏–∞–ª–∞:
‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 299‚ÇΩ
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî 699‚ÇΩ (—Å–∫–∏–¥–∫–∞ 22%)
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 1999‚ÇΩ (—Å–∫–∏–¥–∫–∞ 44%)`
  }

  if (subscription.status === 'trial') {
    const daysLeft = subscription.days_remaining || 0
    return `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**

–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}

–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∏–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É:
‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 299‚ÇΩ
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî 699‚ÇΩ (—Å–∫–∏–¥–∫–∞ 22%)
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 1999‚ÇΩ (—Å–∫–∏–¥–∫–∞ 44%)`
  }

  if (subscription.status === 'active') {
    const daysLeft = subscription.days_remaining || 0
    return `‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞**

–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏! üíö`
  }

  return `‚è∞ **–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**

–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:
‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 299‚ÇΩ
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî 699‚ÇΩ (—Å–∫–∏–¥–∫–∞ 22%)
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 1999‚ÇΩ (—Å–∫–∏–¥–∫–∞ 44%)`
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
 */
export async function createPaymentLink(
  supabase: any,
  userId: number,
  planId: number,
  amount: number
): Promise<string> {
  // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–ÆKassa, Stripe, etc.)
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  
  const { data: payment } = await supabase
    .from('payments')
    .insert({
      user_id: userId,
      amount: amount,
      currency: 'RUB',
      status: 'pending',
      payment_provider: 'pending_integration'
    })
    .select()
    .single()

  return `https://payment.example.com/${payment.id}` // –ó–∞–≥–ª—É—à–∫–∞
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ —Ç—Ä–∏–∞–ª–µ)
 */
export async function logUsage(
  supabase: any,
  userId: number,
  actionType: string
): Promise<void> {
  await supabase
    .from('usage_logs')
    .insert({
      user_id: userId,
      action_type: actionType
    })
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export async function checkUsageLimits(
  supabase: any,
  userId: number,
  actionType: string
): Promise<{ allowed: boolean; limit: number; used: number }> {
  const { data: subscription } = await supabase
    .from('user_subscriptions')
    .select('*, subscription_plans(*)')
    .eq('user_id', userId)
    .eq('status', 'trial')
    .single()

  if (!subscription || !subscription.subscription_plans?.features?.limits) {
    return { allowed: true, limit: -1, used: 0 }
  }

  const limits = subscription.subscription_plans.features.limits
  const limitKey = `${actionType}_per_day`
  const limit = limits[limitKey]

  if (!limit) {
    return { allowed: true, limit: -1, used: 0 }
  }

  // –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const today = new Date().toISOString().split('T')[0]
  const { data: logs } = await supabase
    .from('usage_logs')
    .select('id')
    .eq('user_id', userId)
    .eq('action_type', actionType)
    .gte('created_at', `${today}T00:00:00`)

  const used = logs?.length || 0

  return {
    allowed: used < limit,
    limit: limit,
    used: used
  }
}


