// Weekly AI Report - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-–æ—Ç—á–µ—Ç
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'

const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
 */
async function sendLongMessage(chatId: number, text: string, replyMarkup?: any) {
  const MAX_LENGTH = 4000

  if (text.length <= MAX_LENGTH) {
    return await sendMessage(chatId, text, replyMarkup)
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
  const parts = []
  let currentPart = ''

  const lines = text.split('\n')
  for (const line of lines) {
    if ((currentPart + line + '\n').length > MAX_LENGTH) {
      parts.push(currentPart)
      currentPart = line + '\n'
    } else {
      currentPart += line + '\n'
    }
  }

  if (currentPart) {
    parts.push(currentPart)
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
  for (let i = 0; i < parts.length; i++) {
    const isLast = i === parts.length - 1
    await sendMessage(chatId, parts[i], isLast ? replyMarkup : undefined)
    await new Promise(resolve => setTimeout(resolve, 500))
  }
}

async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const payload: any = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  }

  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }

  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })

    const result = await response.json()

    if (!response.ok) {
      console.error('Telegram API error:', result)
      if (result.description?.includes("can't parse entities")) {
        payload.parse_mode = undefined
        await fetch(`${TELEGRAM_API}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        })
      }
    }

    return result
  } catch (error) {
    console.error('Error sending message:', error)
    throw error
  }
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
 */
async function getWeeklyStats(userId: number) {
  const today = new Date()
  const weekAgo = new Date(today)
  weekAgo.setDate(weekAgo.getDate() - 7)

  const startDate = weekAgo.toISOString().split('T')[0]
  const endDate = today.toISOString().split('T')[0]

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
  const { data: weekLogs } = await supabase
    .from('food_logs')
    .select('calories, protein, fats, carbs, logged_at')
    .eq('user_id', userId)
    .gte('logged_at', `${startDate}T00:00:00`)
    .lte('logged_at', `${endDate}T23:59:59`)
    .order('logged_at', { ascending: true })

  if (!weekLogs || weekLogs.length === 0) {
    return null
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
  const dayStats: any = {}
  weekLogs.forEach((log: any) => {
    const day = log.logged_at.split('T')[0]
    if (!dayStats[day]) {
      dayStats[day] = {
        calories: 0,
        protein: 0,
        fats: 0,
        carbs: 0,
        logs_count: 0
      }
    }
    dayStats[day].calories += log.calories || 0
    dayStats[day].protein += log.protein || 0
    dayStats[day].fats += log.fats || 0
    dayStats[day].carbs += log.carbs || 0
    dayStats[day].logs_count += 1
  })

  const days = Object.keys(dayStats).length
  const totalCalories = weekLogs.reduce((sum: number, log: any) => sum + (log.calories || 0), 0)
  const totalProtein = weekLogs.reduce((sum: number, log: any) => sum + (log.protein || 0), 0)
  const totalFats = weekLogs.reduce((sum: number, log: any) => sum + (log.fats || 0), 0)
  const totalCarbs = weekLogs.reduce((sum: number, log: any) => sum + (log.carbs || 0), 0)

  return {
    days_logged: days,
    total_logs: weekLogs.length,
    avg_calories: Math.round(totalCalories / days),
    avg_protein: Math.round(totalProtein / days),
    avg_fats: Math.round(totalFats / days),
    avg_carbs: Math.round(totalCarbs / days),
    day_stats: dayStats
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI-–æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function generateAIReport(weeklyStats: any, userContext: any): Promise<string> {
  const profile = userContext.profile
  const plan = userContext.plan
  const streakInfo = userContext.streak_info

  const prompt = `–¢—ã - AI —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

**–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:**
- –¶–µ–ª—å: ${profile.goal === 'lose' ? '–ø–æ—Ö—É–¥–µ–Ω–∏–µ' : profile.goal === 'gain' ? '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã' : '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞'}
- –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}, –ø–æ–ª: ${profile.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}
- –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: ${plan.calories} –∫–∫–∞–ª/–¥–µ–Ω—å
- –¶–µ–ª–µ–≤–æ–π –±–µ–ª–æ–∫: ${plan.protein}–≥/–¥–µ–Ω—å
- –¢–µ–∫—É—â–∏–π streak: ${streakInfo?.current_streak || 0} –¥–Ω–µ–π
- –†–µ–∫–æ—Ä–¥ streak: ${streakInfo?.longest_streak || 0} –¥–Ω–µ–π

**–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ:**
- –î–Ω–µ–π —Å –ª–æ–≥–∞–º–∏: ${weeklyStats.days_logged} –∏–∑ 7
- –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: ${weeklyStats.total_logs}
- –°—Ä–µ–¥–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏: ${weeklyStats.avg_calories} –∫–∫–∞–ª/–¥–µ–Ω—å (—Ü–µ–ª—å: ${plan.calories})
- –°—Ä–µ–¥–Ω–∏–π –±–µ–ª–æ–∫: ${weeklyStats.avg_protein}–≥/–¥–µ–Ω—å (—Ü–µ–ª—å: ${plan.protein})
- –°—Ä–µ–¥–Ω–∏–µ –∂–∏—Ä—ã: ${weeklyStats.avg_fats}–≥/–¥–µ–Ω—å
- –°—Ä–µ–¥–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥—ã: ${weeklyStats.avg_carbs}–≥/–¥–µ–Ω—å

**–ó–ê–î–ê–ù–ò–ï:**
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏:

1. **üìä –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏** (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞)
2. **üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏** (—Å—Ä–∞–≤–Ω–∏ —Ñ–∞–∫—Ç —Å —Ü–µ–ª—å—é, –ø–æ—Ö–≤–∞–ª–∏ –∏–ª–∏ —É–∫–∞–∂–∏ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
3. **üí° –ò–Ω—Å–∞–π—Ç—ã** (2-3 –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø—Ä–æ–±–ª–µ–º—ã, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã)
4. **üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** (3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é)

**–°–¢–ò–õ–¨:**
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –Ω–æ —á–µ—Å—Ç–Ω—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ
- –§–æ—Ä–º–∞—Ç: markdown

–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 300-500 —Å–ª–æ–≤.`

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI —Ñ–∏—Ç–Ω–µ—Å-–∫–æ—É—á. –°–æ–∑–¥–∞–µ—à—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.7
      })
    })

    const data = await response.json()
    return data.choices[0].message.content.trim()
  } catch (error) {
    console.error('Error generating AI report:', error)
    throw error
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
serve(async (req) => {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 18:00
    const today = new Date()
    const dayOfWeek = today.getDay() // 0 = Sunday
    const hour = today.getHours()

    console.log(`üìä Weekly AI Report check: day=${dayOfWeek}, hour=${hour}`)

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: activeUsers, error } = await supabase
      .from('users')
      .select('id, telegram_id, first_name')
      .not('telegram_id', 'is', null)

    if (error) throw error

    console.log(`Found ${activeUsers.length} users to process`)

    let sentCount = 0
    let skippedCount = 0

    for (const user of activeUsers) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: context } = await supabase
          .rpc('get_user_full_context_by_id', { p_user_id: user.id })

        if (!context || !context.profile || !context.plan) {
          skippedCount++
          continue
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if (!context.subscription ||
            (context.subscription.status !== 'active' &&
             context.subscription.status !== 'trial')) {
          skippedCount++
          continue
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        const weeklyStats = await getWeeklyStats(user.id)

        if (!weeklyStats) {
          // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await sendMessage(
            user.telegram_id,
            `üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n` +
            `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n` +
            `üí° –ù–∞—á–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-–æ—Ç—á–µ—Ç —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!`,
            {
              inline_keyboard: [
                [{ text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É", callback_data: "quick_log_food" }],
                [{ text: "üìä –î–Ω–µ–≤–Ω–∏–∫", callback_data: "diary" }]
              ]
            }
          )
          sentCount++
          continue
        }

        // –ü–æ–ª—É—á–∞–µ–º streak info
        const { data: streakInfo } = await supabase
          .rpc('get_user_streak_stats', { p_user_id: user.id })
          .single()

        const userContext = {
          profile: context.profile,
          plan: context.plan,
          streak_info: streakInfo
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç—á–µ—Ç
        const aiReport = await generateAIReport(weeklyStats, userContext)

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const reportHeader = `üìä **–¢–≤–æ–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π AI-–æ—Ç—á–µ—Ç**\n` +
          `üìÖ ${new Date(Date.now() - 7*24*60*60*1000).toLocaleDateString('ru-RU')} - ${new Date().toLocaleDateString('ru-RU')}\n\n`

        const reportFooter = `\n\n---\n` +
          `üí° –û—Ç—á–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n` +
          `–ü—Ä–æ–¥–æ–ª–∂–∞–π –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!`

        const fullReport = reportHeader + aiReport + reportFooter

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await sendLongMessage(
          user.telegram_id,
          fullReport,
          {
            inline_keyboard: [
              [{ text: "üìä –î–Ω–µ–≤–Ω–∏–∫", callback_data: "diary" }],
              [{ text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data: "profile" }],
              [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        )

        sentCount++
        console.log(`‚úÖ Sent weekly report to user ${user.id}`)

        // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
        await new Promise(resolve => setTimeout(resolve, 500))

      } catch (userError) {
        console.error(`Error processing user ${user.id}:`, userError)
        skippedCount++
      }
    }

    return new Response(
      JSON.stringify({
        success: true,
        checked_users: activeUsers.length,
        sent_reports: sentCount,
        skipped: skippedCount
      }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 200
      }
    )

  } catch (error) {
    console.error('Weekly AI report error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})
