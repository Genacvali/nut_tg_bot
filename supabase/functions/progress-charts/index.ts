// Progress Charts - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'

const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ Telegram
 */
async function sendPhoto(chatId: number, photoUrl: string, caption?: string, replyMarkup?: any) {
  const payload: any = {
    chat_id: chatId,
    photo: photoUrl,
    parse_mode: 'Markdown'
  }

  if (caption) {
    payload.caption = caption
  }

  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }

  try {
    const response = await fetch(`${TELEGRAM_API}/sendPhoto`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })

    const result = await response.json()

    if (!response.ok) {
      console.error('Telegram API error:', result)
    }

    return result
  } catch (error) {
    console.error('Error sending photo:', error)
    throw error
  }
}

async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const payload: any = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  }

  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }

  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })

    return await response.json()
  } catch (error) {
    console.error('Error sending message:', error)
    throw error
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–ª–æ—Ä–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
 */
async function getCaloriesChartData(userId: number, days: number = 30) {
  const today = new Date()
  const startDate = new Date(today)
  startDate.setDate(startDate.getDate() - days)

  const startDateStr = startDate.toISOString().split('T')[0]
  const endDateStr = today.toISOString().split('T')[0]

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
  const { data: logs } = await supabase
    .from('food_logs')
    .select('calories, logged_at')
    .eq('user_id', userId)
    .gte('logged_at', `${startDateStr}T00:00:00`)
    .lte('logged_at', `${endDateStr}T23:59:59`)
    .order('logged_at', { ascending: true })

  // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: plan } = await supabase
    .from('nutrition_plans')
    .select('calories')
    .eq('user_id', userId)
    .single()

  if (!logs || logs.length === 0) {
    return null
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
  const dayStats: Record<string, number> = {}
  logs.forEach((log: any) => {
    const day = log.logged_at.split('T')[0]
    dayStats[day] = (dayStats[day] || 0) + (log.calories || 0)
  })

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const labels: string[] = []
  const data: number[] = []

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–Ω–∏ (–≤–∫–ª—é—á–∞—è –¥–Ω–∏ –±–µ–∑ –ª–æ–≥–æ–≤)
  for (let i = 0; i < days; i++) {
    const date = new Date(today)
    date.setDate(date.getDate() - (days - 1 - i))
    const dateStr = date.toISOString().split('T')[0]
    const dayMonth = new Date(dateStr).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' })

    labels.push(dayMonth)
    data.push(dayStats[dateStr] || 0)
  }

  return {
    labels,
    data,
    targetCalories: plan?.calories || 2000
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –±–µ–ª–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
 */
async function getProteinChartData(userId: number, days: number = 30) {
  const today = new Date()
  const startDate = new Date(today)
  startDate.setDate(startDate.getDate() - days)

  const startDateStr = startDate.toISOString().split('T')[0]
  const endDateStr = today.toISOString().split('T')[0]

  const { data: logs } = await supabase
    .from('food_logs')
    .select('protein, logged_at')
    .eq('user_id', userId)
    .gte('logged_at', `${startDateStr}T00:00:00`)
    .lte('logged_at', `${endDateStr}T23:59:59`)
    .order('logged_at', { ascending: true })

  const { data: plan } = await supabase
    .from('nutrition_plans')
    .select('protein')
    .eq('user_id', userId)
    .single()

  if (!logs || logs.length === 0) {
    return null
  }

  const dayStats: Record<string, number> = {}
  logs.forEach((log: any) => {
    const day = log.logged_at.split('T')[0]
    dayStats[day] = (dayStats[day] || 0) + (log.protein || 0)
  })

  const labels: string[] = []
  const data: number[] = []

  for (let i = 0; i < days; i++) {
    const date = new Date(today)
    date.setDate(date.getDate() - (days - 1 - i))
    const dateStr = date.toISOString().split('T')[0]
    const dayMonth = new Date(dateStr).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' })

    labels.push(dayMonth)
    data.push(dayStats[dateStr] || 0)
  }

  return {
    labels,
    data,
    targetProtein: plan?.protein || 150
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–µ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏ –≤–µ—Å–∞)
 */
async function getWeightChartData(userId: number, days: number = 90) {
  const today = new Date()
  const startDate = new Date(today)
  startDate.setDate(startDate.getDate() - days)

  const startDateStr = startDate.toISOString().split('T')[0]

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —Ç–∞–±–ª–∏—Ü–∞ weight_logs
  const { data: weights } = await supabase
    .from('weight_logs')
    .select('weight, logged_at')
    .eq('user_id', userId)
    .gte('logged_at', `${startDateStr}T00:00:00`)
    .order('logged_at', { ascending: true })

  if (!weights || weights.length === 0) {
    return null
  }

  const labels = weights.map((w: any) =>
    new Date(w.logged_at).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' })
  )
  const data = weights.map((w: any) => w.weight)

  return { labels, data }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å URL –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ QuickChart API
 */
function generateChartUrl(config: {
  type: 'calories' | 'protein' | 'weight' | 'macros',
  labels: string[],
  data: number[],
  targetValue?: number,
  secondaryData?: number[]
}): string {
  const { type, labels, data, targetValue, secondaryData } = config

  let chartConfig: any = {
    type: 'line',
    data: {
      labels: labels,
      datasets: []
    },
    options: {
      title: {
        display: true,
        text: type === 'calories' ? '–ö–∞–ª–æ—Ä–∏–∏ –ø–æ –¥–Ω—è–º' :
              type === 'protein' ? '–ë–µ–ª–æ–∫ –ø–æ –¥–Ω—è–º' :
              type === 'weight' ? '–í–µ—Å –ø–æ –¥–Ω—è–º' : '–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã',
        fontSize: 18,
        fontColor: '#333'
      },
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero: true,
            fontSize: 12
          }
        }],
        xAxes: [{
          ticks: {
            fontSize: 10,
            maxRotation: 45,
            minRotation: 45
          }
        }]
      },
      legend: {
        display: true,
        position: 'bottom'
      }
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç
  if (type === 'calories') {
    chartConfig.data.datasets.push({
      label: '–ö–∞–ª–æ—Ä–∏–∏',
      data: data,
      borderColor: 'rgb(255, 99, 132)',
      backgroundColor: 'rgba(255, 99, 132, 0.1)',
      fill: true,
      tension: 0.4
    })

    // –¶–µ–ª–µ–≤–∞—è –ª–∏–Ω–∏—è
    if (targetValue) {
      chartConfig.data.datasets.push({
        label: '–¶–µ–ª—å',
        data: new Array(labels.length).fill(targetValue),
        borderColor: 'rgb(54, 162, 235)',
        borderDash: [5, 5],
        fill: false,
        pointRadius: 0
      })
    }
  } else if (type === 'protein') {
    chartConfig.data.datasets.push({
      label: '–ë–µ–ª–æ–∫ (–≥)',
      data: data,
      borderColor: 'rgb(75, 192, 192)',
      backgroundColor: 'rgba(75, 192, 192, 0.1)',
      fill: true,
      tension: 0.4
    })

    if (targetValue) {
      chartConfig.data.datasets.push({
        label: '–¶–µ–ª—å',
        data: new Array(labels.length).fill(targetValue),
        borderColor: 'rgb(54, 162, 235)',
        borderDash: [5, 5],
        fill: false,
        pointRadius: 0
      })
    }
  } else if (type === 'weight') {
    chartConfig.data.datasets.push({
      label: '–í–µ—Å (–∫–≥)',
      data: data,
      borderColor: 'rgb(153, 102, 255)',
      backgroundColor: 'rgba(153, 102, 255, 0.1)',
      fill: true,
      tension: 0.4
    })
  }

  const chartJson = encodeURIComponent(JSON.stringify(chartConfig))
  return `https://quickchart.io/chart?c=${chartJson}&width=800&height=400&backgroundColor=white`
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
 */
serve(async (req) => {
  try {
    const { userId, chatId, chartType, days } = await req.json()

    if (!userId || !chatId) {
      return new Response(
        JSON.stringify({ error: 'Missing userId or chatId' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      )
    }

    console.log(`üìä Generating chart for user ${userId}, type: ${chartType}`)

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: context } = await supabase
      .rpc('get_user_full_context_by_id', { p_user_id: userId })

    if (!context || !context.profile) {
      await sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return new Response(
        JSON.stringify({ success: false, error: 'Profile not found' }),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      )
    }

    const daysCount = days || 30

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
    if (chartType === 'calories' || !chartType) {
      const caloriesData = await getCaloriesChartData(userId, daysCount)

      if (!caloriesData) {
        await sendMessage(
          chatId,
          'üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–ª–æ—Ä–∏–π.\n\n–ù–∞—á–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!',
          {
            inline_keyboard: [
              [{ text: "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É", callback_data: "quick_log_food" }]
            ]
          }
        )
      } else {
        const chartUrl = generateChartUrl({
          type: 'calories',
          labels: caloriesData.labels,
          data: caloriesData.data,
          targetValue: caloriesData.targetCalories
        })

        const avgCalories = Math.round(
          caloriesData.data.reduce((a, b) => a + b, 0) / caloriesData.data.filter(d => d > 0).length
        )

        const caption = `üìä **–ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π** (${daysCount} –¥–Ω–µ–π)\n\n` +
          `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: **${avgCalories}** –∫–∫–∞–ª/–¥–µ–Ω—å\n` +
          `‚Ä¢ –¶–µ–ª—å: **${caloriesData.targetCalories}** –∫–∫–∞–ª/–¥–µ–Ω—å\n` +
          `‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: **${avgCalories > caloriesData.targetCalories ? '+' : ''}${avgCalories - caloriesData.targetCalories}** –∫–∫–∞–ª`

        await sendPhoto(chatId, chartUrl, caption, {
          inline_keyboard: [
            [
              { text: "üìà –ë–µ–ª–æ–∫", callback_data: "chart_protein" },
              { text: "‚öñÔ∏è –í–µ—Å", callback_data: "chart_weight" }
            ],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        })
      }
    } else if (chartType === 'protein') {
      const proteinData = await getProteinChartData(userId, daysCount)

      if (!proteinData) {
        await sendMessage(chatId, 'üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –±–µ–ª–∫–∞.')
      } else {
        const chartUrl = generateChartUrl({
          type: 'protein',
          labels: proteinData.labels,
          data: proteinData.data,
          targetValue: proteinData.targetProtein
        })

        const avgProtein = Math.round(
          proteinData.data.reduce((a, b) => a + b, 0) / proteinData.data.filter(d => d > 0).length
        )

        const caption = `üìä **–ì—Ä–∞—Ñ–∏–∫ –±–µ–ª–∫–∞** (${daysCount} –¥–Ω–µ–π)\n\n` +
          `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: **${avgProtein}–≥**/–¥–µ–Ω—å\n` +
          `‚Ä¢ –¶–µ–ª—å: **${proteinData.targetProtein}–≥**/–¥–µ–Ω—å\n` +
          `‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: **${avgProtein > proteinData.targetProtein ? '+' : ''}${avgProtein - proteinData.targetProtein}–≥**`

        await sendPhoto(chatId, chartUrl, caption, {
          inline_keyboard: [
            [
              { text: "üî• –ö–∞–ª–æ—Ä–∏–∏", callback_data: "chart_calories" },
              { text: "‚öñÔ∏è –í–µ—Å", callback_data: "chart_weight" }
            ],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        })
      }
    } else if (chartType === 'weight') {
      const weightData = await getWeightChartData(userId, 90)

      if (!weightData) {
        await sendMessage(
          chatId,
          'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ.\n\nüí° –ù–∞—á–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–µ—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /weight',
          {
            inline_keyboard: [
              [{ text: "‚öñÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å", callback_data: "log_weight" }]
            ]
          }
        )
      } else {
        const chartUrl = generateChartUrl({
          type: 'weight',
          labels: weightData.labels,
          data: weightData.data
        })

        const startWeight = weightData.data[0]
        const currentWeight = weightData.data[weightData.data.length - 1]
        const change = currentWeight - startWeight

        const caption = `üìä **–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞** (90 –¥–Ω–µ–π)\n\n` +
          `‚Ä¢ –ù–∞—á–∞–ª–æ: **${startWeight}** –∫–≥\n` +
          `‚Ä¢ –°–µ–π—á–∞—Å: **${currentWeight}** –∫–≥\n` +
          `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: **${change > 0 ? '+' : ''}${change.toFixed(1)}** –∫–≥`

        await sendPhoto(chatId, chartUrl, caption, {
          inline_keyboard: [
            [
              { text: "üî• –ö–∞–ª–æ—Ä–∏–∏", callback_data: "chart_calories" },
              { text: "üìà –ë–µ–ª–æ–∫", callback_data: "chart_protein" }
            ],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        })
      }
    }

    return new Response(
      JSON.stringify({ success: true }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 200
      }
    )

  } catch (error) {
    console.error('Progress charts error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})
