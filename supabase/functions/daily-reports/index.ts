import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

serve(async (req) => {
  try {
    const { data: users } = await supabase
      .from('users')
      .select('user_id, calories_goal, protein_goal, carbs_goal, fat_goal')
    
    if (!users || users.length === 0) {
      return new Response('No users found', { status: 200 })
    }
    
    let sent = 0
    for (const user of users) {
      const success = await sendDailyReport(user.user_id, user)
      if (success) sent++
    }
    
    return new Response(`Reports sent to ${sent}/${users.length} users`, { status: 200 })
  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), { status: 500 })
  }
})

async function sendDailyReport(userId: number, goals: any) {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    const { data: meals } = await supabase
      .from('meals')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', `${today}T00:00:00`)
      .lte('created_at', `${today}T23:59:59`)
    
    if (!meals || meals.length === 0) {
      return false
    }
    
    const total = meals.reduce((acc, meal) => ({
      calories: acc.calories + meal.calories,
      protein: acc.protein + meal.protein,
      carbs: acc.carbs + meal.carbs,
      fat: acc.fat + meal.fat
    }), { calories: 0, protein: 0, carbs: 0, fat: 0 })
    
    const advice = generateAdvice(total, goals)
    
    const report = `üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ ${today}:

üî• –ö–∞–ª–æ—Ä–∏–∏: ${total.calories} / ${goals.calories_goal}
ü•© –ë–µ–ª–∫–∏: ${total.protein.toFixed(1)}–≥ / ${goals.protein_goal}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: ${total.carbs.toFixed(1)}–≥ / ${goals.carbs_goal}–≥
ü•ë –ñ–∏—Ä—ã: ${total.fat.toFixed(1)}–≥ / ${goals.fat_goal}–≥

${advice}

üìù –í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: ${meals.length}`
    
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: userId, text: report })
    })
    
    return true
  } catch (error) {
    console.error(`Error sending report to user ${userId}:`, error)
    return false
  }
}

function generateAdvice(total: any, goals: any) {
  const advice = []
  const motivation = []
  
  const calDiff = total.calories - goals.calories_goal
  const calPercent = Math.abs(calDiff) / goals.calories_goal * 100
  
  // –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π —Å –¥—Ä—É–∂–µ—Å–∫–∏–º —Ç–æ–Ω–æ–º
  if (calDiff > 100) {
    advice.push(`‚ö†Ô∏è –ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ –Ω–∞ ${calDiff} –∫–∫–∞–ª`)
    if (calDiff < 300) {
      motivation.push(`–ù–æ —ç—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ–±–æ—Ä! –ó–∞–≤—Ç—Ä–∞ –ª–µ–≥–∫–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º üí™`)
    } else {
      motivation.push(`–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –±—ã–≤–∞–µ—Ç! –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–ª–∞–Ω—É –∑–∞–≤—Ç—Ä–∞ üéØ`)
    }
  } else if (calDiff < -200) {
    advice.push(`‚ö†Ô∏è –ù–µ–¥–æ–µ–¥–∞–Ω–∏–µ –Ω–∞ ${Math.abs(calDiff)} –∫–∫–∞–ª`)
    motivation.push(`–ù–µ –∑–∞–±—ã–≤–∞–π –∫—É—à–∞—Ç—å! –û—Ä–≥–∞–Ω–∏–∑–º—É –Ω—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è ‚ö°`)
  } else {
    motivation.push(`üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —Ç–æ—á–Ω–æ –ø–æ–ø–∞–ª –≤ —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º!`)
  }
  
  // –ê–Ω–∞–ª–∏–∑ –±–µ–ª–∫–∞
  const protDiff = total.protein - goals.protein_goal
  if (protDiff < -20) {
    advice.push(`ü•© –ú–∞–ª–æ –±–µ–ª–∫–∞: ${total.protein.toFixed(1)}–≥ –∏–∑ ${goals.protein_goal}–≥`)
    motivation.push(`–ó–∞–≤—Ç—Ä–∞ –¥–æ–±–∞–≤—å –∫—É—Ä–∏—Ü—É, —Ç–≤–æ—Ä–æ–≥ –∏–ª–∏ —è–π—Ü–∞ ‚Äî –º—ã—à—Ü–∞–º –Ω—É–∂–µ–Ω –±–µ–ª–æ–∫! üí™`)
  } else if (protDiff >= -10 && protDiff <= 10) {
    motivation.push(`ü•© –ë–µ–ª–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ! –ú—ã—à—Ü—ã —Å–∫–∞–∂—É—Ç —Å–ø–∞—Å–∏–±–æ üëä`)
  }
  
  // –ê–Ω–∞–ª–∏–∑ —É–≥–ª–µ–≤–æ–¥–æ–≤
  const carbsDiff = total.carbs - goals.carbs_goal
  if (carbsDiff > 50) {
    advice.push(`üçû –ú–Ω–æ–≥–æ —É–≥–ª–µ–≤–æ–¥–æ–≤: ${total.carbs.toFixed(1)}–≥`)
    motivation.push(`–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –≤–º–µ—Å—Ç–æ –∫–∞—à ü•ó`)
  }
  
  // –ê–Ω–∞–ª–∏–∑ –∂–∏—Ä–æ–≤
  const fatDiff = total.fat - goals.fat_goal
  if (fatDiff > 20) {
    advice.push(`ü•ë –ú–Ω–æ–≥–æ –∂–∏—Ä–æ–≤: ${total.fat.toFixed(1)}–≥`)
  } else if (fatDiff >= -5 && fatDiff <= 5) {
    motivation.push(`ü•ë –ñ–∏—Ä–æ–≤ –≤ –Ω–æ—Ä–º–µ! –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –≥–æ—Ä–º–æ–Ω–æ–≤ üéØ`)
  }
  
  // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–Ω—è
  let summary = ''
  if (calPercent < 5 && Math.abs(protDiff) < 15) {
    summary = `\n\n‚≠ê‚≠ê‚≠ê –ò–î–ï–ê–õ–¨–ù–´–ô –î–ï–ù–¨! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üéä`
  } else if (calPercent < 10) {
    summary = `\n\nüëç –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`
  } else {
    summary = `\n\nüí™ –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ! –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è!`
  }
  
  return (advice.length > 0 ? advice.join('\n') + '\n\n' : '') + 
         (motivation.length > 0 ? motivation.join('\n') : '') + 
         summary
}
