// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (cron job)
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// –¢–∏–ø—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface Reminder {
  id: number;
  user_id: number;
  kind: 'day_report' | 'meal' | 'weigh';
  time_local: string;
  is_enabled: boolean;
  created_at: string;
  updated_at: string;
}

interface User {
  user_id: number;
  tz: string;
  language: string;
  tone: 'coach' | 'mentor' | 'neutral';
}

interface DailyTotals {
  kcal: number;
  p: number;
  f: number;
  c: number;
}

interface NutritionPlan {
  kcal: number;
  protein: number;
  fat: number;
  carbs: number;
}

interface DayReport {
  date: string;
  totals: DailyTotals;
  plan: NutritionPlan;
  meals: Array<{
    name: string;
    calories: number;
    protein: number;
    fat: number;
    carbs: number;
    meal_type?: string;
  }>;
  advice: string;
  user: User;
}

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */
async function getActiveRemindersForNow(supabase: any): Promise<Reminder[]> {
  const now = new Date();
  const currentTime = now.toTimeString().slice(0, 5); // HH:MM
  
  try {
    const { data: reminders, error } = await supabase
      .from('reminders')
      .select('*')
      .eq('is_enabled', true)
      .eq('time_local', currentTime);
    
    if (error) {
      console.error('Error fetching reminders:', error);
      return [];
    }
    
    return reminders || [];
  } catch (error) {
    console.error('Error in getActiveRemindersForNow:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á—ë—Ç–∞
 */
async function getUserDataForReport(userId: number, supabase: any): Promise<{
  user: User;
  plan: NutritionPlan;
  totals: DailyTotals;
  meals: any[];
} | null> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('user_id, tz, language, tone')
      .eq('user_id', userId)
      .single();
    
    if (userError || !user) {
      console.error('User not found:', userError);
      return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
    const { data: plan, error: planError } = await supabase
      .from('plans')
      .select('kcal, p, f, c')
      .eq('user_id', userId)
      .eq('is_active', true)
      .single();
    
    if (planError || !plan) {
      console.error('Plan not found:', planError);
      return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏
    const today = new Date().toISOString().split('T')[0];
    const { data: totals, error: totalsError } = await supabase
      .from('daily_totals')
      .select('kcal, p, f, c')
      .eq('user_id', userId)
      .eq('date', today)
      .single();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ –¥–µ–Ω—å
    const { data: meals, error: mealsError } = await supabase
      .from('meals')
      .select('meal_name, kcal, protein, fat, carbs, meal_type')
      .eq('user_id', userId)
      .gte('ts', `${today}T00:00:00`)
      .lte('ts', `${today}T23:59:59`)
      .order('ts', { ascending: true });
    
    return {
      user,
      plan: {
        kcal: plan.kcal,
        protein: plan.p,
        fat: plan.f,
        carbs: plan.c
      },
      totals: totals || { kcal: 0, p: 0, f: 0, c: 0 },
      meals: meals?.map(meal => ({
        name: meal.meal_name,
        calories: meal.kcal,
        protein: meal.protein,
        fat: meal.fat,
        carbs: meal.carbs,
        meal_type: meal.meal_type
      })) || []
    };
  } catch (error) {
    console.error('Error getting user data for report:', error);
    return null;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
 */
function generatePersonalAdvice(
  totals: DailyTotals, 
  plan: NutritionPlan, 
  tone: 'coach' | 'mentor' | 'neutral'
): string {
  const caloriesDiff = totals.kcal - plan.kcal;
  const proteinDiff = totals.p - plan.protein;
  const fatDiff = totals.f - plan.fat;
  const carbsDiff = totals.c - plan.carbs;
  
  const advice: string[] = [];
  
  // –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π
  if (caloriesDiff > 200) {
    advice.push('–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º. –ó–∞–≤—Ç—Ä–∞ —É–º–µ–Ω—å—à–∏—Ç–µ –ø–æ—Ä—Ü–∏–∏.');
  } else if (caloriesDiff < -300) {
    advice.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å.');
  } else if (Math.abs(caloriesDiff) < 100) {
    advice.push('–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π!');
  }
  
  // –ê–Ω–∞–ª–∏–∑ –±–µ–ª–∫–æ–≤
  if (proteinDiff < -20) {
    advice.push('–î–æ–±–∞–≤—å—Ç–µ –±–µ–ª–æ–∫: –∫—É—Ä–∏—Ü–∞, —Ä—ã–±–∞, —Ç–≤–æ—Ä–æ–≥, —è–π—Ü–∞.');
  } else if (proteinDiff > 30) {
    advice.push('–ú–Ω–æ–≥–æ –±–µ–ª–∫–∞ - –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è –º—ã—à—Ü!');
  }
  
  // –ê–Ω–∞–ª–∏–∑ –∂–∏—Ä–æ–≤
  if (fatDiff < -15) {
    advice.push('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∂–∏—Ä–æ–≤. –û—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –º–∞—Å–ª–æ.');
  }
  
  // –ê–Ω–∞–ª–∏–∑ —É–≥–ª–µ–≤–æ–¥–æ–≤
  if (carbsDiff < -50) {
    advice.push('–ú–∞–ª–æ —É–≥–ª–µ–≤–æ–¥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫—Ä—É–ø—ã, —Ñ—Ä—É–∫—Ç—ã.');
  } else if (carbsDiff > 100) {
    advice.push('–ú–Ω–æ–≥–æ —É–≥–ª–µ–≤–æ–¥–æ–≤. –ë–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ –±–µ–ª–∫–∞.');
  }
  
  // –¢–æ–Ω —Å–æ–≤–µ—Ç–∞
  if (tone === 'coach') {
    return advice.length > 0 ? advice.join(' ') : '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™';
  } else if (tone === 'mentor') {
    return advice.length > 0 ? advice.join(' ') : '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! üéØ';
  } else {
    return advice.length > 0 ? advice.join(' ') : '–ë–∞–ª–∞–Ω—Å —Å–æ–±–ª—é–¥–µ–Ω. üìä';
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
function formatDayReport(report: DayReport, user: User): string {
  const { totals, plan, meals, advice } = report;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  const caloriesProgress = Math.round((totals.kcal / plan.kcal) * 100);
  const proteinProgress = Math.round((totals.p / plan.protein) * 100);
  const fatProgress = Math.round((totals.f / plan.fat) * 100);
  const carbsProgress = Math.round((totals.c / plan.carbs) * 100);
  
  // –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const getProgressEmoji = (progress: number) => {
    if (progress >= 100) return '‚úÖ';
    if (progress >= 80) return 'üëç';
    if (progress >= 60) return 'üìä';
    return '‚ö†Ô∏è';
  };
  
  // –¢–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
  const tonePrefix = {
    coach: 'üí™',
    mentor: 'üéØ',
    neutral: 'üìä'
  }[user.tone];
  
  let message = `${tonePrefix} –ò–¢–û–ì –î–ù–Ø ${report.date}

üìä –ü–†–û–ì–†–ï–°–°:
${getProgressEmoji(caloriesProgress)} –ö–∞–ª–æ—Ä–∏–∏: ${totals.kcal} / ${plan.kcal} (${caloriesProgress}%)
${getProgressEmoji(proteinProgress)} –ë–µ–ª–∫–∏: ${totals.p}–≥ / ${plan.protein}–≥ (${proteinProgress}%)
${getProgressEmoji(fatProgress)} –ñ–∏—Ä—ã: ${totals.f}–≥ / ${plan.fat}–≥ (${fatProgress}%)
${getProgressEmoji(carbsProgress)} –£–≥–ª–µ–≤–æ–¥—ã: ${totals.c}–≥ / ${plan.carbs}–≥ (${carbsProgress}%)

üçΩÔ∏è –ü–†–ò–Å–ú–´ –ü–ò–©–ò (${meals.length}):`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—ë–º—ã –ø–∏—â–∏
  meals.forEach((meal, index) => {
    const mealEmoji = getMealEmoji(meal.meal_type);
    message += `\n${mealEmoji} ${meal.name}: ${meal.calories} –∫–∫–∞–ª`;
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç
  message += `\n\nüí° –°–û–í–ï–¢:\n${advice}`;
  
  return message;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏
 */
function getMealEmoji(mealType?: string): string {
  switch (mealType) {
    case 'breakfast': return 'üåÖ';
    case 'lunch': return '‚òÄÔ∏è';
    case 'dinner': return 'üåÜ';
    case 'snack': return 'üçé';
    default: return 'üçΩÔ∏è';
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendDayReport(
  userId: number, 
  report: DayReport, 
  botToken: string
): Promise<boolean> {
  try {
    const message = formatDayReport(report, report.user);
    
    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: userId,
        text: message,
        parse_mode: 'HTML'
      })
    });
    
    return true;
  } catch (error) {
    console.error('Error sending day report:', error);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏
 */
async function sendMealReminder(
  userId: number, 
  botToken: string, 
  userTone: 'coach' | 'mentor' | 'neutral'
): Promise<boolean> {
  try {
    const messages = {
      coach: 'üí™ –í—Ä–µ–º—è –ø–æ–µ—Å—Ç—å! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –±–µ–ª–æ–∫!',
      mentor: 'üçΩÔ∏è –ü–æ—Ä–∞ –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è. –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å—ä–µ—Å—Ç—å?',
      neutral: 'üçΩÔ∏è –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏.'
    };
    
    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: userId,
        text: messages[userTone]
      })
    });
    
    return true;
  } catch (error) {
    console.error('Error sending meal reminder:', error);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏
 */
async function sendWeighReminder(
  userId: number, 
  botToken: string, 
  userTone: 'coach' | 'mentor' | 'neutral'
): Promise<boolean> {
  try {
    const messages = {
      coach: '‚öñÔ∏è –í—Ä–µ–º—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è! –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–µ—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!',
      mentor: 'üìä –ü–æ—Ä–∞ –≤–∑–≤–µ—Å–∏—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–¥–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É.',
      neutral: '‚öñÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏.'
    };
    
    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: userId,
        text: messages[userTone]
      })
    });
    
    return true;
  } catch (error) {
    console.error('Error sending weigh reminder:', error);
    return false;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 */
async function processReminders(
  supabase: any, 
  botToken: string
): Promise<{ processed: number; errors: number }> {
  let processed = 0;
  let errors = 0;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const reminders = await getActiveRemindersForNow(supabase);
    
    for (const reminder of reminders) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = await getUserDataForReport(reminder.user_id, supabase);
        
        if (!userData) {
          errors++;
          continue;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        let success = false;
        
        switch (reminder.kind) {
          case 'day_report':
            const report = {
              date: new Date().toISOString().split('T')[0],
              totals: userData.totals,
              plan: userData.plan,
              meals: userData.meals,
              advice: generatePersonalAdvice(userData.totals, userData.plan, userData.user.tone),
              user: userData.user
            };
            success = await sendDayReport(reminder.user_id, report, botToken);
            break;
            
          case 'meal':
            success = await sendMealReminder(
              reminder.user_id, 
              botToken, 
              userData.user.tone
            );
            break;
            
          case 'weigh':
            success = await sendWeighReminder(
              reminder.user_id, 
              botToken, 
              userData.user.tone
            );
            break;
        }
        
        if (success) {
          processed++;
        } else {
          errors++;
        }
        
      } catch (error) {
        console.error(`Error processing reminder ${reminder.id}:`, error);
        errors++;
      }
    }
    
  } catch (error) {
    console.error('Error in processReminders:', error);
    errors++;
  }
  
  return { processed, errors };
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
 */
async function logEvent(
  event: string,
  userId: number | undefined,
  meta: Record<string, any>,
  supabase: any
): Promise<void> {
  try {
    await supabase
      .from('events_log')
      .insert({
        event,
        user_id: userId,
        meta_json: meta,
        created_at: new Date().toISOString()
      });
    
    console.log(`Event logged: ${event} for user ${userId}`, meta);
  } catch (error) {
    console.error('Error logging event:', error);
  }
}

serve(async (req) => {
  try {
    console.log('Starting reminder processing...')
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const result = await processReminders(supabase, TELEGRAM_BOT_TOKEN)
    
    console.log(`Processed ${result.processed} reminders, ${result.errors} errors`)
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await logEvent('reminder_cron', undefined, {
      processed: result.processed,
      errors: result.errors,
      timestamp: new Date().toISOString()
    }, supabase)
    
    return new Response(JSON.stringify({ 
      success: true, 
      processed: result.processed, 
      errors: result.errors 
    }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200
    })
    
  } catch (error) {
    console.error('Error in reminder cron:', error)
    
    await logEvent('error', undefined, {
      error_type: 'reminder_cron',
      error_message: error.message,
      context: { stack: error.stack }
    }, supabase)
    
    return new Response(JSON.stringify({ 
      success: false, 
      error: error.message 
    }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
})
