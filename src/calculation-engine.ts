// –†–∞—Å—á–µ—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞
// –†–µ–∞–ª–∏–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—ã BMR, TDEE, –º–∞–∫—Ä–æ—Å—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
const ACTIVITY_MULTIPLIERS = {
  sedentary: 1.2,
  light: 1.375,
  moderate: 1.55,
  high: 1.725,
  very_high: 1.9
} as const;

const GOAL_ADJUSTMENTS = {
  fat_loss: -0.15,    // -15% –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
  maintain: 0,        // 0% –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è
  gain: 0.10          // +10% –¥–ª—è –Ω–∞–±–æ—Ä–∞
} as const;

const MACRO_DEFAULTS = {
  protein_per_kg: 1.6,  // 1.6–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
  protein_min: 1.4,     // –º–∏–Ω–∏–º—É–º 1.4–≥/–∫–≥
  protein_max: 2.2,     // –º–∞–∫—Å–∏–º—É–º 2.2–≥/–∫–≥
  fat_per_kg: 0.8,      // 0.8–≥ –∂–∏—Ä–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
  fat_min: 0.6,         // –º–∏–Ω–∏–º—É–º 0.6–≥/–∫–≥
  fat_max: 1.2          // –º–∞–∫—Å–∏–º—É–º 1.2–≥/–∫–≥
} as const;

const CALORIE_ROUNDING = 5;  // ¬±5 –∫–∫–∞–ª
const GRAM_ROUNDING = 1;    // ¬±1 –≥

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface UserParams {
  age: number;
  sex: 'male' | 'female';
  height_cm: number;
  weight_kg: number;
  activity: keyof typeof ACTIVITY_MULTIPLIERS;
  goal: keyof typeof GOAL_ADJUSTMENTS;
}

interface NutritionPlan {
  kcal: number;
  protein: number;
  fat: number;
  carbs: number;
  bmr: number;
  tdee: number;
}

interface MacroAdjustment {
  protein?: { value: number; type: 'grams' | 'percent' };
  fat?: { value: number; type: 'grams' | 'percent' };
  carbs?: { value: number; type: 'grams' | 'percent' };
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞

/**
 * –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
 */
export function calculateBMR(params: UserParams): number {
  const { age, sex, height_cm, weight_kg } = params;
  
  // –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
  let bmr = 10 * weight_kg + 6.25 * height_cm - 5 * age;
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—É
  if (sex === 'male') {
    bmr += 5;
  } else {
    bmr -= 161;
  }
  
  return Math.round(bmr);
}

/**
 * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ —ç–Ω–µ—Ä–≥–∏–∏ (TDEE)
 */
export function calculateTDEE(bmr: number, activity: keyof typeof ACTIVITY_MULTIPLIERS): number {
  const multiplier = ACTIVITY_MULTIPLIERS[activity];
  return Math.round(bmr * multiplier);
}

/**
 * –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–∏
 */
export function calculateTargetCalories(tdee: number, goal: keyof typeof GOAL_ADJUSTMENTS): number {
  const adjustment = GOAL_ADJUSTMENTS[goal];
  const targetCalories = tdee * (1 + adjustment);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã: -25% –¥–æ +15%
  const minCalories = tdee * 0.75;  // -25%
  const maxCalories = tdee * 1.15;  // +15%
  
  return Math.max(minCalories, Math.min(maxCalories, targetCalories));
}

/**
 * –†–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export function calculateDefaultMacros(targetCalories: number, weight_kg: number): Omit<NutritionPlan, 'kcal' | 'bmr' | 'tdee'> {
  // –ë–µ–ª–∫–∏: 1.6–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞ (–º–∏–Ω–∏–º—É–º 1.4, –º–∞–∫—Å–∏–º—É–º 2.2)
  const proteinPerKg = Math.max(MACRO_DEFAULTS.protein_min, 
                               Math.min(MACRO_DEFAULTS.protein_max, MACRO_DEFAULTS.protein_per_kg));
  const protein = proteinPerKg * weight_kg;
  
  // –ñ–∏—Ä—ã: 0.8–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞ (–º–∏–Ω–∏–º—É–º 0.6, –º–∞–∫—Å–∏–º—É–º 1.2)
  const fatPerKg = Math.max(MACRO_DEFAULTS.fat_min, 
                            Math.min(MACRO_DEFAULTS.fat_max, MACRO_DEFAULTS.fat_per_kg));
  const fat = fatPerKg * weight_kg;
  
  // –£–≥–ª–µ–≤–æ–¥—ã: –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π
  const proteinCalories = protein * 4;
  const fatCalories = fat * 9;
  const remainingCalories = targetCalories - proteinCalories - fatCalories;
  const carbs = Math.max(0, remainingCalories / 4);
  
  return {
    protein: Math.round(protein * 10) / 10,
    fat: Math.round(fat * 10) / 10,
    carbs: Math.round(carbs * 10) / 10
  };
}

/**
 * –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
 */
export function calculateNutritionPlan(params: UserParams): NutritionPlan {
  const bmr = calculateBMR(params);
  const tdee = calculateTDEE(bmr, params.activity);
  const targetCalories = calculateTargetCalories(tdee, params.goal);
  const macros = calculateDefaultMacros(targetCalories, params.weight_kg);
  
  return {
    kcal: Math.round(targetCalories),
    bmr,
    tdee,
    ...macros
  };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞–∫—Ä–æ—Å–æ–≤
 */
export function validateAndAdjustMacros(
  plan: NutritionPlan, 
  adjustments: MacroAdjustment,
  weight_kg: number
): { plan: NutritionPlan; warnings: string[] } {
  const warnings: string[] = [];
  let newPlan = { ...plan };
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  if (adjustments.protein) {
    const { value, type } = adjustments.protein;
    if (type === 'grams') {
      newPlan.protein = value;
    } else if (type === 'percent') {
      newPlan.protein = plan.protein * (1 + value / 100);
    }
  }
  
  if (adjustments.fat) {
    const { value, type } = adjustments.fat;
    if (type === 'grams') {
      newPlan.fat = value;
    } else if (type === 'percent') {
      newPlan.fat = plan.fat * (1 + value / 100);
    }
  }
  
  if (adjustments.carbs) {
    const { value, type } = adjustments.carbs;
    if (type === 'grams') {
      newPlan.carbs = value;
    } else if (type === 'percent') {
      newPlan.carbs = plan.carbs * (1 + value / 100);
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º—É–º–æ–≤
  const minProtein = weight_kg * MACRO_DEFAULTS.protein_min;
  const minFat = weight_kg * MACRO_DEFAULTS.fat_min;
  
  if (newPlan.protein < minProtein) {
    warnings.push(`–ë–µ–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π (${newPlan.protein.toFixed(1)}–≥). –ú–∏–Ω–∏–º—É–º ${minProtein.toFixed(1)}–≥/–∫–≥ - –∏—Å–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
    newPlan.protein = minProtein;
  }
  
  if (newPlan.fat < minFat) {
    warnings.push(`–ñ–∏—Ä—ã —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–µ (${newPlan.fat.toFixed(1)}–≥). –ú–∏–Ω–∏–º—É–º ${minFat.toFixed(1)}–≥/–∫–≥ - –∏—Å–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
    newPlan.fat = minFat;
  }
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
  const proteinCalories = newPlan.protein * 4;
  const fatCalories = newPlan.fat * 9;
  const remainingCalories = newPlan.kcal - proteinCalories - fatCalories;
  newPlan.carbs = Math.max(0, remainingCalories / 4);
  
  // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
  newPlan.protein = Math.round(newPlan.protein * 10) / 10;
  newPlan.fat = Math.round(newPlan.fat * 10) / 10;
  newPlan.carbs = Math.round(newPlan.carbs * 10) / 10;
  
  return { plan: newPlan, warnings };
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –º–∞–∫—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export function parseMacroAdjustments(text: string): MacroAdjustment {
  const adjustments: MacroAdjustment = {};
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≥—Ä–∞–º–º–æ–≤
  const proteinGramsMatch = text.match(/–±–µ–ª–∫[–∞-—è]*\s*(\d+)\s*–≥/i);
  const fatGramsMatch = text.match(/–∂–∏—Ä[–∞-—è]*\s*(\d+)\s*–≥/i);
  const carbsGramsMatch = text.match(/—É–≥–ª–µ–≤–æ–¥[–∞-—è]*\s*(\d+)\s*–≥/i);
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
  const proteinPercentMatch = text.match(/–±–µ–ª–∫[–∞-—è]*\s*([+-]?\d+)\s*%/i);
  const fatPercentMatch = text.match(/–∂–∏—Ä[–∞-—è]*\s*([+-]?\d+)\s*%/i);
  const carbsPercentMatch = text.match(/—É–≥–ª–µ–≤–æ–¥[–∞-—è]*\s*([+-]?\d+)\s*%/i);
  
  if (proteinGramsMatch) {
    adjustments.protein = { value: parseInt(proteinGramsMatch[1]), type: 'grams' };
  } else if (proteinPercentMatch) {
    adjustments.protein = { value: parseInt(proteinPercentMatch[1]), type: 'percent' };
  }
  
  if (fatGramsMatch) {
    adjustments.fat = { value: parseInt(fatGramsMatch[1]), type: 'grams' };
  } else if (fatPercentMatch) {
    adjustments.fat = { value: parseInt(fatPercentMatch[1]), type: 'percent' };
  }
  
  if (carbsGramsMatch) {
    adjustments.carbs = { value: parseInt(carbsGramsMatch[1]), type: 'grams' };
  } else if (carbsPercentMatch) {
    adjustments.carbs = { value: parseInt(carbsPercentMatch[1]), type: 'percent' };
  }
  
  return adjustments;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
 */
export function createRulesJson(adjustments: MacroAdjustment): object {
  const rules: any = {};
  
  if (adjustments.protein) {
    rules.protein = {
      value: adjustments.protein.value,
      type: adjustments.protein.type
    };
  }
  
  if (adjustments.fat) {
    rules.fat = {
      value: adjustments.fat.value,
      type: adjustments.fat.type
    };
  }
  
  if (adjustments.carbs) {
    rules.carbs = {
      value: adjustments.carbs.value,
      type: adjustments.carbs.type
    };
  }
  
  return rules;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatPlanCard(plan: NutritionPlan, userParams: UserParams): string {
  const goalText = {
    fat_loss: '–ø–æ—Ö—É–¥–µ–Ω–∏–µ',
    maintain: '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ',
    gain: '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã'
  }[userParams.goal];
  
  const activityText = {
    sedentary: '–º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π',
    light: '–ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    moderate: '—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    high: '–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    very_high: '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
  }[userParams.activity];
  
  return `üìä –í–ê–® –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø

üë§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ ${userParams.age} –ª–µ—Ç, ${userParams.sex === 'male' ? '–º—É–∂—á–∏–Ω–∞' : '–∂–µ–Ω—â–∏–Ω–∞'}
‚Ä¢ ${userParams.height_cm}—Å–º, ${userParams.weight_kg}–∫–≥
‚Ä¢ –¶–µ–ª—å: ${goalText}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}

üî• –†–∞—Å—á–µ—Ç—ã:
‚Ä¢ BMR: ${plan.bmr} –∫–∫–∞–ª
‚Ä¢ TDEE: ${plan.tdee} –∫–∫–∞–ª
‚Ä¢ –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: ${plan.kcal} –∫–∫–∞–ª

üìä –ú–∞–∫—Ä–æ—Å—ã:
‚Ä¢ –ë–µ–ª–∫–∏: ${plan.protein}–≥
‚Ä¢ –ñ–∏—Ä—ã: ${plan.fat}–≥  
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${plan.carbs}–≥

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü–µ–π—Ç–µ ${Math.round(plan.kcal * 0.4)}–º–ª –≤–æ–¥—ã –≤ –¥–µ–Ω—å
‚Ä¢ –ï—à—å—Ç–µ –∫–∞–∂–¥—ã–µ 3-4 —á–∞—Å–∞
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º —Å–Ω–∞`;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
export default {
  calculateBMR,
  calculateTDEE,
  calculateTargetCalories,
  calculateDefaultMacros,
  calculateNutritionPlan,
  validateAndAdjustMacros,
  parseMacroAdjustments,
  createRulesJson,
  formatPlanCard
};
