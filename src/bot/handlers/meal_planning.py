"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""
from telegram import Update
from telegram.ext import ContextTypes
from src.bot.keyboards.inline import InlineKeyboards
from src.bot.states import BotState
from datetime import date
import logging

logger = logging.getLogger(__name__)

async def meal_suggestions_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é"""
    query = update.callback_query
    await query.answer()
    
    message = """üë®‚Äçüç≥ –ß–¢–û –ü–†–ò–ì–û–¢–û–í–ò–¢–¨?

–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ:
‚Ä¢ –ß—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ?
‚Ä¢ –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å—ä–µ—Å—Ç—å?
‚Ä¢ –ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?

–Ø –ø–æ–¥–±–µ—Ä—É —Ä–µ—Ü–µ–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–ø–∏—à–µ—Ç—Å—è –≤ —Ç–≤–æ—é –Ω–æ—Ä–º—É –ö–ë–ñ–£!

üìù –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ üé§ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    
    context.user_data['state'] = BotState.MEAL_PLAN_REQUEST
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboards.back_to_menu()
    )

async def handle_meal_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è"""
    user_request = update.message.text
    
    await update.message.reply_text("üë®‚Äçüç≥ –ü–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è —Ç–µ–±—è...")
    
    try:
        db = context.bot_data['db']
        user_id = context.user_data['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
        nutrition_plan = await db.get_active_nutrition_plan(user_id)
        
        if not nutrition_plan:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–∞—á–∞–ª–∞!",
                reply_markup=InlineKeyboards.back_to_menu()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_summary = await db.get_food_logs_summary(user_id, date.today())
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —É AI
        openai_service = context.bot_data['openai']
        
        meal_suggestion = await openai_service.suggest_meal(
            user_request=user_request,
            nutrition_plan={
                'calories': nutrition_plan['calories'],
                'protein': nutrition_plan['protein'],
                'fats': nutrition_plan['fats'],
                'carbs': nutrition_plan['carbs']
            },
            daily_consumed=today_summary
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        fits_emoji = "‚úÖ" if meal_suggestion.get('fits_plan', True) else "‚ö†Ô∏è"
        
        message = f"""üë®‚Äçüç≥ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø

{fits_emoji} **{meal_suggestion['meal_name']}**

üìù {meal_suggestion['description']}

üõí –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
{meal_suggestion['ingredients']}

üë©‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
{meal_suggestion['cooking_instructions']}

üìä –ö–ë–ñ–£ –ø–æ—Ä—Ü–∏–∏:
üî• {meal_suggestion['calories']} –∫–∫–∞–ª
ü•© {meal_suggestion['protein']} –≥ –±–µ–ª–∫–∞
ü•ë {meal_suggestion['fats']} –≥ –∂–∏—Ä–æ–≤
üçû {meal_suggestion['carbs']} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

üí° {meal_suggestion['recommendation_note']}
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –ë–î
        meal_plan_data = {
            'user_id': user_id,
            'meal_description': meal_suggestion['meal_name'],
            'ingredients': meal_suggestion['ingredients'],
            'calories': meal_suggestion['calories'],
            'protein': meal_suggestion['protein'],
            'fats': meal_suggestion['fats'],
            'carbs': meal_suggestion['carbs'],
            'created_by_ai': True
        }
        
        await db.create_meal_plan(meal_plan_data)
        
        context.user_data['state'] = BotState.IDLE
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboards.back_to_menu(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboards.back_to_menu()
        )

async def nutrition_plan_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data['db']
    user_id = context.user_data['user_id']
    
    nutrition_plan = await db.get_active_nutrition_plan(user_id)
    
    if not nutrition_plan:
        await query.edit_message_text(
            "‚ö†Ô∏è –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–∞—á–∞–ª–∞!",
            reply_markup=InlineKeyboards.back_to_menu()
        )
        return
    
    message = f"""üéØ –¢–í–û–ô –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø

üìä –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞:
üî• –ö–∞–ª–æ—Ä–∏–∏: {nutrition_plan['calories']} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {nutrition_plan['protein']} –≥
ü•ë –ñ–∏—Ä—ã: {nutrition_plan['fats']} –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {nutrition_plan['carbs']} –≥

üìà –ú–µ—Ç–∞–±–æ–ª–∏–∑–º:
‚Ä¢ –ë–∞–∑–æ–≤—ã–π (BMR): {nutrition_plan['bmr']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ (TDEE): {nutrition_plan['tdee']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å

{nutrition_plan.get('methodology_explanation', '')}
"""
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboards.nutrition_plan_actions()
    )

async def adjust_plan_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –ø–ª–∞–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    message = """‚úèÔ∏è –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –ü–õ–ê–ù–ê

–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–•–æ—á—É —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 200"
‚Ä¢ "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –±–µ–ª–∫–∞"
‚Ä¢ "–°–Ω–∏–∑–∏—Ç—å —É–≥–ª–µ–≤–æ–¥—ã"
‚Ä¢ "–•–æ—á—É –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç"

–Ø –ø–æ–º–æ–≥—É —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! üí™"""
    
    context.user_data['state'] = BotState.ADJUST_NUTRITION
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboards.back_to_menu()
    )

async def handle_adjust_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –ø–ª–∞–Ω–∞"""
    user_request = update.message.text
    
    await update.message.reply_text("‚è≥ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π...")
    
    try:
        db = context.bot_data['db']
        user_id = context.user_data['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –∏ –ø—Ä–æ—Ñ–∏–ª—å
        nutrition_plan = await db.get_active_nutrition_plan(user_id)
        profile = await db.get_user_profile(user_id)
        
        if not nutrition_plan or not profile:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–ª–∞–Ω –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å",
                reply_markup=InlineKeyboards.back_to_menu()
            )
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —É AI
        openai_service = context.bot_data['openai']
        
        adjusted_plan = await openai_service.adjust_nutrition_plan(
            current_plan={
                'calories': nutrition_plan['calories'],
                'protein': nutrition_plan['protein'],
                'fats': nutrition_plan['fats'],
                'carbs': nutrition_plan['carbs']
            },
            user_request=user_request,
            user_data={
                'age': profile['age'],
                'gender': profile['gender'],
                'height': profile['height'],
                'weight': profile['current_weight'],
                'goal': profile['goal']
            }
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –≤ –ë–î
        updated_plan_data = {
            'calories': int(adjusted_plan['target_calories']),
            'protein': adjusted_plan['protein_grams'],
            'fats': adjusted_plan['fats_grams'],
            'carbs': adjusted_plan['carbs_grams'],
            'methodology_explanation': f"{nutrition_plan.get('methodology_explanation', '')}\n\nüîÑ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê:\n{adjusted_plan['adjustment_explanation']}"
        }
        
        await db.update_nutrition_plan(nutrition_plan['id'], updated_plan_data)
        
        message = f"""‚úÖ –ü–õ–ê–ù –°–ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù!

üéØ –ù–û–í–´–ô –ü–õ–ê–ù:
üî• –ö–∞–ª–æ—Ä–∏–∏: {adjusted_plan['target_calories']} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {adjusted_plan['protein_grams']} –≥
ü•ë –ñ–∏—Ä—ã: {adjusted_plan['fats_grams']} –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {adjusted_plan['carbs_grams']} –≥

üí° {adjusted_plan['adjustment_explanation']}
"""
        
        context.user_data['state'] = BotState.IDLE
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É.",
            reply_markup=InlineKeyboards.back_to_menu()
        )

async def recalculate_plan_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω —Å –Ω—É–ª—è"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üîÑ –•–æ—á–µ—à—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω —Å –Ω—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è?",
        reply_markup=InlineKeyboards.yes_no("recalculate")
    )

async def ai_chat_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å AI"""
    query = update.callback_query
    await query.answer()
    
    message = """üí¨ AI –ê–°–°–ò–°–¢–ï–ù–¢

–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏, –∑–¥–æ—Ä–æ–≤—å–µ –∏–ª–∏ —Ñ–∏—Ç–Ω–µ—Å–µ!

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ö–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º?"
‚Ä¢ "–ü–æ—á–µ–º—É —è –Ω–µ —Ö—É–¥–µ—é?"
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–æ–≥–∞—Ç—ã –±–µ–ª–∫–æ–º?"
‚Ä¢ "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏?"

–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ü§ñ"""
    
    context.user_data['state'] = BotState.AI_CHAT
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboards.back_to_menu()
    )

async def handle_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–Ω–∏—è —Å AI"""
    user_message = update.message.text
    
    await update.message.reply_text("ü§ñ –î—É–º–∞—é...")
    
    try:
        openai_service = context.bot_data['openai']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        chat_context = context.user_data.get('chat_context', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_context.append({"role": "user", "content": user_message})
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await openai_service.general_chat(user_message, chat_context[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        chat_context.append({"role": "assistant", "content": response})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
        context.user_data['chat_context'] = chat_context[-20:]
        
        await update.message.reply_text(
            response,
            reply_markup=InlineKeyboards.back_to_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI —á–∞—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å AI. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboards.back_to_menu()
        )

