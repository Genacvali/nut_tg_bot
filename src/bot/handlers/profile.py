"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from telegram import Update
from telegram.ext import ContextTypes
from src.bot.keyboards.inline import InlineKeyboards
from src.bot.states import BotState
from src.utils.validators import DataValidator
from src.utils.calculators import NutritionCalculator
import logging

logger = logging.getLogger(__name__)

async def profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data['db']
    user_id = context.user_data.get('user_id')
    
    profile = await db.get_user_profile(user_id)
    
    if not profile:
        # –ü—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        message = """üìä –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –±–æ–ª—å—à–µ.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö):"""
        
        context.user_data['state'] = BotState.PROFILE_AGE
        await query.edit_message_text(text=message)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        gender_text = "–ú—É–∂—Å–∫–æ–π" if profile['gender'] == 'male' else "–ñ–µ–Ω—Å–∫–∏–π"
        
        activity_names = {
            "sedentary": "–°–∏–¥—è—á–∏–π",
            "light": "–õ–µ–≥–∫–∞—è",
            "moderate": "–£–º–µ—Ä–µ–Ω–Ω–∞—è",
            "active": "–í—ã—Å–æ–∫–∞—è",
            "very_active": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
        }
        
        goal_names = {
            "lose": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
            "maintain": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ",
            "gain": "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"
        }
        
        message = f"""üìä –¢–í–û–ô –ü–†–û–§–ò–õ–¨

üë§ –ü–æ–ª: {gender_text}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç
üìè –†–æ—Å—Ç: {profile['height']} —Å–º
‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: {profile['current_weight']} –∫–≥
üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {profile['target_weight']} –∫–≥
üí™ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_names.get(profile['activity_level'], profile['activity_level'])}
üéØ –¶–µ–ª—å: {goal_names.get(profile['goal'], profile['goal'])}
"""
        
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboards.profile_actions()
        )

async def edit_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    await query.answer()
    
    message = """‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø

–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö):"""
    
    context.user_data['state'] = BotState.PROFILE_AGE
    context.user_data['editing_profile'] = True
    
    await query.edit_message_text(text=message)

async def update_weight_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å"""
    query = update.callback_query
    await query.answer()
    
    message = """‚öñÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ï–°–ê

–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):"""
    
    context.user_data['state'] = BotState.PROFILE_CURRENT_WEIGHT
    context.user_data['quick_weight_update'] = True
    
    await query.edit_message_text(text=message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async def handle_profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    valid, age, error = DataValidator.validate_age(update.message.text)
    
    if not valid:
        await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    context.user_data['profile_data'] = {'age': age}
    context.user_data['state'] = BotState.PROFILE_GENDER
    
    await update.message.reply_text(
        "üë§ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=InlineKeyboards.gender_selection()
    )

async def handle_gender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    gender = query.data.split('_')[1]  # gender_male -> male
    context.user_data['profile_data']['gender'] = gender
    context.user_data['state'] = BotState.PROFILE_HEIGHT
    
    await query.edit_message_text("üìè –£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")

async def handle_profile_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    valid, height, error = DataValidator.validate_height(update.message.text)
    
    if not valid:
        await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    context.user_data['profile_data']['height'] = height
    context.user_data['state'] = BotState.PROFILE_CURRENT_WEIGHT
    
    await update.message.reply_text("‚öñÔ∏è –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")

async def handle_profile_current_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞"""
    valid, weight, error = DataValidator.validate_weight(update.message.text)
    
    if not valid:
        await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –±—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    if context.user_data.get('quick_weight_update'):
        db = context.bot_data['db']
        user_id = context.user_data['user_id']
        
        await db.update_user_profile(user_id, {'current_weight': weight})
        
        context.user_data['state'] = BotState.IDLE
        context.user_data.pop('quick_weight_update', None)
        
        await update.message.reply_text(
            f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {weight} –∫–≥",
            reply_markup=InlineKeyboards.back_to_menu()
        )
        return
    
    context.user_data['profile_data']['current_weight'] = weight
    context.user_data['state'] = BotState.PROFILE_TARGET_WEIGHT
    
    await update.message.reply_text("üéØ –£–∫–∞–∂–∏ —Å–≤–æ–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")

async def handle_profile_target_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞"""
    valid, weight, error = DataValidator.validate_weight(update.message.text)
    
    if not valid:
        await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    context.user_data['profile_data']['target_weight'] = weight
    context.user_data['state'] = BotState.PROFILE_ACTIVITY
    
    await update.message.reply_text(
        "üí™ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=InlineKeyboards.activity_level()
    )

async def handle_activity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    activity = query.data.split('_')[1]  # activity_moderate -> moderate
    context.user_data['profile_data']['activity_level'] = activity
    context.user_data['state'] = BotState.PROFILE_GOAL
    
    await query.edit_message_text(
        "üéØ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?",
        reply_markup=InlineKeyboards.goal_selection()
    )

async def handle_goal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    goal = query.data.split('_')[1]  # goal_lose -> lose
    context.user_data['profile_data']['goal'] = goal
    context.user_data['state'] = BotState.PROFILE_METHOD
    
    await query.edit_message_text(
        "üî¨ –í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£:",
        reply_markup=InlineKeyboards.calculation_method()
    )

async def handle_method_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è + –ø–ª–∞–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    method = query.data.split('_')[1]  # method_mifflin -> mifflin
    context.user_data['profile_data']['calculation_method'] = method
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
    db = context.bot_data['db']
    user_id = context.user_data['user_id']
    profile_data = context.user_data['profile_data']
    profile_data['user_id'] = user_id
    
    await query.edit_message_text("‚è≥ –°–æ–∑–¥–∞—é —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        if context.user_data.get('editing_profile'):
            await db.update_user_profile(user_id, profile_data)
        else:
            await db.create_user_profile(profile_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ AI
        openai_service = context.bot_data['openai']
        
        plan = await openai_service.generate_nutrition_plan(
            age=profile_data['age'],
            gender=profile_data['gender'],
            height=profile_data['height'],
            current_weight=profile_data['current_weight'],
            target_weight=profile_data['target_weight'],
            activity_level=profile_data['activity_level'],
            goal=profile_data['goal'],
            method=method
        )
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏
        methodology_explanation = NutritionCalculator.get_methodology_explanation(
            method=method,
            goal=profile_data['goal'],
            activity_level=profile_data['activity_level'],
            bmr=plan['bmr'],
            tdee=plan['tdee'],
            target_calories=plan['target_calories']
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI
        if 'explanation' in plan:
            methodology_explanation += f"\n\nüí° {plan['explanation']}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –ë–î
        nutrition_plan_data = {
            'user_id': user_id,
            'calories': plan['target_calories'],
            'protein': plan['protein_grams'],
            'fats': plan['fats_grams'],
            'carbs': plan['carbs_grams'],
            'bmr': plan['bmr'],
            'tdee': plan['tdee'],
            'methodology_explanation': methodology_explanation
        }
        
        await db.create_nutrition_plan(nutrition_plan_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_message = f"""‚úÖ –ü–†–û–§–ò–õ–¨ –°–û–ó–î–ê–ù!

üéØ –¢–í–û–ô –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø:

üìä –ö–∞–ª–æ—Ä–∏–∏: {plan['target_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å
ü•© –ë–µ–ª–∫–∏: {plan['protein_grams']} –≥
ü•ë –ñ–∏—Ä—ã: {plan['fats_grams']} –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {plan['carbs_grams']} –≥

{methodology_explanation}

–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ! üéâ"""
        
        context.user_data['state'] = BotState.IDLE
        context.user_data.pop('profile_data', None)
        context.user_data.pop('editing_profile', None)
        
        await query.edit_message_text(
            text=result_message,
            reply_markup=InlineKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboards.back_to_menu()
        )

