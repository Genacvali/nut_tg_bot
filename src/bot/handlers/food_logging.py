"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
"""
from telegram import Update
from telegram.ext import ContextTypes
from src.bot.keyboards.inline import InlineKeyboards
from src.bot.states import BotState
from datetime import datetime, date
import logging

logger = logging.getLogger(__name__)

async def log_food_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã"""
    query = update.callback_query
    await query.answer()
    
    message = """üçΩ –ó–ê–ü–ò–°–¨ –û –ï–î–ï

–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Å—ä–µ–ª(–∞). –ú–æ–∂–µ—à—å:

üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º
üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –æ—Ä–µ—Ö–∞–º–∏"
‚Ä¢ "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 150–≥, –≥—Ä–µ—á–∫–∞ 100–≥, –æ–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç"
‚Ä¢ "–î–≤–∞ —è–π—Ü–∞, —Ç–æ—Å—Ç —Å –∞–≤–æ–∫–∞–¥–æ"

–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –ö–ë–ñ–£."""
    
    context.user_data['state'] = BotState.FOOD_LOG_WAITING
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboards.back_to_menu()
    )

async def handle_food_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã"""
    description = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ AI
    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–¥—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ö–ë–ñ–£...")
    
    try:
        openai_service = context.bot_data['openai']
        food_analysis = await openai_service.analyze_food(description)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['pending_food'] = {
            'description': description,
            'food_name': food_analysis.get('food_name', description),
            'calories': food_analysis.get('calories', 0),
            'protein': food_analysis.get('protein', 0),
            'fats': food_analysis.get('fats', 0),
            'carbs': food_analysis.get('carbs', 0),
            'portion_note': food_analysis.get('portion_note', '')
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        message = f"""üìä –ê–ù–ê–õ–ò–ó –ï–î–´

üçΩ {food_analysis['food_name']}

–ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
üî• –ö–∞–ª–æ—Ä–∏–∏: {food_analysis['calories']} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {food_analysis['protein']} –≥
ü•ë –ñ–∏—Ä—ã: {food_analysis['fats']} –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {food_analysis['carbs']} –≥

üìù {food_analysis['portion_note']}

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –∑–∞–ø–∏—Å—å?"""
        
        context.user_data['state'] = BotState.FOOD_LOG_CONFIRM
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboards.food_log_confirm({})
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            reply_markup=InlineKeyboards.back_to_menu()
        )

async def confirm_food_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ"""
    query = update.callback_query
    await query.answer()
    
    pending_food = context.user_data.get('pending_food')
    if not pending_food:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db = context.bot_data['db']
    user_id = context.user_data['user_id']
    
    food_log_data = {
        'user_id': user_id,
        'description': pending_food['description'],
        'calories': pending_food['calories'],
        'protein': pending_food['protein'],
        'fats': pending_food['fats'],
        'carbs': pending_food['carbs'],
        'logged_at': datetime.now().isoformat()
    }
    
    try:
        await db.create_food_log(food_log_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_summary = await db.get_food_logs_summary(user_id, date.today())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
        nutrition_plan = await db.get_active_nutrition_plan(user_id)
        
        if nutrition_plan:
            remaining_calories = nutrition_plan['calories'] - today_summary['calories']
            remaining_protein = nutrition_plan['protein'] - today_summary['protein']
            remaining_fats = nutrition_plan['fats'] - today_summary['fats']
            remaining_carbs = nutrition_plan['carbs'] - today_summary['carbs']
            
            message = f"""‚úÖ –ó–ê–ü–ò–°–¨ –î–û–ë–ê–í–õ–ï–ù–ê!

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ê –°–ï–ì–û–î–ù–Ø:

–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ:
üî• –ö–∞–ª–æ—Ä–∏–∏: {today_summary['calories']:.0f} / {nutrition_plan['calories']} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {today_summary['protein']:.1f} / {nutrition_plan['protein']} –≥
ü•ë –ñ–∏—Ä—ã: {today_summary['fats']:.1f} / {nutrition_plan['fats']} –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {today_summary['carbs']:.1f} / {nutrition_plan['carbs']} –≥

–û—Å—Ç–∞–ª–æ—Å—å:
üî• {remaining_calories:.0f} –∫–∫–∞–ª
ü•© {remaining_protein:.1f} –≥
ü•ë {remaining_fats:.1f} –≥
üçû {remaining_carbs:.1f} –≥
"""
        else:
            message = f"""‚úÖ –ó–ê–ü–ò–°–¨ –î–û–ë–ê–í–õ–ï–ù–ê!

–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:
üî• {today_summary['calories']:.0f} –∫–∫–∞–ª
ü•© {today_summary['protein']:.1f} –≥
ü•ë {today_summary['fats']:.1f} –≥
üçû {today_summary['carbs']:.1f} –≥
"""
        
        context.user_data['state'] = BotState.IDLE
        context.user_data.pop('pending_food', None)
        
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboards.back_to_menu()
        )

async def cancel_food_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['state'] = BotState.IDLE
    context.user_data.pop('pending_food', None)
    
    await query.edit_message_text(
        "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=InlineKeyboards.main_menu()
    )

async def today_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data['db']
    user_id = context.user_data['user_id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_logs = await db.get_food_logs_by_date(user_id, date.today())
    today_summary = await db.get_food_logs_summary(user_id, date.today())
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    nutrition_plan = await db.get_active_nutrition_plan(user_id)
    
    if not nutrition_plan:
        await query.edit_message_text(
            "‚ö†Ô∏è –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–∞—á–∞–ª–∞!",
            reply_markup=InlineKeyboards.back_to_menu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üìÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ê –°–ï–ì–û–î–ù–Ø

üìä –¢–≤–æ—è –Ω–æ—Ä–º–∞:
üî• {nutrition_plan['calories']} –∫–∫–∞–ª
ü•© {nutrition_plan['protein']} –≥ –±–µ–ª–∫–∞
ü•ë {nutrition_plan['fats']} –≥ –∂–∏—Ä–æ–≤
üçû {nutrition_plan['carbs']} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

‚úÖ –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ:
üî• {today_summary['calories']:.0f} –∫–∫–∞–ª ({(today_summary['calories']/nutrition_plan['calories']*100):.0f}%)
ü•© {today_summary['protein']:.1f} –≥ ({(today_summary['protein']/nutrition_plan['protein']*100):.0f}%)
ü•ë {today_summary['fats']:.1f} –≥ ({(today_summary['fats']/nutrition_plan['fats']*100):.0f}%)
üçû {today_summary['carbs']:.1f} –≥ ({(today_summary['carbs']/nutrition_plan['carbs']*100):.0f}%)

üìù –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_summary['count']}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if today_logs:
        message += "\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏:\n"
        for log in today_logs[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
            time = datetime.fromisoformat(log['logged_at']).strftime("%H:%M")
            message += f"‚Ä¢ {time} - {log['description'][:50]}...\n"
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboards.today_stats_actions()
    )

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    voice = update.message.voice
    
    await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(voice.file_id)
        file_path = f"temp_voice_{update.effective_user.id}.ogg"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        voice_service = context.bot_data['voice']
        bot_token = context.bot_data['bot_token']
        
        success = await voice_service.download_voice_file(
            file.file_path,
            file_path,
            bot_token
        )
        
        if not success:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        text = await voice_service.transcribe_voice(file_path)
        
        if not text:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{text}\"")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = context.user_data.get('state', BotState.IDLE)
        
        if current_state == BotState.FOOD_LOG_WAITING:
            # –≠—Ç–æ –∑–∞–ø–∏—Å—å –æ –µ–¥–µ
            update.message.text = text
            await handle_food_description(update, context)
        elif current_state == BotState.MEAL_PLAN_REQUEST:
            # –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è
            update.message.text = text
            await handle_meal_request(update, context)
        else:
            # –û–±—â–∏–π AI —á–∞—Ç
            openai_service = context.bot_data['openai']
            response = await openai_service.general_chat(text)
            await update.message.reply_text(response, reply_markup=InlineKeyboards.back_to_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            reply_markup=InlineKeyboards.back_to_menu()
        )

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ meal_planning –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
async def handle_meal_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ meal_planning.py"""
    pass

