"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –ö–ë–ñ–£ –∏ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
"""
from typing import Dict, Tuple
import logging

logger = logging.getLogger(__name__)

class NutritionCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£"""
    
    @staticmethod
    def calculate_bmr_mifflin(weight: float, height: float, age: int, gender: str) -> float:
        """
        –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
        –°–∞–º–∞—è —Ç–æ—á–Ω–∞—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Ñ–æ—Ä–º—É–ª–∞
        
        Args:
            weight: –≤–µ—Å –≤ –∫–≥
            height: —Ä–æ—Å—Ç –≤ —Å–º
            age: –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
            gender: –ø–æ–ª ('male' –∏–ª–∏ 'female')
        
        Returns:
            BMR –≤ –∫–∫–∞–ª/–¥–µ–Ω—å
        """
        if gender == 'male':
            bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5
        else:  # female
            bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161
        
        logger.info(f"BMR (Mifflin): {bmr:.2f} –∫–∫–∞–ª –¥–ª—è {gender}, {age} –ª–µ—Ç, {weight} –∫–≥, {height} —Å–º")
        return round(bmr, 2)
    
    @staticmethod
    def calculate_bmr_harris(weight: float, height: float, age: int, gender: str) -> float:
        """
        –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –•–∞—Ä—Ä–∏—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞ (–ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è)
        
        Args:
            weight: –≤–µ—Å –≤ –∫–≥
            height: —Ä–æ—Å—Ç –≤ —Å–º
            age: –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
            gender: –ø–æ–ª ('male' –∏–ª–∏ 'female')
        
        Returns:
            BMR –≤ –∫–∫–∞–ª/–¥–µ–Ω—å
        """
        if gender == 'male':
            bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)
        else:  # female
            bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)
        
        logger.info(f"BMR (Harris-Benedict): {bmr:.2f} –∫–∫–∞–ª –¥–ª—è {gender}, {age} –ª–µ—Ç, {weight} –∫–≥, {height} —Å–º")
        return round(bmr, 2)
    
    @staticmethod
    def calculate_tdee(bmr: float, activity_level: str) -> float:
        """
        –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ —ç–Ω–µ—Ä–≥–∏–∏ (TDEE) —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        Args:
            bmr: –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º
            activity_level: —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        Returns:
            TDEE –≤ –∫–∫–∞–ª/–¥–µ–Ω—å
        """
        activity_multipliers = {
            "sedentary": 1.2,      # –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
            "light": 1.375,        # –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)
            "moderate": 1.55,      # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
            "active": 1.725,       # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
            "very_active": 1.9     # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
        }
        
        multiplier = activity_multipliers.get(activity_level, 1.2)
        tdee = bmr * multiplier
        
        logger.info(f"TDEE: {tdee:.2f} –∫–∫–∞–ª (BMR: {bmr} * {multiplier})")
        return round(tdee, 2)
    
    @staticmethod
    def calculate_target_calories(tdee: float, goal: str) -> int:
        """
        –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
        
        Args:
            tdee: –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏
            goal: —Ü–µ–ª—å ('lose', 'maintain', 'gain')
        
        Returns:
            –¶–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤ –∫–∫–∞–ª/–¥–µ–Ω—å
        """
        if goal == "lose":
            # –î–µ—Ñ–∏—Ü–∏—Ç 15-20% –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ—Ö—É–¥–µ–Ω–∏—è
            target = tdee * 0.85
        elif goal == "gain":
            # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 10-15% –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã
            target = tdee * 1.15
        else:  # maintain
            target = tdee
        
        logger.info(f"–¶–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {int(target)} –∫–∫–∞–ª –¥–ª—è —Ü–µ–ª–∏ '{goal}'")
        return int(target)
    
    @staticmethod
    def calculate_macros(target_calories: int, goal: str) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ (–ë–ñ–£) –≤ –≥—Ä–∞–º–º–∞—Ö
        
        Args:
            target_calories: —Ü–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
            goal: —Ü–µ–ª—å ('lose', 'maintain', 'gain')
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö
        """
        if goal == "lose":
            # –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: –±–æ–ª—å—à–µ –±–µ–ª–∫–∞, –º–µ–Ω—å—à–µ —É–≥–ª–µ–≤–æ–¥–æ–≤
            protein_percent = 0.35  # 35%
            fat_percent = 0.25      # 25%
            carb_percent = 0.40     # 40%
        elif goal == "gain":
            # –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            protein_percent = 0.30  # 30%
            fat_percent = 0.25      # 25%
            carb_percent = 0.45     # 45%
        else:  # maintain
            # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            protein_percent = 0.30  # 30%
            fat_percent = 0.30      # 30%
            carb_percent = 0.40     # 40%
        
        # 1 –≥—Ä–∞–º–º –±–µ–ª–∫–∞ = 4 –∫–∫–∞–ª
        # 1 –≥—Ä–∞–º–º –∂–∏—Ä–∞ = 9 –∫–∫–∞–ª
        # 1 –≥—Ä–∞–º–º —É–≥–ª–µ–≤–æ–¥–æ–≤ = 4 –∫–∫–∞–ª
        
        protein_grams = round((target_calories * protein_percent) / 4, 1)
        fat_grams = round((target_calories * fat_percent) / 9, 1)
        carb_grams = round((target_calories * carb_percent) / 4, 1)
        
        macros = {
            "protein": protein_grams,
            "fats": fat_grams,
            "carbs": carb_grams
        }
        
        logger.info(f"–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã: –ë:{protein_grams}–≥, –ñ:{fat_grams}–≥, –£:{carb_grams}–≥")
        return macros
    
    @staticmethod
    def calculate_full_nutrition_plan(
        weight: float,
        height: float,
        age: int,
        gender: str,
        activity_level: str,
        goal: str,
        method: str = "mifflin"
    ) -> Dict:
        """
        –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–Ω—ã–º –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è –∏ –≤—Å–µ–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
        """
        # –†–∞—Å—á–µ—Ç BMR
        if method == "mifflin":
            bmr = NutritionCalculator.calculate_bmr_mifflin(weight, height, age, gender)
        else:  # harris
            bmr = NutritionCalculator.calculate_bmr_harris(weight, height, age, gender)
        
        # –†–∞—Å—á–µ—Ç TDEE
        tdee = NutritionCalculator.calculate_tdee(bmr, activity_level)
        
        # –¶–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
        target_calories = NutritionCalculator.calculate_target_calories(tdee, goal)
        
        # –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
        macros = NutritionCalculator.calculate_macros(target_calories, goal)
        
        return {
            "bmr": bmr,
            "tdee": tdee,
            "target_calories": target_calories,
            "protein": macros["protein"],
            "fats": macros["fats"],
            "carbs": macros["carbs"]
        }
    
    @staticmethod
    def get_methodology_explanation(
        method: str,
        goal: str,
        activity_level: str,
        bmr: float,
        tdee: float,
        target_calories: int
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
        """
        method_name = "–ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞" if method == "mifflin" else "–•–∞—Ä—Ä–∏—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞"
        
        activity_names = {
            "sedentary": "—Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.2)",
            "light": "–ª–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.375)",
            "moderate": "—É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.55)",
            "active": "–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.725)",
            "very_active": "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.9)"
        }
        
        goal_names = {
            "lose": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ (–¥–µ—Ñ–∏—Ü–∏—Ç 15%)",
            "maintain": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
            "gain": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç 15%)"
        }
        
        explanation = f"""üìä –ú–ï–¢–û–î–ò–ö–ê –†–ê–°–ß–ï–¢–ê:

üîπ –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (BMR): {bmr:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å
   –†–∞—Å—Å—á–∏—Ç–∞–Ω –ø–æ —Ñ–æ—Ä–º—É–ª–µ {method_name} - –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö —Ç–æ—á–Ω—ã—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª.

üîπ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ (TDEE): {tdee:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å
   BMR —É–º–Ω–æ–∂–µ–Ω –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({activity_names.get(activity_level, activity_level)})

üîπ –¶–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {target_calories} –∫–∫–∞–ª/–¥–µ–Ω—å
   –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –≤–∞—à—É —Ü–µ–ª—å: {goal_names.get(goal, goal)}

üîπ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:
   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–≤–æ–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
        
        return explanation

